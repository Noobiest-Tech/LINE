#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class AuthKeyVersion(object):
    UNKNOWN = 0
    V1 = 1

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "V1",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "V1": 1,
    }


class AuthLoginVersion(object):
    UNKNOWN = 0
    V1 = 1
    V2 = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "V1",
        2: "V2",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "V1": 1,
        "V2": 2,
    }


class EncryptionKeyVersion(object):
    UNKNOWN = 0
    V1 = 1

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "V1",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "V1": 1,
    }


class SecondAuthMethod(object):
    UNKNOWN = 0
    SKIP = 1
    WEB_BASED = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "SKIP",
        2: "WEB_BASED",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "SKIP": 1,
        "WEB_BASED": 2,
    }


class AvailableMethod(object):
    UNKNOWN = 0
    SKIP = 1
    PASSWORD = 2
    WEB_BASED = 3

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "SKIP",
        2: "PASSWORD",
        3: "WEB_BASED",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "SKIP": 1,
        "PASSWORD": 2,
        "WEB_BASED": 3,
    }


class AvailableVerificationMethod(object):
    UNKNOWN = 0
    UNAVAILABLE = 1
    SMS = 2
    TTS = 3

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "UNAVAILABLE",
        2: "SMS",
        3: "TTS",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "UNAVAILABLE": 1,
        "SMS": 2,
        "TTS": 3,
    }


class VerificationMethod(object):
    NO_AVAILABLE = 0
    PIN_VIA_SMS = 1
    CALLERID_INDIGO = 2
    PIN_VIA_TTS = 4
    SKIP = 10

    _VALUES_TO_NAMES = {
        0: "NO_AVAILABLE",
        1: "PIN_VIA_SMS",
        2: "CALLERID_INDIGO",
        4: "PIN_VIA_TTS",
        10: "SKIP",
    }

    _NAMES_TO_VALUES = {
        "NO_AVAILABLE": 0,
        "PIN_VIA_SMS": 1,
        "CALLERID_INDIGO": 2,
        "PIN_VIA_TTS": 4,
        "SKIP": 10,
    }


class VerificationResult(object):
    FAILED = 0
    OK_NOT_REGISTERED_YET = 1
    OK_REGISTERED_WITH_SAME_DEVICE = 2
    OK_REGISTERED_WITH_ANOTHER_DEVICE = 3

    _VALUES_TO_NAMES = {
        0: "FAILED",
        1: "OK_NOT_REGISTERED_YET",
        2: "OK_REGISTERED_WITH_SAME_DEVICE",
        3: "OK_REGISTERED_WITH_ANOTHER_DEVICE",
    }

    _NAMES_TO_VALUES = {
        "FAILED": 0,
        "OK_NOT_REGISTERED_YET": 1,
        "OK_REGISTERED_WITH_SAME_DEVICE": 2,
        "OK_REGISTERED_WITH_ANOTHER_DEVICE": 3,
    }


class LoginType(object):
    ID_CREDENTIAL = 0
    QRCODE = 1
    ID_CREDENTIAL_WITH_E2EE = 2

    _VALUES_TO_NAMES = {
        0: "ID_CREDENTIAL",
        1: "QRCODE",
        2: "ID_CREDENTIAL_WITH_E2EE",
    }

    _NAMES_TO_VALUES = {
        "ID_CREDENTIAL": 0,
        "QRCODE": 1,
        "ID_CREDENTIAL_WITH_E2EE": 2,
    }


class LoginResultType(object):
    SUCCESS = 1
    REQUIRE_QRCODE = 2
    REQUIRE_DEVICE_CONFIRM = 3
    REQUIRE_SMS_CONFIRM = 4

    _VALUES_TO_NAMES = {
        1: "SUCCESS",
        2: "REQUIRE_QRCODE",
        3: "REQUIRE_DEVICE_CONFIRM",
        4: "REQUIRE_SMS_CONFIRM",
    }

    _NAMES_TO_VALUES = {
        "SUCCESS": 1,
        "REQUIRE_QRCODE": 2,
        "REQUIRE_DEVICE_CONFIRM": 3,
        "REQUIRE_SMS_CONFIRM": 4,
    }


class SocialLoginType(object):
    UNKNOWN = 0
    FACEBOOK = 1
    APPLE = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "FACEBOOK",
        2: "APPLE",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "FACEBOOK": 1,
        "APPLE": 2,
    }


class AccountIdentifierType(object):
    UNKNOWN = 0
    PHONE_NUMBER = 1
    EMAIL = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "PHONE_NUMBER",
        2: "EMAIL",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "PHONE_NUMBER": 1,
        "EMAIL": 2,
    }


class AccountMigrationCheckType(object):
    SKIP = 0
    PINCODE = 1
    SECURITY_CENTER = 2

    _VALUES_TO_NAMES = {
        0: "SKIP",
        1: "PINCODE",
        2: "SECURITY_CENTER",
    }

    _NAMES_TO_VALUES = {
        "SKIP": 0,
        "PINCODE": 1,
        "SECURITY_CENTER": 2,
    }


class EmailConfirmationStatus(object):
    NOT_SPECIFIED = 0
    NOT_YET = 1
    DONE = 3
    NEED_ENFORCED_INPUT = 4

    _VALUES_TO_NAMES = {
        0: "NOT_SPECIFIED",
        1: "NOT_YET",
        3: "DONE",
        4: "NEED_ENFORCED_INPUT",
    }

    _NAMES_TO_VALUES = {
        "NOT_SPECIFIED": 0,
        "NOT_YET": 1,
        "DONE": 3,
        "NEED_ENFORCED_INPUT": 4,
    }


class AccountMigrationPincodeType(object):
    NOT_APPLICABLE = 0
    NOT_SET = 1
    SET = 2
    NEED_ENFORCED_INPUT = 3

    _VALUES_TO_NAMES = {
        0: "NOT_APPLICABLE",
        1: "NOT_SET",
        2: "SET",
        3: "NEED_ENFORCED_INPUT",
    }

    _NAMES_TO_VALUES = {
        "NOT_APPLICABLE": 0,
        "NOT_SET": 1,
        "SET": 2,
        "NEED_ENFORCED_INPUT": 3,
    }


class ResponseType(object):
    UNKNOWN = 0
    SUCCESS = 1
    REQUIRE_SERVER_SIDE_EMAIL = 2
    REQUIRE_CLIENT_SIDE_EMAIL = 3

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "SUCCESS",
        2: "REQUIRE_SERVER_SIDE_EMAIL",
        3: "REQUIRE_CLIENT_SIDE_EMAIL",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "SUCCESS": 1,
        "REQUIRE_SERVER_SIDE_EMAIL": 2,
        "REQUIRE_CLIENT_SIDE_EMAIL": 3,
    }


class IdentityProvider(object):
    UNKNOWN = 0
    LINE = 1
    NAVER_KR = 2
    LINE_PHONE = 3

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "LINE",
        2: "NAVER_KR",
        3: "LINE_PHONE",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "LINE": 1,
        "NAVER_KR": 2,
        "LINE_PHONE": 3,
    }


class ChatType(object):
    GROUP = 0
    ROOM = 1
    PEER = 2

    _VALUES_TO_NAMES = {
        0: "GROUP",
        1: "ROOM",
        2: "PEER",
    }

    _NAMES_TO_VALUES = {
        "GROUP": 0,
        "ROOM": 1,
        "PEER": 2,
    }


class Direction(object):
    INCOMING = 1
    OUTGOING = 2

    _VALUES_TO_NAMES = {
        1: "INCOMING",
        2: "OUTGOING",
    }

    _NAMES_TO_VALUES = {
        "INCOMING": 1,
        "OUTGOING": 2,
    }


class FriendRequestMethod(object):
    TIMELINE = 1
    NEARBY = 2
    SQUARE = 3

    _VALUES_TO_NAMES = {
        1: "TIMELINE",
        2: "NEARBY",
        3: "SQUARE",
    }

    _NAMES_TO_VALUES = {
        "TIMELINE": 1,
        "NEARBY": 2,
        "SQUARE": 3,
    }


class FriendRequestStatus(object):
    NONE = 0
    AVAILABLE = 1
    ALREADY_REQUESTED = 2
    UNAVAILABLE = 3

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "AVAILABLE",
        2: "ALREADY_REQUESTED",
        3: "UNAVAILABLE",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "AVAILABLE": 1,
        "ALREADY_REQUESTED": 2,
        "UNAVAILABLE": 3,
    }


class ContactModificationType(object):
    ADD = 0
    REMOVE = 1
    MODIFY = 2

    _VALUES_TO_NAMES = {
        0: "ADD",
        1: "REMOVE",
        2: "MODIFY",
    }

    _NAMES_TO_VALUES = {
        "ADD": 0,
        "REMOVE": 1,
        "MODIFY": 2,
    }


class ContactStatus(object):
    UNSPECIFIED = 0
    FRIEND = 1
    FRIEND_BLOCKED = 2
    RECOMMEND = 3
    RECOMMEND_BLOCKED = 4
    DELETED = 5
    DELETED_BLOCKED = 6

    _VALUES_TO_NAMES = {
        0: "UNSPECIFIED",
        1: "FRIEND",
        2: "FRIEND_BLOCKED",
        3: "RECOMMEND",
        4: "RECOMMEND_BLOCKED",
        5: "DELETED",
        6: "DELETED_BLOCKED",
    }

    _NAMES_TO_VALUES = {
        "UNSPECIFIED": 0,
        "FRIEND": 1,
        "FRIEND_BLOCKED": 2,
        "RECOMMEND": 3,
        "RECOMMEND_BLOCKED": 4,
        "DELETED": 5,
        "DELETED_BLOCKED": 6,
    }


class ContactType(object):
    MID = 0
    PHONE = 1
    EMAIL = 2
    USERID = 3
    PROXIMITY = 4
    GROUP = 5
    USER = 6
    QRCODE = 7
    PROMOTION_BOT = 8
    CONTACT_MESSAGE = 9
    FRIEND_REQUEST = 10
    BEACON = 11
    REPAIR = 128
    FACEBOOK = 2305
    SINA = 2306
    RENREN = 2307
    FEIXIN = 2308
    BBM = 2309

    _VALUES_TO_NAMES = {
        0: "MID",
        1: "PHONE",
        2: "EMAIL",
        3: "USERID",
        4: "PROXIMITY",
        5: "GROUP",
        6: "USER",
        7: "QRCODE",
        8: "PROMOTION_BOT",
        9: "CONTACT_MESSAGE",
        10: "FRIEND_REQUEST",
        11: "BEACON",
        128: "REPAIR",
        2305: "FACEBOOK",
        2306: "SINA",
        2307: "RENREN",
        2308: "FEIXIN",
        2309: "BBM",
    }

    _NAMES_TO_VALUES = {
        "MID": 0,
        "PHONE": 1,
        "EMAIL": 2,
        "USERID": 3,
        "PROXIMITY": 4,
        "GROUP": 5,
        "USER": 6,
        "QRCODE": 7,
        "PROMOTION_BOT": 8,
        "CONTACT_MESSAGE": 9,
        "FRIEND_REQUEST": 10,
        "BEACON": 11,
        "REPAIR": 128,
        "FACEBOOK": 2305,
        "SINA": 2306,
        "RENREN": 2307,
        "FEIXIN": 2308,
        "BBM": 2309,
    }


class MidType(object):
    USER = 0
    ROOM = 1
    GROUP = 2
    SQUARE = 3
    SQUARE_CHAT = 4
    SQUARE_MEMBER = 5
    BOT = 6

    _VALUES_TO_NAMES = {
        0: "USER",
        1: "ROOM",
        2: "GROUP",
        3: "SQUARE",
        4: "SQUARE_CHAT",
        5: "SQUARE_MEMBER",
        6: "BOT",
    }

    _NAMES_TO_VALUES = {
        "USER": 0,
        "ROOM": 1,
        "GROUP": 2,
        "SQUARE": 3,
        "SQUARE_CHAT": 4,
        "SQUARE_MEMBER": 5,
        "BOT": 6,
    }


class Relation(object):
    ONEWAY = 0
    BOTH = 1
    NOT_REGISTERED = 2

    _VALUES_TO_NAMES = {
        0: "ONEWAY",
        1: "BOTH",
        2: "NOT_REGISTERED",
    }

    _NAMES_TO_VALUES = {
        "ONEWAY": 0,
        "BOTH": 1,
        "NOT_REGISTERED": 2,
    }


class MessageRelationType(object):
    FORWARD = 0
    AUTO_REPLY = 1
    SUBORDINATE = 2
    REPLY = 3

    _VALUES_TO_NAMES = {
        0: "FORWARD",
        1: "AUTO_REPLY",
        2: "SUBORDINATE",
        3: "REPLY",
    }

    _NAMES_TO_VALUES = {
        "FORWARD": 0,
        "AUTO_REPLY": 1,
        "SUBORDINATE": 2,
        "REPLY": 3,
    }


class RelatedMessageServiceCode(object):
    UNKNOWN = 0
    TALK = 1
    SQUARE = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "TALK",
        2: "SQUARE",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "TALK": 1,
        "SQUARE": 2,
    }


class Provider(object):
    GOOGLE = 0
    BAIDU = 1
    FOURSQUARE = 2

    _VALUES_TO_NAMES = {
        0: "GOOGLE",
        1: "BAIDU",
        2: "FOURSQUARE",
    }

    _NAMES_TO_VALUES = {
        "GOOGLE": 0,
        "BAIDU": 1,
        "FOURSQUARE": 2,
    }


class DeletePermission(object):
    ANYONE_IN_CHAT = 0
    CREATOR_ONLY = 1
    NO_ONE = 2

    _VALUES_TO_NAMES = {
        0: "ANYONE_IN_CHAT",
        1: "CREATOR_ONLY",
        2: "NO_ONE",
    }

    _NAMES_TO_VALUES = {
        "ANYONE_IN_CHAT": 0,
        "CREATOR_ONLY": 1,
        "NO_ONE": 2,
    }


class CustomMode(object):
    PROMOTION_FRIENDS_INVITE = 1
    CAPABILITY_SERVER_SIDE_SMS = 2
    LINE_CLIENT_ANALYTICS_CONFIGURATION = 3

    _VALUES_TO_NAMES = {
        1: "PROMOTION_FRIENDS_INVITE",
        2: "CAPABILITY_SERVER_SIDE_SMS",
        3: "LINE_CLIENT_ANALYTICS_CONFIGURATION",
    }

    _NAMES_TO_VALUES = {
        "PROMOTION_FRIENDS_INVITE": 1,
        "CAPABILITY_SERVER_SIDE_SMS": 2,
        "LINE_CLIENT_ANALYTICS_CONFIGURATION": 3,
    }


class Protocol(object):
    STANDARD = 1
    CONSTELLA = 2

    _VALUES_TO_NAMES = {
        1: "STANDARD",
        2: "CONSTELLA",
    }

    _NAMES_TO_VALUES = {
        "STANDARD": 1,
        "CONSTELLA": 2,
    }


class MediaType(object):
    AUDIO = 1
    VIDEO = 2
    LIVE = 3

    _VALUES_TO_NAMES = {
        1: "AUDIO",
        2: "VIDEO",
        3: "LIVE",
    }

    _NAMES_TO_VALUES = {
        "AUDIO": 1,
        "VIDEO": 2,
        "LIVE": 3,
    }


class CallType(object):
    AUDIO = 1
    VIDEO = 2
    FACEPLAY = 3

    _VALUES_TO_NAMES = {
        1: "AUDIO",
        2: "VIDEO",
        3: "FACEPLAY",
    }

    _NAMES_TO_VALUES = {
        "AUDIO": 1,
        "VIDEO": 2,
        "FACEPLAY": 3,
    }


class CallFlowType(object):
    NEW = 1
    PLANET = 2

    _VALUES_TO_NAMES = {
        1: "NEW",
        2: "PLANET",
    }

    _NAMES_TO_VALUES = {
        "NEW": 1,
        "PLANET": 2,
    }


class OnAirLabel(object):
    ON_AIR = 0
    LIVE = 1

    _VALUES_TO_NAMES = {
        0: "ON_AIR",
        1: "LIVE",
    }

    _NAMES_TO_VALUES = {
        "ON_AIR": 0,
        "LIVE": 1,
    }


class ContentType(object):
    NONE = 0
    IMAGE = 1
    VIDEO = 2
    AUDIO = 3
    HTML = 4
    PDF = 5
    CALL = 6
    STICKER = 7
    PRESENCE = 8
    GIFT = 9
    GROUPBOARD = 10
    APPLINK = 11
    LINK = 12
    CONTACT = 13
    FILE = 14
    LOCATION = 15
    POSTNOTIFICATION = 16
    RICH = 17
    CHATEVENT = 18
    MUSIC = 19
    PAYMENT = 20
    EXTIMAGE = 21
    FLEX = 22

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "IMAGE",
        2: "VIDEO",
        3: "AUDIO",
        4: "HTML",
        5: "PDF",
        6: "CALL",
        7: "STICKER",
        8: "PRESENCE",
        9: "GIFT",
        10: "GROUPBOARD",
        11: "APPLINK",
        12: "LINK",
        13: "CONTACT",
        14: "FILE",
        15: "LOCATION",
        16: "POSTNOTIFICATION",
        17: "RICH",
        18: "CHATEVENT",
        19: "MUSIC",
        20: "PAYMENT",
        21: "EXTIMAGE",
        22: "FLEX",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "IMAGE": 1,
        "VIDEO": 2,
        "AUDIO": 3,
        "HTML": 4,
        "PDF": 5,
        "CALL": 6,
        "STICKER": 7,
        "PRESENCE": 8,
        "GIFT": 9,
        "GROUPBOARD": 10,
        "APPLINK": 11,
        "LINK": 12,
        "CONTACT": 13,
        "FILE": 14,
        "LOCATION": 15,
        "POSTNOTIFICATION": 16,
        "RICH": 17,
        "CHATEVENT": 18,
        "MUSIC": 19,
        "PAYMENT": 20,
        "EXTIMAGE": 21,
        "FLEX": 22,
    }


class ChatRoomAnnouncementType(object):
    MESSAGE = 0
    NOTE = 1
    CHANNEL = 2

    _VALUES_TO_NAMES = {
        0: "MESSAGE",
        1: "NOTE",
        2: "CHANNEL",
    }

    _NAMES_TO_VALUES = {
        "MESSAGE": 0,
        "NOTE": 1,
        "CHANNEL": 2,
    }


class OperationStatus(object):
    NORMAL = 0
    ALERT_DISABLED = 1
    ALWAYS = 2

    _VALUES_TO_NAMES = {
        0: "NORMAL",
        1: "ALERT_DISABLED",
        2: "ALWAYS",
    }

    _NAMES_TO_VALUES = {
        "NORMAL": 0,
        "ALERT_DISABLED": 1,
        "ALWAYS": 2,
    }


class PrivacyAllowProfileHistory(object):
    OWNER = 0
    FRIEND = 1

    _VALUES_TO_NAMES = {
        0: "OWNER",
        1: "FRIEND",
    }

    _NAMES_TO_VALUES = {
        "OWNER": 0,
        "FRIEND": 1,
    }


class PrivacyStatusMessageHistory(object):
    NONE = 1
    ALL = 2

    _VALUES_TO_NAMES = {
        1: "NONE",
        2: "ALL",
    }

    _NAMES_TO_VALUES = {
        "NONE": 1,
        "ALL": 2,
    }


class YearPrivacyLevelType(object):
    PUBLIC = 0
    PRIVATE = 1

    _VALUES_TO_NAMES = {
        0: "PUBLIC",
        1: "PRIVATE",
    }

    _NAMES_TO_VALUES = {
        "PUBLIC": 0,
        "PRIVATE": 1,
    }


class PrivacySharePersonalInfoToFriends(object):
    NEVER_SHOW = 0
    ONE_WAY = 1
    MUTUAL = 2

    _VALUES_TO_NAMES = {
        0: "NEVER_SHOW",
        1: "ONE_WAY",
        2: "MUTUAL",
    }

    _NAMES_TO_VALUES = {
        "NEVER_SHOW": 0,
        "ONE_WAY": 1,
        "MUTUAL": 2,
    }


class PrivacyAgeResult(object):
    OVER = 1
    UNDER = 2
    UNDEFINED = 3

    _VALUES_TO_NAMES = {
        1: "OVER",
        2: "UNDER",
        3: "UNDEFINED",
    }

    _NAMES_TO_VALUES = {
        "OVER": 1,
        "UNDER": 2,
        "UNDEFINED": 3,
    }


class UpdateExtendedProfileAttributeAttr(object):
    BIRTHDAY = 0

    _VALUES_TO_NAMES = {
        0: "BIRTHDAY",
    }

    _NAMES_TO_VALUES = {
        "BIRTHDAY": 0,
    }


class NetworkType(object):
    UNKNOWN = 0
    WIFI = 1
    CELLULAR_NETWORK = 2

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "WIFI",
        2: "CELLULAR_NETWORK",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "WIFI": 1,
        "CELLULAR_NETWORK": 2,
    }


class BatteryMode(object):
    NORMAL = 1
    LOW_BATTERY = 2

    _VALUES_TO_NAMES = {
        1: "NORMAL",
        2: "LOW_BATTERY",
    }

    _NAMES_TO_VALUES = {
        "NORMAL": 1,
        "LOW_BATTERY": 2,
    }


class ChatEffectCategories(object):
    BACKGROUND = 0
    KEYWORD = 1

    _VALUES_TO_NAMES = {
        0: "BACKGROUND",
        1: "KEYWORD",
    }

    _NAMES_TO_VALUES = {
        "BACKGROUND": 0,
        "KEYWORD": 1,
    }


class ChatEffectType(object):
    LOW = 0

    _VALUES_TO_NAMES = {
        0: "LOW",
    }

    _NAMES_TO_VALUES = {
        "LOW": 0,
    }


class AppExtensionType(object):
    SIRI = 1
    GOOGLE_ASSISTANT = 2
    OS_SHARE = 3

    _VALUES_TO_NAMES = {
        1: "SIRI",
        2: "GOOGLE_ASSISTANT",
        3: "OS_SHARE",
    }

    _NAMES_TO_VALUES = {
        "SIRI": 1,
        "GOOGLE_ASSISTANT": 2,
        "OS_SHARE": 3,
    }


class FeatureType(object):
    OBS_VIDEO = 1
    OBS_GENERAL = 2
    OBS_RINGBACK_TONE = 3

    _VALUES_TO_NAMES = {
        1: "OBS_VIDEO",
        2: "OBS_GENERAL",
        3: "OBS_RINGBACK_TONE",
    }

    _NAMES_TO_VALUES = {
        "OBS_VIDEO": 1,
        "OBS_GENERAL": 2,
        "OBS_RINGBACK_TONE": 3,
    }


class PublicType(object):
    HIDDEN = 0
    PUBLIC = 1000

    _VALUES_TO_NAMES = {
        0: "HIDDEN",
        1000: "PUBLIC",
    }

    _NAMES_TO_VALUES = {
        "HIDDEN": 0,
        "PUBLIC": 1000,
    }


class SyncReason(object):
    UNSPECIFIED = 0
    UNKNOWN = 1
    INITIALIZATION = 2
    OPERATION = 3
    FULL_SYNC = 4
    AUTO_REPAIR = 5
    MANUAL_REPAIR = 6
    INTERNAL = 7

    _VALUES_TO_NAMES = {
        0: "UNSPECIFIED",
        1: "UNKNOWN",
        2: "INITIALIZATION",
        3: "OPERATION",
        4: "FULL_SYNC",
        5: "AUTO_REPAIR",
        6: "MANUAL_REPAIR",
        7: "INTERNAL",
    }

    _NAMES_TO_VALUES = {
        "UNSPECIFIED": 0,
        "UNKNOWN": 1,
        "INITIALIZATION": 2,
        "OPERATION": 3,
        "FULL_SYNC": 4,
        "AUTO_REPAIR": 5,
        "MANUAL_REPAIR": 6,
        "INTERNAL": 7,
    }


class BotType(object):
    RESERVED = 0
    OFFICIAL = 1
    LINE_AT_0 = 2
    LINE_AT = 3

    _VALUES_TO_NAMES = {
        0: "RESERVED",
        1: "OFFICIAL",
        2: "LINE_AT_0",
        3: "LINE_AT",
    }

    _NAMES_TO_VALUES = {
        "RESERVED": 0,
        "OFFICIAL": 1,
        "LINE_AT_0": 2,
        "LINE_AT": 3,
    }


class SnsIdType(object):
    FACEBOOK = 1
    SINA = 2
    RENREN = 3
    FEIXIN = 4
    BBM = 5
    APPLE = 6

    _VALUES_TO_NAMES = {
        1: "FACEBOOK",
        2: "SINA",
        3: "RENREN",
        4: "FEIXIN",
        5: "BBM",
        6: "APPLE",
    }

    _NAMES_TO_VALUES = {
        "FACEBOOK": 1,
        "SINA": 2,
        "RENREN": 3,
        "FEIXIN": 4,
        "BBM": 5,
        "APPLE": 6,
    }


class UpdatedGroupAttribute(object):
    NAME = 1
    PICTURE_STATUS = 2
    PREVENTED_JOIN_BY_TICKET = 4
    NOTIFICATION_SETTING = 8
    INVITATION_TICKET = 16
    FAVORITE_TIMESTAMP = 32
    CHAT_TYPE = 64

    _VALUES_TO_NAMES = {
        1: "NAME",
        2: "PICTURE_STATUS",
        4: "PREVENTED_JOIN_BY_TICKET",
        8: "NOTIFICATION_SETTING",
        16: "INVITATION_TICKET",
        32: "FAVORITE_TIMESTAMP",
        64: "CHAT_TYPE",
    }

    _NAMES_TO_VALUES = {
        "NAME": 1,
        "PICTURE_STATUS": 2,
        "PREVENTED_JOIN_BY_TICKET": 4,
        "NOTIFICATION_SETTING": 8,
        "INVITATION_TICKET": 16,
        "FAVORITE_TIMESTAMP": 32,
        "CHAT_TYPE": 64,
    }


class LiffMenuStyle(object):
    LIGHT = 1
    LIGHT_TRANSLUCENT = 2
    DARK_TRANSLUCENT = 3

    _VALUES_TO_NAMES = {
        1: "LIGHT",
        2: "LIGHT_TRANSLUCENT",
        3: "DARK_TRANSLUCENT",
    }

    _NAMES_TO_VALUES = {
        "LIGHT": 1,
        "LIGHT_TRANSLUCENT": 2,
        "DARK_TRANSLUCENT": 3,
    }


class LiffLaunchOption(object):
    ALLOW_DIRECT_LINK = 1

    _VALUES_TO_NAMES = {
        1: "ALLOW_DIRECT_LINK",
    }

    _NAMES_TO_VALUES = {
        "ALLOW_DIRECT_LINK": 1,
    }


class LiffFeature(object):
    GEOLOCATION = 1
    ADVERTISING_ID = 2
    BLUETOOTH_LE = 3
    QR_CODE = 4
    ADVERTISING_SDK = 5
    ADD_TO_HOME = 6
    SHARE_TARGET_MESSAGE = 7
    VIDEO_AUTO_PLAY = 8
    PROFILE_PLUS = 9

    _VALUES_TO_NAMES = {
        1: "GEOLOCATION",
        2: "ADVERTISING_ID",
        3: "BLUETOOTH_LE",
        4: "QR_CODE",
        5: "ADVERTISING_SDK",
        6: "ADD_TO_HOME",
        7: "SHARE_TARGET_MESSAGE",
        8: "VIDEO_AUTO_PLAY",
        9: "PROFILE_PLUS",
    }

    _NAMES_TO_VALUES = {
        "GEOLOCATION": 1,
        "ADVERTISING_ID": 2,
        "BLUETOOTH_LE": 3,
        "QR_CODE": 4,
        "ADVERTISING_SDK": 5,
        "ADD_TO_HOME": 6,
        "SHARE_TARGET_MESSAGE": 7,
        "VIDEO_AUTO_PLAY": 8,
        "PROFILE_PLUS": 9,
    }


class LiffErrorCode(object):
    INVALID_REQUEST = 1
    UNAUTHORIZED = 2
    CONSENT_REQUIRED = 3
    VERSION_UPDATE_REQUIRED = 4
    SERVER_ERROR = 100

    _VALUES_TO_NAMES = {
        1: "INVALID_REQUEST",
        2: "UNAUTHORIZED",
        3: "CONSENT_REQUIRED",
        4: "VERSION_UPDATE_REQUIRED",
        100: "SERVER_ERROR",
    }

    _NAMES_TO_VALUES = {
        "INVALID_REQUEST": 1,
        "UNAUTHORIZED": 2,
        "CONSENT_REQUIRED": 3,
        "VERSION_UPDATE_REQUIRED": 4,
        "SERVER_ERROR": 100,
    }


class ChannelConfiguration(object):
    MESSAGE = 0
    MESSAGE_NOTIFICATION = 1
    NOTIFICATION_CENTER = 2

    _VALUES_TO_NAMES = {
        0: "MESSAGE",
        1: "MESSAGE_NOTIFICATION",
        2: "NOTIFICATION_CENTER",
    }

    _NAMES_TO_VALUES = {
        "MESSAGE": 0,
        "MESSAGE_NOTIFICATION": 1,
        "NOTIFICATION_CENTER": 2,
    }


class ChannelPermission(object):
    PROFILE = 0
    FRIENDS = 1
    GROUP = 2

    _VALUES_TO_NAMES = {
        0: "PROFILE",
        1: "FRIENDS",
        2: "GROUP",
    }

    _NAMES_TO_VALUES = {
        "PROFILE": 0,
        "FRIENDS": 1,
        "GROUP": 2,
    }


class ChannelFeatureLicense(object):
    BLE_LCS_API_USABLE = 26
    PROHIBIT_MINIMIZE_CHANNEL_BROWSER = 27
    ALLOW_IOS_WEBKIT = 28
    PURCHASE_LCS_API_USABLE = 38
    ALLOW_ANDROID_ENABLE_ZOOM = 48

    _VALUES_TO_NAMES = {
        26: "BLE_LCS_API_USABLE",
        27: "PROHIBIT_MINIMIZE_CHANNEL_BROWSER",
        28: "ALLOW_IOS_WEBKIT",
        38: "PURCHASE_LCS_API_USABLE",
        48: "ALLOW_ANDROID_ENABLE_ZOOM",
    }

    _NAMES_TO_VALUES = {
        "BLE_LCS_API_USABLE": 26,
        "PROHIBIT_MINIMIZE_CHANNEL_BROWSER": 27,
        "ALLOW_IOS_WEBKIT": 28,
        "PURCHASE_LCS_API_USABLE": 38,
        "ALLOW_ANDROID_ENABLE_ZOOM": 48,
    }


class PaymentType(object):
    PAYMENT_APPLE = 1
    PAYMENT_GOOGLE = 2

    _VALUES_TO_NAMES = {
        1: "PAYMENT_APPLE",
        2: "PAYMENT_GOOGLE",
    }

    _NAMES_TO_VALUES = {
        "PAYMENT_APPLE": 1,
        "PAYMENT_GOOGLE": 2,
    }


class Carrier(object):
    NOT_SPECIFIED = 0
    JP_DOCOMO = 1
    JP_AU = 2
    JP_SOFTBANK = 3
    JP_DOCOMO_LINE = 4
    JP_SOFTBANK_LINE = 5
    JP_AU_LINE = 6
    KR_SKT = 17
    KR_KT = 18
    KR_LGT = 19

    _VALUES_TO_NAMES = {
        0: "NOT_SPECIFIED",
        1: "JP_DOCOMO",
        2: "JP_AU",
        3: "JP_SOFTBANK",
        4: "JP_DOCOMO_LINE",
        5: "JP_SOFTBANK_LINE",
        6: "JP_AU_LINE",
        17: "KR_SKT",
        18: "KR_KT",
        19: "KR_LGT",
    }

    _NAMES_TO_VALUES = {
        "NOT_SPECIFIED": 0,
        "JP_DOCOMO": 1,
        "JP_AU": 2,
        "JP_SOFTBANK": 3,
        "JP_DOCOMO_LINE": 4,
        "JP_SOFTBANK_LINE": 5,
        "JP_AU_LINE": 6,
        "KR_SKT": 17,
        "KR_KT": 18,
        "KR_LGT": 19,
    }


class ReportType(object):
    BEACON_AGREEMENT = 1
    BLUETOOTH = 2
    SHAKE_AGREEMENT = 3
    AUTO_SUGGEST = 4
    CHATROOM_CAPTURE = 5
    CHATROOM_MINIMIZEBROWSER = 6
    CHATROOM_MOBILESAFARI = 7
    VIDEO_HIGHTLIGHT_WIZARD = 8
    CHAT_FOLDER = 9

    _VALUES_TO_NAMES = {
        1: "BEACON_AGREEMENT",
        2: "BLUETOOTH",
        3: "SHAKE_AGREEMENT",
        4: "AUTO_SUGGEST",
        5: "CHATROOM_CAPTURE",
        6: "CHATROOM_MINIMIZEBROWSER",
        7: "CHATROOM_MOBILESAFARI",
        8: "VIDEO_HIGHTLIGHT_WIZARD",
        9: "CHAT_FOLDER",
    }

    _NAMES_TO_VALUES = {
        "BEACON_AGREEMENT": 1,
        "BLUETOOTH": 2,
        "SHAKE_AGREEMENT": 3,
        "AUTO_SUGGEST": 4,
        "CHATROOM_CAPTURE": 5,
        "CHATROOM_MINIMIZEBROWSER": 6,
        "CHATROOM_MOBILESAFARI": 7,
        "VIDEO_HIGHTLIGHT_WIZARD": 8,
        "CHAT_FOLDER": 9,
    }


class ReportStatus(object):
    LOCATION_OS = 1
    LOCATION_APP = 2
    VIDEO_AUTO_PLAY = 3
    HNI = 4
    AUTO_SUGGEST_LANG = 5
    CHAT_EFFECT_CACHED_CONTENT_LIST = 6

    _VALUES_TO_NAMES = {
        1: "LOCATION_OS",
        2: "LOCATION_APP",
        3: "VIDEO_AUTO_PLAY",
        4: "HNI",
        5: "AUTO_SUGGEST_LANG",
        6: "CHAT_EFFECT_CACHED_CONTENT_LIST",
    }

    _NAMES_TO_VALUES = {
        "LOCATION_OS": 1,
        "LOCATION_APP": 2,
        "VIDEO_AUTO_PLAY": 3,
        "HNI": 4,
        "AUTO_SUGGEST_LANG": 5,
        "CHAT_EFFECT_CACHED_CONTENT_LIST": 6,
    }


class SettingsAttributes(object):
    NOTIFICATION_ENABLE = 0
    NOTIFICATION_MUTE_EXPIRATION = 1
    NOTIFICATION_NEW_MESSAGE = 2
    NOTIFICATION_GROUP_INVITATION = 3
    NOTIFICATION_SHOW_MESSAGE = 4
    NOTIFICATION_INCOMING_CALL = 5
    PRIVACY_SYNC_CONTACTS = 6
    PRIVACY_SEARCH_BY_PHONE_NUMBER = 7
    NOTIFICATION_SOUND_MESSAGE = 8
    NOTIFICATION_SOUND_GROUP = 9
    CONTACT_MY_TICKET = 10
    IDENTITY_PROVIDER = 11
    IDENTITY_IDENTIFIER = 12
    PRIVACY_SEARCH_BY_USERID = 13
    PRIVACY_SEARCH_BY_EMAIL = 14
    PREFERENCE_LOCALE = 15
    NOTIFICATION_DISABLED_WITH_SUB = 16
    NOTIFICATION_PAYMENT = 17
    SECURITY_CENTER_SETTINGS = 18
    SNS_ACCOUNT = 19
    PHONE_REGISTRATION = 20
    PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 21
    CUSTOM_MODE = 22
    PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 23
    EMAIL_CONFIRMATION_STATUS = 24
    PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 25
    PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 26
    PRIVACY_AGREE_USE_PAIDCALL = 27
    ACCOUNT_MIGRATION_PINCODE = 28
    ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 29
    PRIVACY_ALLOW_FRIEND_REQUEST = 30
    E2EE_ENABLE = 33
    HITOKOTO_BACKUP_REQUESTED = 34
    PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME = 35
    CONTACT_ALLOW_FOLLOWING = 36
    PRIVACY_ALLOW_NEARBY = 37
    AGREEMENT_NEARBY = 38
    AGREEMENT_SQUARE = 39
    NOTIFICATION_MENTION = 40
    ALLOW_UNREGISTRATION_SECONDARY_DEVICE = 41
    AGREEMENT_BOT_USE = 42
    AGREEMENT_SHAKE_FUNCTION = 43
    AGREEMENT_MOBILE_CONTACT_NAME = 44
    NOTIFICATION_THUMBNAIL = 45
    AGREEMENT_SOUND_TO_TEXT = 46
    AGREEMENT_PRIVACY_POLICY_VERSION = 47
    AGREEMENT_AD_BY_WEB_ACCESS = 48
    AGREEMENT_PHONE_NUMBER_MATCHING = 49
    AGREEMENT_COMMUNICATION_INFO = 50
    PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS = 51
    AGREEMENT_THINGS_WIRELESS_COMMUNICATION = 52
    AGREEMENT_GDPR = 53
    PRIVACY_STATUS_MESSAGE_HISTORY = 54
    AGREEMENT_PROVIDE_LOCATION = 55
    AGREEMENT_BEACON = 56
    PRIVACY_PROFILE_HISTORY = 57
    AGREEMENT_CONTENTS_SUGGEST = 58
    AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION = 59
    PRIVACY_AGE_RESULT = 60
    PRIVACY_AGE_RESULT_RECEIVED = 61
    AGREEMENT_OCR_IMAGE_COLLECTION = 62
    PRIVACY_ALLOW_FOLLOW = 63
    PRIVACY_SHOW_FOLLOW_LIST = 64
    NOTIFICATION_BADGE_TALK_ONLY = 65

    _VALUES_TO_NAMES = {
        0: "NOTIFICATION_ENABLE",
        1: "NOTIFICATION_MUTE_EXPIRATION",
        2: "NOTIFICATION_NEW_MESSAGE",
        3: "NOTIFICATION_GROUP_INVITATION",
        4: "NOTIFICATION_SHOW_MESSAGE",
        5: "NOTIFICATION_INCOMING_CALL",
        6: "PRIVACY_SYNC_CONTACTS",
        7: "PRIVACY_SEARCH_BY_PHONE_NUMBER",
        8: "NOTIFICATION_SOUND_MESSAGE",
        9: "NOTIFICATION_SOUND_GROUP",
        10: "CONTACT_MY_TICKET",
        11: "IDENTITY_PROVIDER",
        12: "IDENTITY_IDENTIFIER",
        13: "PRIVACY_SEARCH_BY_USERID",
        14: "PRIVACY_SEARCH_BY_EMAIL",
        15: "PREFERENCE_LOCALE",
        16: "NOTIFICATION_DISABLED_WITH_SUB",
        17: "NOTIFICATION_PAYMENT",
        18: "SECURITY_CENTER_SETTINGS",
        19: "SNS_ACCOUNT",
        20: "PHONE_REGISTRATION",
        21: "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN",
        22: "CUSTOM_MODE",
        23: "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME",
        24: "EMAIL_CONFIRMATION_STATUS",
        25: "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND",
        26: "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL",
        27: "PRIVACY_AGREE_USE_PAIDCALL",
        28: "ACCOUNT_MIGRATION_PINCODE",
        29: "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE",
        30: "PRIVACY_ALLOW_FRIEND_REQUEST",
        33: "E2EE_ENABLE",
        34: "HITOKOTO_BACKUP_REQUESTED",
        35: "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME",
        36: "CONTACT_ALLOW_FOLLOWING",
        37: "PRIVACY_ALLOW_NEARBY",
        38: "AGREEMENT_NEARBY",
        39: "AGREEMENT_SQUARE",
        40: "NOTIFICATION_MENTION",
        41: "ALLOW_UNREGISTRATION_SECONDARY_DEVICE",
        42: "AGREEMENT_BOT_USE",
        43: "AGREEMENT_SHAKE_FUNCTION",
        44: "AGREEMENT_MOBILE_CONTACT_NAME",
        45: "NOTIFICATION_THUMBNAIL",
        46: "AGREEMENT_SOUND_TO_TEXT",
        47: "AGREEMENT_PRIVACY_POLICY_VERSION",
        48: "AGREEMENT_AD_BY_WEB_ACCESS",
        49: "AGREEMENT_PHONE_NUMBER_MATCHING",
        50: "AGREEMENT_COMMUNICATION_INFO",
        51: "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS",
        52: "AGREEMENT_THINGS_WIRELESS_COMMUNICATION",
        53: "AGREEMENT_GDPR",
        54: "PRIVACY_STATUS_MESSAGE_HISTORY",
        55: "AGREEMENT_PROVIDE_LOCATION",
        56: "AGREEMENT_BEACON",
        57: "PRIVACY_PROFILE_HISTORY",
        58: "AGREEMENT_CONTENTS_SUGGEST",
        59: "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION",
        60: "PRIVACY_AGE_RESULT",
        61: "PRIVACY_AGE_RESULT_RECEIVED",
        62: "AGREEMENT_OCR_IMAGE_COLLECTION",
        63: "PRIVACY_ALLOW_FOLLOW",
        64: "PRIVACY_SHOW_FOLLOW_LIST",
        65: "NOTIFICATION_BADGE_TALK_ONLY",
    }

    _NAMES_TO_VALUES = {
        "NOTIFICATION_ENABLE": 0,
        "NOTIFICATION_MUTE_EXPIRATION": 1,
        "NOTIFICATION_NEW_MESSAGE": 2,
        "NOTIFICATION_GROUP_INVITATION": 3,
        "NOTIFICATION_SHOW_MESSAGE": 4,
        "NOTIFICATION_INCOMING_CALL": 5,
        "PRIVACY_SYNC_CONTACTS": 6,
        "PRIVACY_SEARCH_BY_PHONE_NUMBER": 7,
        "NOTIFICATION_SOUND_MESSAGE": 8,
        "NOTIFICATION_SOUND_GROUP": 9,
        "CONTACT_MY_TICKET": 10,
        "IDENTITY_PROVIDER": 11,
        "IDENTITY_IDENTIFIER": 12,
        "PRIVACY_SEARCH_BY_USERID": 13,
        "PRIVACY_SEARCH_BY_EMAIL": 14,
        "PREFERENCE_LOCALE": 15,
        "NOTIFICATION_DISABLED_WITH_SUB": 16,
        "NOTIFICATION_PAYMENT": 17,
        "SECURITY_CENTER_SETTINGS": 18,
        "SNS_ACCOUNT": 19,
        "PHONE_REGISTRATION": 20,
        "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN": 21,
        "CUSTOM_MODE": 22,
        "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME": 23,
        "EMAIL_CONFIRMATION_STATUS": 24,
        "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND": 25,
        "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL": 26,
        "PRIVACY_AGREE_USE_PAIDCALL": 27,
        "ACCOUNT_MIGRATION_PINCODE": 28,
        "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE": 29,
        "PRIVACY_ALLOW_FRIEND_REQUEST": 30,
        "E2EE_ENABLE": 33,
        "HITOKOTO_BACKUP_REQUESTED": 34,
        "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME": 35,
        "CONTACT_ALLOW_FOLLOWING": 36,
        "PRIVACY_ALLOW_NEARBY": 37,
        "AGREEMENT_NEARBY": 38,
        "AGREEMENT_SQUARE": 39,
        "NOTIFICATION_MENTION": 40,
        "ALLOW_UNREGISTRATION_SECONDARY_DEVICE": 41,
        "AGREEMENT_BOT_USE": 42,
        "AGREEMENT_SHAKE_FUNCTION": 43,
        "AGREEMENT_MOBILE_CONTACT_NAME": 44,
        "NOTIFICATION_THUMBNAIL": 45,
        "AGREEMENT_SOUND_TO_TEXT": 46,
        "AGREEMENT_PRIVACY_POLICY_VERSION": 47,
        "AGREEMENT_AD_BY_WEB_ACCESS": 48,
        "AGREEMENT_PHONE_NUMBER_MATCHING": 49,
        "AGREEMENT_COMMUNICATION_INFO": 50,
        "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS": 51,
        "AGREEMENT_THINGS_WIRELESS_COMMUNICATION": 52,
        "AGREEMENT_GDPR": 53,
        "PRIVACY_STATUS_MESSAGE_HISTORY": 54,
        "AGREEMENT_PROVIDE_LOCATION": 55,
        "AGREEMENT_BEACON": 56,
        "PRIVACY_PROFILE_HISTORY": 57,
        "AGREEMENT_CONTENTS_SUGGEST": 58,
        "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION": 59,
        "PRIVACY_AGE_RESULT": 60,
        "PRIVACY_AGE_RESULT_RECEIVED": 61,
        "AGREEMENT_OCR_IMAGE_COLLECTION": 62,
        "PRIVACY_ALLOW_FOLLOW": 63,
        "PRIVACY_SHOW_FOLLOW_LIST": 64,
        "NOTIFICATION_BADGE_TALK_ONLY": 65,
    }


class ApplicationType(object):
    IOS = 16
    IOS_RC = 17
    IOS_BETA = 18
    IOS_ALPHA = 19
    ANDROID = 32
    ANDROID_RC = 33
    ANDROID_BETA = 34
    ANDROID_ALPHA = 35
    WAP = 48
    WAP_RC = 49
    WAP_BETA = 50
    WAP_ALPHA = 51
    BOT = 64
    BOT_RC = 65
    BOT_BETA = 66
    BOT_ALPHA = 67
    WEB = 80
    WEB_RC = 81
    WEB_BETA = 82
    WEB_ALPHA = 83
    DESKTOPWIN = 96
    DESKTOPWIN_RC = 97
    DESKTOPWIN_BETA = 98
    DESKTOPWIN_ALPHA = 99
    DESKTOPMAC = 112
    DESKTOPMAC_RC = 113
    DESKTOPMAC_BETA = 114
    DESKTOPMAC_ALPHA = 115
    CHANNELGW = 128
    CHANNELGW_BETA = 130
    CHANNELCP = 144
    CHANNELCP_RC = 145
    CHANNELCP_BETA = 146
    CHANNELCP_ALPHA = 147
    WINPHONE = 160
    WINPHONE_BETA = 162
    BLACKBERRY_RC = 177
    BLACKBERRY_BETA = 178
    WINMETRO = 192
    WINMETRO_RC = 193
    WINMETRO_BETA = 194
    WINMETRO_ALPHA = 195
    S40 = 208
    S40_RC = 209
    S40_BETA = 210
    S40_ALPHA = 211
    CHRONO_BETA = 226
    CHRONO_ALPHA = 227
    TIZEN = 256
    TIZEN_RC = 257
    TIZEN_BETA = 258
    TIZEN_ALPHA = 259
    VIRTUAL = 272
    FIREFOXOS = 288
    FIREFOXOS_RC = 289
    FIREFOXOS_BETA = 290
    FIREFOXOS_ALPHA = 291
    IOSIPAD = 304
    IOSIPAD_RC = 305
    IOSIPAD_BETA = 306
    BIZIOS = 320
    BIZIOS_RC = 321
    BIZIOS_BETA = 322
    BIZIOS_ALPHA = 323
    BIZANDROID = 336
    BIZANDROID_RC = 337
    BIZANDROID_BETA = 338
    BIZANDROID_ALPHA = 339
    BIZBOT = 352
    BIZBOT_RC = 353
    BIZBOT_BETA = 354
    BIZBOT_ALPHA = 355
    CHROMEOS = 368
    CHROMEOS_RC = 369
    CHROMEOS_BETA = 370
    CHROMEOS_ALPHA = 371
    ANDROIDLITE = 384
    ANDROIDLITE_RC = 385
    ANDROIDLITE_BETA = 386
    ANDROIDLITE_ALPHA = 387
    WIN10_RC = 401
    BIZWEB = 416
    BIZWEB_RC = 417
    BIZWEB_BETA = 418
    BIZWEB_ALPHA = 419
    DUMMYPRIMARY = 432
    DUMMYPRIMARY_RC = 433
    DUMMYPRIMARY_BETA = 434
    DUMMYPRIMARY_ALPHA = 435
    SQUARE = 448
    SQUARE_RC = 449
    SQUARE_BETA = 450
    INTERNAL = 464
    INTERNAL_RC = 465
    INTERNAL_BETA = 466
    INTERNAL_ALPHA = 467
    CLOVAFRIENDS_RC = 481
    CLOVAFRIENDS_BETA = 482
    CLOVAFRIENDS_ALPHA = 483
    WATCHOS = 496
    WATCHOS_RC = 497
    WATCHOS_BETA = 498
    WATCHOS_ALPHA = 499

    _VALUES_TO_NAMES = {
        16: "IOS",
        17: "IOS_RC",
        18: "IOS_BETA",
        19: "IOS_ALPHA",
        32: "ANDROID",
        33: "ANDROID_RC",
        34: "ANDROID_BETA",
        35: "ANDROID_ALPHA",
        48: "WAP",
        49: "WAP_RC",
        50: "WAP_BETA",
        51: "WAP_ALPHA",
        64: "BOT",
        65: "BOT_RC",
        66: "BOT_BETA",
        67: "BOT_ALPHA",
        80: "WEB",
        81: "WEB_RC",
        82: "WEB_BETA",
        83: "WEB_ALPHA",
        96: "DESKTOPWIN",
        97: "DESKTOPWIN_RC",
        98: "DESKTOPWIN_BETA",
        99: "DESKTOPWIN_ALPHA",
        112: "DESKTOPMAC",
        113: "DESKTOPMAC_RC",
        114: "DESKTOPMAC_BETA",
        115: "DESKTOPMAC_ALPHA",
        128: "CHANNELGW",
        130: "CHANNELGW_BETA",
        144: "CHANNELCP",
        145: "CHANNELCP_RC",
        146: "CHANNELCP_BETA",
        147: "CHANNELCP_ALPHA",
        160: "WINPHONE",
        162: "WINPHONE_BETA",
        177: "BLACKBERRY_RC",
        178: "BLACKBERRY_BETA",
        192: "WINMETRO",
        193: "WINMETRO_RC",
        194: "WINMETRO_BETA",
        195: "WINMETRO_ALPHA",
        208: "S40",
        209: "S40_RC",
        210: "S40_BETA",
        211: "S40_ALPHA",
        226: "CHRONO_BETA",
        227: "CHRONO_ALPHA",
        256: "TIZEN",
        257: "TIZEN_RC",
        258: "TIZEN_BETA",
        259: "TIZEN_ALPHA",
        272: "VIRTUAL",
        288: "FIREFOXOS",
        289: "FIREFOXOS_RC",
        290: "FIREFOXOS_BETA",
        291: "FIREFOXOS_ALPHA",
        304: "IOSIPAD",
        305: "IOSIPAD_RC",
        306: "IOSIPAD_BETA",
        320: "BIZIOS",
        321: "BIZIOS_RC",
        322: "BIZIOS_BETA",
        323: "BIZIOS_ALPHA",
        336: "BIZANDROID",
        337: "BIZANDROID_RC",
        338: "BIZANDROID_BETA",
        339: "BIZANDROID_ALPHA",
        352: "BIZBOT",
        353: "BIZBOT_RC",
        354: "BIZBOT_BETA",
        355: "BIZBOT_ALPHA",
        368: "CHROMEOS",
        369: "CHROMEOS_RC",
        370: "CHROMEOS_BETA",
        371: "CHROMEOS_ALPHA",
        384: "ANDROIDLITE",
        385: "ANDROIDLITE_RC",
        386: "ANDROIDLITE_BETA",
        387: "ANDROIDLITE_ALPHA",
        401: "WIN10_RC",
        416: "BIZWEB",
        417: "BIZWEB_RC",
        418: "BIZWEB_BETA",
        419: "BIZWEB_ALPHA",
        432: "DUMMYPRIMARY",
        433: "DUMMYPRIMARY_RC",
        434: "DUMMYPRIMARY_BETA",
        435: "DUMMYPRIMARY_ALPHA",
        448: "SQUARE",
        449: "SQUARE_RC",
        450: "SQUARE_BETA",
        464: "INTERNAL",
        465: "INTERNAL_RC",
        466: "INTERNAL_BETA",
        467: "INTERNAL_ALPHA",
        481: "CLOVAFRIENDS_RC",
        482: "CLOVAFRIENDS_BETA",
        483: "CLOVAFRIENDS_ALPHA",
        496: "WATCHOS",
        497: "WATCHOS_RC",
        498: "WATCHOS_BETA",
        499: "WATCHOS_ALPHA",
    }

    _NAMES_TO_VALUES = {
        "IOS": 16,
        "IOS_RC": 17,
        "IOS_BETA": 18,
        "IOS_ALPHA": 19,
        "ANDROID": 32,
        "ANDROID_RC": 33,
        "ANDROID_BETA": 34,
        "ANDROID_ALPHA": 35,
        "WAP": 48,
        "WAP_RC": 49,
        "WAP_BETA": 50,
        "WAP_ALPHA": 51,
        "BOT": 64,
        "BOT_RC": 65,
        "BOT_BETA": 66,
        "BOT_ALPHA": 67,
        "WEB": 80,
        "WEB_RC": 81,
        "WEB_BETA": 82,
        "WEB_ALPHA": 83,
        "DESKTOPWIN": 96,
        "DESKTOPWIN_RC": 97,
        "DESKTOPWIN_BETA": 98,
        "DESKTOPWIN_ALPHA": 99,
        "DESKTOPMAC": 112,
        "DESKTOPMAC_RC": 113,
        "DESKTOPMAC_BETA": 114,
        "DESKTOPMAC_ALPHA": 115,
        "CHANNELGW": 128,
        "CHANNELGW_BETA": 130,
        "CHANNELCP": 144,
        "CHANNELCP_RC": 145,
        "CHANNELCP_BETA": 146,
        "CHANNELCP_ALPHA": 147,
        "WINPHONE": 160,
        "WINPHONE_BETA": 162,
        "BLACKBERRY_RC": 177,
        "BLACKBERRY_BETA": 178,
        "WINMETRO": 192,
        "WINMETRO_RC": 193,
        "WINMETRO_BETA": 194,
        "WINMETRO_ALPHA": 195,
        "S40": 208,
        "S40_RC": 209,
        "S40_BETA": 210,
        "S40_ALPHA": 211,
        "CHRONO_BETA": 226,
        "CHRONO_ALPHA": 227,
        "TIZEN": 256,
        "TIZEN_RC": 257,
        "TIZEN_BETA": 258,
        "TIZEN_ALPHA": 259,
        "VIRTUAL": 272,
        "FIREFOXOS": 288,
        "FIREFOXOS_RC": 289,
        "FIREFOXOS_BETA": 290,
        "FIREFOXOS_ALPHA": 291,
        "IOSIPAD": 304,
        "IOSIPAD_RC": 305,
        "IOSIPAD_BETA": 306,
        "BIZIOS": 320,
        "BIZIOS_RC": 321,
        "BIZIOS_BETA": 322,
        "BIZIOS_ALPHA": 323,
        "BIZANDROID": 336,
        "BIZANDROID_RC": 337,
        "BIZANDROID_BETA": 338,
        "BIZANDROID_ALPHA": 339,
        "BIZBOT": 352,
        "BIZBOT_RC": 353,
        "BIZBOT_BETA": 354,
        "BIZBOT_ALPHA": 355,
        "CHROMEOS": 368,
        "CHROMEOS_RC": 369,
        "CHROMEOS_BETA": 370,
        "CHROMEOS_ALPHA": 371,
        "ANDROIDLITE": 384,
        "ANDROIDLITE_RC": 385,
        "ANDROIDLITE_BETA": 386,
        "ANDROIDLITE_ALPHA": 387,
        "WIN10_RC": 401,
        "BIZWEB": 416,
        "BIZWEB_RC": 417,
        "BIZWEB_BETA": 418,
        "BIZWEB_ALPHA": 419,
        "DUMMYPRIMARY": 432,
        "DUMMYPRIMARY_RC": 433,
        "DUMMYPRIMARY_BETA": 434,
        "DUMMYPRIMARY_ALPHA": 435,
        "SQUARE": 448,
        "SQUARE_RC": 449,
        "SQUARE_BETA": 450,
        "INTERNAL": 464,
        "INTERNAL_RC": 465,
        "INTERNAL_BETA": 466,
        "INTERNAL_ALPHA": 467,
        "CLOVAFRIENDS_RC": 481,
        "CLOVAFRIENDS_BETA": 482,
        "CLOVAFRIENDS_ALPHA": 483,
        "WATCHOS": 496,
        "WATCHOS_RC": 497,
        "WATCHOS_BETA": 498,
        "WATCHOS_ALPHA": 499,
    }


class OpType(object):
    END_OF_OPERATION = 0
    UPDATE_PROFILE = 1
    NOTIFIED_UPDATE_PROFILE = 2
    REGISTER_USERID = 3
    ADD_CONTACT = 4
    NOTIFIED_ADD_CONTACT = 5
    BLOCK_CONTACT = 6
    UNBLOCK_CONTACT = 7
    NOTIFIED_RECOMMEND_CONTACT = 8
    CREATE_GROUP = 9
    UPDATE_GROUP = 10
    NOTIFIED_UPDATE_GROUP = 11
    INVITE_INTO_GROUP = 12
    NOTIFIED_INVITE_INTO_GROUP = 13
    LEAVE_GROUP = 14
    NOTIFIED_LEAVE_GROUP = 15
    ACCEPT_GROUP_INVITATION = 16
    NOTIFIED_ACCEPT_GROUP_INVITATION = 17
    KICKOUT_FROM_GROUP = 18
    NOTIFIED_KICKOUT_FROM_GROUP = 19
    CREATE_ROOM = 20
    INVITE_INTO_ROOM = 21
    NOTIFIED_INVITE_INTO_ROOM = 22
    LEAVE_ROOM = 23
    NOTIFIED_LEAVE_ROOM = 24
    SEND_MESSAGE = 25
    RECEIVE_MESSAGE = 26
    SEND_MESSAGE_RECEIPT = 27
    RECEIVE_MESSAGE_RECEIPT = 28
    SEND_CONTENT_RECEIPT = 29
    RECEIVE_ANNOUNCEMENT = 30
    CANCEL_INVITATION_GROUP = 31
    NOTIFIED_CANCEL_INVITATION_GROUP = 32
    NOTIFIED_UNREGISTER_USER = 33
    REJECT_GROUP_INVITATION = 34
    NOTIFIED_REJECT_GROUP_INVITATION = 35
    UPDATE_SETTINGS = 36
    NOTIFIED_REGISTER_USER = 37
    INVITE_VIA_EMAIL = 38
    NOTIFIED_REQUEST_RECOVERY = 39
    SEND_CHAT_CHECKED = 40
    SEND_CHAT_REMOVED = 41
    NOTIFIED_FORCE_SYNC = 42
    SEND_CONTENT = 43
    SEND_MESSAGE_MYHOME = 44
    NOTIFIED_UPDATE_CONTENT_PREVIEW = 45
    REMOVE_ALL_MESSAGES = 46
    NOTIFIED_UPDATE_PURCHASES = 47
    DUMMY = 48
    UPDATE_CONTACT = 49
    NOTIFIED_RECEIVED_CALL = 50
    CANCEL_CALL = 51
    NOTIFIED_REDIRECT = 52
    NOTIFIED_CHANNEL_SYNC = 53
    FAILED_SEND_MESSAGE = 54
    NOTIFIED_READ_MESSAGE = 55
    FAILED_EMAIL_CONFIRMATION = 56
    NOTIFIED_CHAT_CONTENT = 58
    NOTIFIED_PUSH_NOTICENTER_ITEM = 59
    NOTIFIED_JOIN_CHAT = 60
    NOTIFIED_LEAVE_CHAT = 61
    NOTIFIED_TYPING = 62
    FRIEND_REQUEST_ACCEPTED = 63
    DESTROY_MESSAGE = 64
    NOTIFIED_DESTROY_MESSAGE = 65
    UPDATE_PUBLICKEYCHAIN = 66
    NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67
    NOTIFIED_BLOCK_CONTACT = 68
    NOTIFIED_UNBLOCK_CONTACT = 69
    UPDATE_GROUPPREFERENCE = 70
    NOTIFIED_PAYMENT_EVENT = 71
    REGISTER_E2EE_PUBLICKEY = 72
    NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 73
    NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 74
    NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 75
    NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 76
    NOTIFIED_E2EE_KEY_UPDATE = 77
    NOTIFIED_BUDDY_UPDATE_PROFILE = 78
    NOTIFIED_UPDATE_LINEAT_TABS = 79
    UPDATE_ROOM = 80
    NOTIFIED_BEACON_DETECTED = 81
    UPDATE_EXTENDED_PROFILE = 82
    ADD_FOLLOW = 83
    NOTIFIED_ADD_FOLLOW = 84
    DELETE_FOLLOW = 85
    NOTIFIED_DELETE_FOLLOW = 86
    UPDATE_TIMELINE_SETTINGS = 87
    NOTIFIED_FRIEND_REQUEST = 88
    UPDATE_RINGBACK_TONE = 89
    NOTIFIED_POSTBACK = 90
    RECEIVE_READ_WATERMARK = 91
    NOTIFIED_MESSAGE_DELIVERED = 92
    NOTIFIED_UPDATE_CHAT_BAR = 93
    NOTIFIED_CHATAPP_INSTALLED = 94
    NOTIFIED_CHATAPP_UPDATED = 95
    NOTIFIED_CHATAPP_NEW_MARK = 96
    NOTIFIED_CHATAPP_DELETED = 97
    NOTIFIED_CHATAPP_SYNC = 98
    NOTIFIED_UPDATE_MESSAGE = 99
    UPDATE_CHATROOMBGM = 100
    NOTIFIED_UPDATE_CHATROOMBGM = 101
    UPDATE_RINGTONE = 102
    UPDATE_USER_SETTINGS = 118
    NOTIFIED_UPDATE_STATUS_BAR = 119
    CREATE_CHAT = 120
    UPDATE_CHAT = 121
    NOTIFIED_UPDATE_CHAT = 122
    INVITE_INTO_CHAT = 123
    NOTIFIED_INVITE_INTO_CHAT = 124
    CANCEL_CHAT_INVITATION = 125
    DELETE_SELF_FROM_CHAT = 127
    NOTIFIED_DELETE_SELF_FROM_CHAT = 128
    NOTIFIED_ACCEPT_CHAT_INVITATION = 130
    DELETE_OTHER_FROM_CHAT = 132
    NOTIFIED_DELETE_OTHER_FROM_CHAT = 133
    NOTIFIED_CONTACT_CALENDAR_EVENT = 134
    UPDATE_THINGS_OPERATIONS = 136

    _VALUES_TO_NAMES = {
        0: "END_OF_OPERATION",
        1: "UPDATE_PROFILE",
        2: "NOTIFIED_UPDATE_PROFILE",
        3: "REGISTER_USERID",
        4: "ADD_CONTACT",
        5: "NOTIFIED_ADD_CONTACT",
        6: "BLOCK_CONTACT",
        7: "UNBLOCK_CONTACT",
        8: "NOTIFIED_RECOMMEND_CONTACT",
        9: "CREATE_GROUP",
        10: "UPDATE_GROUP",
        11: "NOTIFIED_UPDATE_GROUP",
        12: "INVITE_INTO_GROUP",
        13: "NOTIFIED_INVITE_INTO_GROUP",
        14: "LEAVE_GROUP",
        15: "NOTIFIED_LEAVE_GROUP",
        16: "ACCEPT_GROUP_INVITATION",
        17: "NOTIFIED_ACCEPT_GROUP_INVITATION",
        18: "KICKOUT_FROM_GROUP",
        19: "NOTIFIED_KICKOUT_FROM_GROUP",
        20: "CREATE_ROOM",
        21: "INVITE_INTO_ROOM",
        22: "NOTIFIED_INVITE_INTO_ROOM",
        23: "LEAVE_ROOM",
        24: "NOTIFIED_LEAVE_ROOM",
        25: "SEND_MESSAGE",
        26: "RECEIVE_MESSAGE",
        27: "SEND_MESSAGE_RECEIPT",
        28: "RECEIVE_MESSAGE_RECEIPT",
        29: "SEND_CONTENT_RECEIPT",
        30: "RECEIVE_ANNOUNCEMENT",
        31: "CANCEL_INVITATION_GROUP",
        32: "NOTIFIED_CANCEL_INVITATION_GROUP",
        33: "NOTIFIED_UNREGISTER_USER",
        34: "REJECT_GROUP_INVITATION",
        35: "NOTIFIED_REJECT_GROUP_INVITATION",
        36: "UPDATE_SETTINGS",
        37: "NOTIFIED_REGISTER_USER",
        38: "INVITE_VIA_EMAIL",
        39: "NOTIFIED_REQUEST_RECOVERY",
        40: "SEND_CHAT_CHECKED",
        41: "SEND_CHAT_REMOVED",
        42: "NOTIFIED_FORCE_SYNC",
        43: "SEND_CONTENT",
        44: "SEND_MESSAGE_MYHOME",
        45: "NOTIFIED_UPDATE_CONTENT_PREVIEW",
        46: "REMOVE_ALL_MESSAGES",
        47: "NOTIFIED_UPDATE_PURCHASES",
        48: "DUMMY",
        49: "UPDATE_CONTACT",
        50: "NOTIFIED_RECEIVED_CALL",
        51: "CANCEL_CALL",
        52: "NOTIFIED_REDIRECT",
        53: "NOTIFIED_CHANNEL_SYNC",
        54: "FAILED_SEND_MESSAGE",
        55: "NOTIFIED_READ_MESSAGE",
        56: "FAILED_EMAIL_CONFIRMATION",
        58: "NOTIFIED_CHAT_CONTENT",
        59: "NOTIFIED_PUSH_NOTICENTER_ITEM",
        60: "NOTIFIED_JOIN_CHAT",
        61: "NOTIFIED_LEAVE_CHAT",
        62: "NOTIFIED_TYPING",
        63: "FRIEND_REQUEST_ACCEPTED",
        64: "DESTROY_MESSAGE",
        65: "NOTIFIED_DESTROY_MESSAGE",
        66: "UPDATE_PUBLICKEYCHAIN",
        67: "NOTIFIED_UPDATE_PUBLICKEYCHAIN",
        68: "NOTIFIED_BLOCK_CONTACT",
        69: "NOTIFIED_UNBLOCK_CONTACT",
        70: "UPDATE_GROUPPREFERENCE",
        71: "NOTIFIED_PAYMENT_EVENT",
        72: "REGISTER_E2EE_PUBLICKEY",
        73: "NOTIFIED_E2EE_KEY_EXCHANGE_REQ",
        74: "NOTIFIED_E2EE_KEY_EXCHANGE_RESP",
        75: "NOTIFIED_E2EE_MESSAGE_RESEND_REQ",
        76: "NOTIFIED_E2EE_MESSAGE_RESEND_RESP",
        77: "NOTIFIED_E2EE_KEY_UPDATE",
        78: "NOTIFIED_BUDDY_UPDATE_PROFILE",
        79: "NOTIFIED_UPDATE_LINEAT_TABS",
        80: "UPDATE_ROOM",
        81: "NOTIFIED_BEACON_DETECTED",
        82: "UPDATE_EXTENDED_PROFILE",
        83: "ADD_FOLLOW",
        84: "NOTIFIED_ADD_FOLLOW",
        85: "DELETE_FOLLOW",
        86: "NOTIFIED_DELETE_FOLLOW",
        87: "UPDATE_TIMELINE_SETTINGS",
        88: "NOTIFIED_FRIEND_REQUEST",
        89: "UPDATE_RINGBACK_TONE",
        90: "NOTIFIED_POSTBACK",
        91: "RECEIVE_READ_WATERMARK",
        92: "NOTIFIED_MESSAGE_DELIVERED",
        93: "NOTIFIED_UPDATE_CHAT_BAR",
        94: "NOTIFIED_CHATAPP_INSTALLED",
        95: "NOTIFIED_CHATAPP_UPDATED",
        96: "NOTIFIED_CHATAPP_NEW_MARK",
        97: "NOTIFIED_CHATAPP_DELETED",
        98: "NOTIFIED_CHATAPP_SYNC",
        99: "NOTIFIED_UPDATE_MESSAGE",
        100: "UPDATE_CHATROOMBGM",
        101: "NOTIFIED_UPDATE_CHATROOMBGM",
        102: "UPDATE_RINGTONE",
        118: "UPDATE_USER_SETTINGS",
        119: "NOTIFIED_UPDATE_STATUS_BAR",
        120: "CREATE_CHAT",
        121: "UPDATE_CHAT",
        122: "NOTIFIED_UPDATE_CHAT",
        123: "INVITE_INTO_CHAT",
        124: "NOTIFIED_INVITE_INTO_CHAT",
        125: "CANCEL_CHAT_INVITATION",
        127: "DELETE_SELF_FROM_CHAT",
        128: "NOTIFIED_DELETE_SELF_FROM_CHAT",
        130: "NOTIFIED_ACCEPT_CHAT_INVITATION",
        132: "DELETE_OTHER_FROM_CHAT",
        133: "NOTIFIED_DELETE_OTHER_FROM_CHAT",
        134: "NOTIFIED_CONTACT_CALENDAR_EVENT",
        136: "UPDATE_THINGS_OPERATIONS",
    }

    _NAMES_TO_VALUES = {
        "END_OF_OPERATION": 0,
        "UPDATE_PROFILE": 1,
        "NOTIFIED_UPDATE_PROFILE": 2,
        "REGISTER_USERID": 3,
        "ADD_CONTACT": 4,
        "NOTIFIED_ADD_CONTACT": 5,
        "BLOCK_CONTACT": 6,
        "UNBLOCK_CONTACT": 7,
        "NOTIFIED_RECOMMEND_CONTACT": 8,
        "CREATE_GROUP": 9,
        "UPDATE_GROUP": 10,
        "NOTIFIED_UPDATE_GROUP": 11,
        "INVITE_INTO_GROUP": 12,
        "NOTIFIED_INVITE_INTO_GROUP": 13,
        "LEAVE_GROUP": 14,
        "NOTIFIED_LEAVE_GROUP": 15,
        "ACCEPT_GROUP_INVITATION": 16,
        "NOTIFIED_ACCEPT_GROUP_INVITATION": 17,
        "KICKOUT_FROM_GROUP": 18,
        "NOTIFIED_KICKOUT_FROM_GROUP": 19,
        "CREATE_ROOM": 20,
        "INVITE_INTO_ROOM": 21,
        "NOTIFIED_INVITE_INTO_ROOM": 22,
        "LEAVE_ROOM": 23,
        "NOTIFIED_LEAVE_ROOM": 24,
        "SEND_MESSAGE": 25,
        "RECEIVE_MESSAGE": 26,
        "SEND_MESSAGE_RECEIPT": 27,
        "RECEIVE_MESSAGE_RECEIPT": 28,
        "SEND_CONTENT_RECEIPT": 29,
        "RECEIVE_ANNOUNCEMENT": 30,
        "CANCEL_INVITATION_GROUP": 31,
        "NOTIFIED_CANCEL_INVITATION_GROUP": 32,
        "NOTIFIED_UNREGISTER_USER": 33,
        "REJECT_GROUP_INVITATION": 34,
        "NOTIFIED_REJECT_GROUP_INVITATION": 35,
        "UPDATE_SETTINGS": 36,
        "NOTIFIED_REGISTER_USER": 37,
        "INVITE_VIA_EMAIL": 38,
        "NOTIFIED_REQUEST_RECOVERY": 39,
        "SEND_CHAT_CHECKED": 40,
        "SEND_CHAT_REMOVED": 41,
        "NOTIFIED_FORCE_SYNC": 42,
        "SEND_CONTENT": 43,
        "SEND_MESSAGE_MYHOME": 44,
        "NOTIFIED_UPDATE_CONTENT_PREVIEW": 45,
        "REMOVE_ALL_MESSAGES": 46,
        "NOTIFIED_UPDATE_PURCHASES": 47,
        "DUMMY": 48,
        "UPDATE_CONTACT": 49,
        "NOTIFIED_RECEIVED_CALL": 50,
        "CANCEL_CALL": 51,
        "NOTIFIED_REDIRECT": 52,
        "NOTIFIED_CHANNEL_SYNC": 53,
        "FAILED_SEND_MESSAGE": 54,
        "NOTIFIED_READ_MESSAGE": 55,
        "FAILED_EMAIL_CONFIRMATION": 56,
        "NOTIFIED_CHAT_CONTENT": 58,
        "NOTIFIED_PUSH_NOTICENTER_ITEM": 59,
        "NOTIFIED_JOIN_CHAT": 60,
        "NOTIFIED_LEAVE_CHAT": 61,
        "NOTIFIED_TYPING": 62,
        "FRIEND_REQUEST_ACCEPTED": 63,
        "DESTROY_MESSAGE": 64,
        "NOTIFIED_DESTROY_MESSAGE": 65,
        "UPDATE_PUBLICKEYCHAIN": 66,
        "NOTIFIED_UPDATE_PUBLICKEYCHAIN": 67,
        "NOTIFIED_BLOCK_CONTACT": 68,
        "NOTIFIED_UNBLOCK_CONTACT": 69,
        "UPDATE_GROUPPREFERENCE": 70,
        "NOTIFIED_PAYMENT_EVENT": 71,
        "REGISTER_E2EE_PUBLICKEY": 72,
        "NOTIFIED_E2EE_KEY_EXCHANGE_REQ": 73,
        "NOTIFIED_E2EE_KEY_EXCHANGE_RESP": 74,
        "NOTIFIED_E2EE_MESSAGE_RESEND_REQ": 75,
        "NOTIFIED_E2EE_MESSAGE_RESEND_RESP": 76,
        "NOTIFIED_E2EE_KEY_UPDATE": 77,
        "NOTIFIED_BUDDY_UPDATE_PROFILE": 78,
        "NOTIFIED_UPDATE_LINEAT_TABS": 79,
        "UPDATE_ROOM": 80,
        "NOTIFIED_BEACON_DETECTED": 81,
        "UPDATE_EXTENDED_PROFILE": 82,
        "ADD_FOLLOW": 83,
        "NOTIFIED_ADD_FOLLOW": 84,
        "DELETE_FOLLOW": 85,
        "NOTIFIED_DELETE_FOLLOW": 86,
        "UPDATE_TIMELINE_SETTINGS": 87,
        "NOTIFIED_FRIEND_REQUEST": 88,
        "UPDATE_RINGBACK_TONE": 89,
        "NOTIFIED_POSTBACK": 90,
        "RECEIVE_READ_WATERMARK": 91,
        "NOTIFIED_MESSAGE_DELIVERED": 92,
        "NOTIFIED_UPDATE_CHAT_BAR": 93,
        "NOTIFIED_CHATAPP_INSTALLED": 94,
        "NOTIFIED_CHATAPP_UPDATED": 95,
        "NOTIFIED_CHATAPP_NEW_MARK": 96,
        "NOTIFIED_CHATAPP_DELETED": 97,
        "NOTIFIED_CHATAPP_SYNC": 98,
        "NOTIFIED_UPDATE_MESSAGE": 99,
        "UPDATE_CHATROOMBGM": 100,
        "NOTIFIED_UPDATE_CHATROOMBGM": 101,
        "UPDATE_RINGTONE": 102,
        "UPDATE_USER_SETTINGS": 118,
        "NOTIFIED_UPDATE_STATUS_BAR": 119,
        "CREATE_CHAT": 120,
        "UPDATE_CHAT": 121,
        "NOTIFIED_UPDATE_CHAT": 122,
        "INVITE_INTO_CHAT": 123,
        "NOTIFIED_INVITE_INTO_CHAT": 124,
        "CANCEL_CHAT_INVITATION": 125,
        "DELETE_SELF_FROM_CHAT": 127,
        "NOTIFIED_DELETE_SELF_FROM_CHAT": 128,
        "NOTIFIED_ACCEPT_CHAT_INVITATION": 130,
        "DELETE_OTHER_FROM_CHAT": 132,
        "NOTIFIED_DELETE_OTHER_FROM_CHAT": 133,
        "NOTIFIED_CONTACT_CALENDAR_EVENT": 134,
        "UPDATE_THINGS_OPERATIONS": 136,
    }


class TalkErrorCode(object):
    ILLEGAL_ARGUMENT = 0
    AUTHENTICATION_FAILED = 1
    DB_FAILED = 2
    INVALID_STATE = 3
    EXCESSIVE_ACCESS = 4
    NOT_FOUND = 5
    INVALID_LENGTH = 6
    NOT_AVAILABLE_USER = 7
    NOT_AUTHORIZED_DEVICE = 8
    INVALID_MID = 9
    NOT_A_MEMBER = 10
    INCOMPATIBLE_APP_VERSION = 11
    NOT_READY = 12
    NOT_AVAILABLE_SESSION = 13
    NOT_AUTHORIZED_SESSION = 14
    SYSTEM_ERROR = 15
    NO_AVAILABLE_VERIFICATION_METHOD = 16
    NOT_AUTHENTICATED = 17
    INVALID_IDENTITY_CREDENTIAL = 18
    NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19
    INTERNAL_ERROR = 20
    NO_SUCH_IDENTITY_IDENFIER = 21
    DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22
    ILLEGAL_IDENTITY_CREDENTIAL = 23
    UNKNOWN_CHANNEL = 24
    NO_SUCH_MESSAGE_BOX = 25
    NOT_AVAILABLE_MESSAGE_BOX = 26
    CHANNEL_DOES_NOT_MATCH = 27
    NOT_YOUR_MESSAGE = 28
    MESSAGE_DEFINED_ERROR = 29
    USER_CANNOT_ACCEPT_PRESENTS = 30
    USER_NOT_STICKER_OWNER = 32
    MAINTENANCE_ERROR = 33
    ACCOUNT_NOT_MATCHED = 34
    ABUSE_BLOCK = 35
    NOT_FRIEND = 36
    NOT_ALLOWED_CALL = 37
    BLOCK_FRIEND = 38
    INCOMPATIBLE_VOIP_VERSION = 39
    INVALID_SNS_ACCESS_TOKEN = 40
    EXTERNAL_SERVICE_NOT_AVAILABLE = 41
    NOT_ALLOWED_ADD_CONTACT = 42
    NOT_CERTIFICATED = 43
    NOT_ALLOWED_SECONDARY_DEVICE = 44
    INVALID_PIN_CODE = 45
    NOT_FOUND_IDENTITY_CREDENTIAL = 46
    EXCEED_FILE_MAX_SIZE = 47
    EXCEED_DAILY_QUOTA = 48
    NOT_SUPPORT_SEND_FILE = 49
    MUST_UPGRADE = 50
    NOT_AVAILABLE_PIN_CODE_SESSION = 51
    EXPIRED_REVISION = 52
    NOT_YET_PHONE_NUMBER = 54
    BAD_CALL_NUMBER = 55
    UNAVAILABLE_CALL_NUMBER = 56
    NOT_SUPPORT_CALL_SERVICE = 57
    CONGESTION_CONTROL = 58
    NO_BALANCE = 59
    NOT_PERMITTED_CALLER_ID = 60
    NO_CALLER_ID_LIMIT_EXCEEDED = 61
    CALLER_ID_VERIFICATION_REQUIRED = 62
    NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63
    MESSAGE_NOT_FOUND = 64
    INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65
    ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66
    ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67
    INVALID_PASSWORD_FORMAT = 69
    FEATURE_RESTRICTED = 70
    MESSAGE_NOT_DESTRUCTIBLE = 71
    PAID_CALL_REDEEM_FAILED = 72
    PREVENTED_JOIN_BY_TICKET = 73
    SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75
    SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76
    SECURITY_CENTER_NOT_VERIFIED = 77
    SECURITY_CENTER_BLOCKED_BY_SETTING = 78
    SECURITY_CENTER_BLOCKED = 79
    TALK_PROXY_EXCEPTION = 80
    E2EE_INVALID_PROTOCOL = 81
    E2EE_RETRY_ENCRYPT = 82
    E2EE_UPDATE_SENDER_KEY = 83
    E2EE_UPDATE_RECEIVER_KEY = 84
    E2EE_INVALID_ARGUMENT = 85
    E2EE_INVALID_VERSION = 86
    E2EE_SENDER_DISABLED = 87
    E2EE_RECEIVER_DISABLED = 88
    E2EE_SENDER_NOT_ALLOWED = 89
    E2EE_RECEIVER_NOT_ALLOWED = 90
    E2EE_RESEND_FAIL = 91
    E2EE_RESEND_OK = 92
    HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93
    E2EE_UPDATE_PRIMARY_DEVICE = 94
    SUCCESS = 95
    CANCEL = 96
    E2EE_PRIMARY_NOT_SUPPORT = 97
    E2EE_RETRY_PLAIN = 98
    E2EE_RECREATE_GROUP_KEY = 99
    E2EE_GROUP_TOO_MANY_MEMBERS = 100
    SERVER_BUSY = 101
    NOT_ALLOWED_ADD_FOLLOW = 102
    INCOMING_FRIEND_REQUEST_LIMIT = 103
    OUTGOING_FRIEND_REQUEST_LIMIT = 104
    OUTGOING_FRIEND_REQUEST_QUOTA = 105
    DUPLICATED = 106
    BANNED = 107
    NOT_AN_INVITEE = 108
    NOT_AN_OUTSIDER = 109
    EMPTY_GROUP = 111
    EXCEED_FOLLOW_LIMIT = 112
    UNSUPPORTED_ACCOUNT_TYPE = 113
    AGREEMENT_REQUIRED = 114

    _VALUES_TO_NAMES = {
        0: "ILLEGAL_ARGUMENT",
        1: "AUTHENTICATION_FAILED",
        2: "DB_FAILED",
        3: "INVALID_STATE",
        4: "EXCESSIVE_ACCESS",
        5: "NOT_FOUND",
        6: "INVALID_LENGTH",
        7: "NOT_AVAILABLE_USER",
        8: "NOT_AUTHORIZED_DEVICE",
        9: "INVALID_MID",
        10: "NOT_A_MEMBER",
        11: "INCOMPATIBLE_APP_VERSION",
        12: "NOT_READY",
        13: "NOT_AVAILABLE_SESSION",
        14: "NOT_AUTHORIZED_SESSION",
        15: "SYSTEM_ERROR",
        16: "NO_AVAILABLE_VERIFICATION_METHOD",
        17: "NOT_AUTHENTICATED",
        18: "INVALID_IDENTITY_CREDENTIAL",
        19: "NOT_AVAILABLE_IDENTITY_IDENTIFIER",
        20: "INTERNAL_ERROR",
        21: "NO_SUCH_IDENTITY_IDENFIER",
        22: "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY",
        23: "ILLEGAL_IDENTITY_CREDENTIAL",
        24: "UNKNOWN_CHANNEL",
        25: "NO_SUCH_MESSAGE_BOX",
        26: "NOT_AVAILABLE_MESSAGE_BOX",
        27: "CHANNEL_DOES_NOT_MATCH",
        28: "NOT_YOUR_MESSAGE",
        29: "MESSAGE_DEFINED_ERROR",
        30: "USER_CANNOT_ACCEPT_PRESENTS",
        32: "USER_NOT_STICKER_OWNER",
        33: "MAINTENANCE_ERROR",
        34: "ACCOUNT_NOT_MATCHED",
        35: "ABUSE_BLOCK",
        36: "NOT_FRIEND",
        37: "NOT_ALLOWED_CALL",
        38: "BLOCK_FRIEND",
        39: "INCOMPATIBLE_VOIP_VERSION",
        40: "INVALID_SNS_ACCESS_TOKEN",
        41: "EXTERNAL_SERVICE_NOT_AVAILABLE",
        42: "NOT_ALLOWED_ADD_CONTACT",
        43: "NOT_CERTIFICATED",
        44: "NOT_ALLOWED_SECONDARY_DEVICE",
        45: "INVALID_PIN_CODE",
        46: "NOT_FOUND_IDENTITY_CREDENTIAL",
        47: "EXCEED_FILE_MAX_SIZE",
        48: "EXCEED_DAILY_QUOTA",
        49: "NOT_SUPPORT_SEND_FILE",
        50: "MUST_UPGRADE",
        51: "NOT_AVAILABLE_PIN_CODE_SESSION",
        52: "EXPIRED_REVISION",
        54: "NOT_YET_PHONE_NUMBER",
        55: "BAD_CALL_NUMBER",
        56: "UNAVAILABLE_CALL_NUMBER",
        57: "NOT_SUPPORT_CALL_SERVICE",
        58: "CONGESTION_CONTROL",
        59: "NO_BALANCE",
        60: "NOT_PERMITTED_CALLER_ID",
        61: "NO_CALLER_ID_LIMIT_EXCEEDED",
        62: "CALLER_ID_VERIFICATION_REQUIRED",
        63: "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED",
        64: "MESSAGE_NOT_FOUND",
        65: "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT",
        66: "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED",
        67: "ACCOUNT_MIGRATION_PINCODE_BLOCKED",
        69: "INVALID_PASSWORD_FORMAT",
        70: "FEATURE_RESTRICTED",
        71: "MESSAGE_NOT_DESTRUCTIBLE",
        72: "PAID_CALL_REDEEM_FAILED",
        73: "PREVENTED_JOIN_BY_TICKET",
        75: "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT",
        76: "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY",
        77: "SECURITY_CENTER_NOT_VERIFIED",
        78: "SECURITY_CENTER_BLOCKED_BY_SETTING",
        79: "SECURITY_CENTER_BLOCKED",
        80: "TALK_PROXY_EXCEPTION",
        81: "E2EE_INVALID_PROTOCOL",
        82: "E2EE_RETRY_ENCRYPT",
        83: "E2EE_UPDATE_SENDER_KEY",
        84: "E2EE_UPDATE_RECEIVER_KEY",
        85: "E2EE_INVALID_ARGUMENT",
        86: "E2EE_INVALID_VERSION",
        87: "E2EE_SENDER_DISABLED",
        88: "E2EE_RECEIVER_DISABLED",
        89: "E2EE_SENDER_NOT_ALLOWED",
        90: "E2EE_RECEIVER_NOT_ALLOWED",
        91: "E2EE_RESEND_FAIL",
        92: "E2EE_RESEND_OK",
        93: "HITOKOTO_BACKUP_NO_AVAILABLE_DATA",
        94: "E2EE_UPDATE_PRIMARY_DEVICE",
        95: "SUCCESS",
        96: "CANCEL",
        97: "E2EE_PRIMARY_NOT_SUPPORT",
        98: "E2EE_RETRY_PLAIN",
        99: "E2EE_RECREATE_GROUP_KEY",
        100: "E2EE_GROUP_TOO_MANY_MEMBERS",
        101: "SERVER_BUSY",
        102: "NOT_ALLOWED_ADD_FOLLOW",
        103: "INCOMING_FRIEND_REQUEST_LIMIT",
        104: "OUTGOING_FRIEND_REQUEST_LIMIT",
        105: "OUTGOING_FRIEND_REQUEST_QUOTA",
        106: "DUPLICATED",
        107: "BANNED",
        108: "NOT_AN_INVITEE",
        109: "NOT_AN_OUTSIDER",
        111: "EMPTY_GROUP",
        112: "EXCEED_FOLLOW_LIMIT",
        113: "UNSUPPORTED_ACCOUNT_TYPE",
        114: "AGREEMENT_REQUIRED",
    }

    _NAMES_TO_VALUES = {
        "ILLEGAL_ARGUMENT": 0,
        "AUTHENTICATION_FAILED": 1,
        "DB_FAILED": 2,
        "INVALID_STATE": 3,
        "EXCESSIVE_ACCESS": 4,
        "NOT_FOUND": 5,
        "INVALID_LENGTH": 6,
        "NOT_AVAILABLE_USER": 7,
        "NOT_AUTHORIZED_DEVICE": 8,
        "INVALID_MID": 9,
        "NOT_A_MEMBER": 10,
        "INCOMPATIBLE_APP_VERSION": 11,
        "NOT_READY": 12,
        "NOT_AVAILABLE_SESSION": 13,
        "NOT_AUTHORIZED_SESSION": 14,
        "SYSTEM_ERROR": 15,
        "NO_AVAILABLE_VERIFICATION_METHOD": 16,
        "NOT_AUTHENTICATED": 17,
        "INVALID_IDENTITY_CREDENTIAL": 18,
        "NOT_AVAILABLE_IDENTITY_IDENTIFIER": 19,
        "INTERNAL_ERROR": 20,
        "NO_SUCH_IDENTITY_IDENFIER": 21,
        "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY": 22,
        "ILLEGAL_IDENTITY_CREDENTIAL": 23,
        "UNKNOWN_CHANNEL": 24,
        "NO_SUCH_MESSAGE_BOX": 25,
        "NOT_AVAILABLE_MESSAGE_BOX": 26,
        "CHANNEL_DOES_NOT_MATCH": 27,
        "NOT_YOUR_MESSAGE": 28,
        "MESSAGE_DEFINED_ERROR": 29,
        "USER_CANNOT_ACCEPT_PRESENTS": 30,
        "USER_NOT_STICKER_OWNER": 32,
        "MAINTENANCE_ERROR": 33,
        "ACCOUNT_NOT_MATCHED": 34,
        "ABUSE_BLOCK": 35,
        "NOT_FRIEND": 36,
        "NOT_ALLOWED_CALL": 37,
        "BLOCK_FRIEND": 38,
        "INCOMPATIBLE_VOIP_VERSION": 39,
        "INVALID_SNS_ACCESS_TOKEN": 40,
        "EXTERNAL_SERVICE_NOT_AVAILABLE": 41,
        "NOT_ALLOWED_ADD_CONTACT": 42,
        "NOT_CERTIFICATED": 43,
        "NOT_ALLOWED_SECONDARY_DEVICE": 44,
        "INVALID_PIN_CODE": 45,
        "NOT_FOUND_IDENTITY_CREDENTIAL": 46,
        "EXCEED_FILE_MAX_SIZE": 47,
        "EXCEED_DAILY_QUOTA": 48,
        "NOT_SUPPORT_SEND_FILE": 49,
        "MUST_UPGRADE": 50,
        "NOT_AVAILABLE_PIN_CODE_SESSION": 51,
        "EXPIRED_REVISION": 52,
        "NOT_YET_PHONE_NUMBER": 54,
        "BAD_CALL_NUMBER": 55,
        "UNAVAILABLE_CALL_NUMBER": 56,
        "NOT_SUPPORT_CALL_SERVICE": 57,
        "CONGESTION_CONTROL": 58,
        "NO_BALANCE": 59,
        "NOT_PERMITTED_CALLER_ID": 60,
        "NO_CALLER_ID_LIMIT_EXCEEDED": 61,
        "CALLER_ID_VERIFICATION_REQUIRED": 62,
        "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": 63,
        "MESSAGE_NOT_FOUND": 64,
        "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT": 65,
        "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED": 66,
        "ACCOUNT_MIGRATION_PINCODE_BLOCKED": 67,
        "INVALID_PASSWORD_FORMAT": 69,
        "FEATURE_RESTRICTED": 70,
        "MESSAGE_NOT_DESTRUCTIBLE": 71,
        "PAID_CALL_REDEEM_FAILED": 72,
        "PREVENTED_JOIN_BY_TICKET": 73,
        "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT": 75,
        "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY": 76,
        "SECURITY_CENTER_NOT_VERIFIED": 77,
        "SECURITY_CENTER_BLOCKED_BY_SETTING": 78,
        "SECURITY_CENTER_BLOCKED": 79,
        "TALK_PROXY_EXCEPTION": 80,
        "E2EE_INVALID_PROTOCOL": 81,
        "E2EE_RETRY_ENCRYPT": 82,
        "E2EE_UPDATE_SENDER_KEY": 83,
        "E2EE_UPDATE_RECEIVER_KEY": 84,
        "E2EE_INVALID_ARGUMENT": 85,
        "E2EE_INVALID_VERSION": 86,
        "E2EE_SENDER_DISABLED": 87,
        "E2EE_RECEIVER_DISABLED": 88,
        "E2EE_SENDER_NOT_ALLOWED": 89,
        "E2EE_RECEIVER_NOT_ALLOWED": 90,
        "E2EE_RESEND_FAIL": 91,
        "E2EE_RESEND_OK": 92,
        "HITOKOTO_BACKUP_NO_AVAILABLE_DATA": 93,
        "E2EE_UPDATE_PRIMARY_DEVICE": 94,
        "SUCCESS": 95,
        "CANCEL": 96,
        "E2EE_PRIMARY_NOT_SUPPORT": 97,
        "E2EE_RETRY_PLAIN": 98,
        "E2EE_RECREATE_GROUP_KEY": 99,
        "E2EE_GROUP_TOO_MANY_MEMBERS": 100,
        "SERVER_BUSY": 101,
        "NOT_ALLOWED_ADD_FOLLOW": 102,
        "INCOMING_FRIEND_REQUEST_LIMIT": 103,
        "OUTGOING_FRIEND_REQUEST_LIMIT": 104,
        "OUTGOING_FRIEND_REQUEST_QUOTA": 105,
        "DUPLICATED": 106,
        "BANNED": 107,
        "NOT_AN_INVITEE": 108,
        "NOT_AN_OUTSIDER": 109,
        "EMPTY_GROUP": 111,
        "EXCEED_FOLLOW_LIMIT": 112,
        "UNSUPPORTED_ACCOUNT_TYPE": 113,
        "AGREEMENT_REQUIRED": 114,
    }


class SecondaryQrCodeErrorCode(object):
    INTERNAL_ERROR = 0
    ILLEGAL_ARGUMENT = 1
    VERIFICATION_FAILED = 2
    NOT_ALLOWED_QR_CODE_LOGIN = 3
    VERIFICATION_NOTICE_FAILED = 4
    RETRY_LATER = 5
    INVALID_CONTEXT = 100
    APP_UPGRADE_REQUIRED = 101

    _VALUES_TO_NAMES = {
        0: "INTERNAL_ERROR",
        1: "ILLEGAL_ARGUMENT",
        2: "VERIFICATION_FAILED",
        3: "NOT_ALLOWED_QR_CODE_LOGIN",
        4: "VERIFICATION_NOTICE_FAILED",
        5: "RETRY_LATER",
        100: "INVALID_CONTEXT",
        101: "APP_UPGRADE_REQUIRED",
    }

    _NAMES_TO_VALUES = {
        "INTERNAL_ERROR": 0,
        "ILLEGAL_ARGUMENT": 1,
        "VERIFICATION_FAILED": 2,
        "NOT_ALLOWED_QR_CODE_LOGIN": 3,
        "VERIFICATION_NOTICE_FAILED": 4,
        "RETRY_LATER": 5,
        "INVALID_CONTEXT": 100,
        "APP_UPGRADE_REQUIRED": 101,
    }


class AuthErrorCode(object):
    INTERNAL_ERROR = 0
    ILLEGAL_ARGUMENT = 1
    VERIFICATION_FAILED = 2
    NOT_FOUND = 3
    RETRY_LATER = 4
    HUMAN_VERIFICATION_REQUIRED = 5
    INVALID_CONTEXT = 100
    APP_UPGRADE_REQUIRED = 101

    _VALUES_TO_NAMES = {
        0: "INTERNAL_ERROR",
        1: "ILLEGAL_ARGUMENT",
        2: "VERIFICATION_FAILED",
        3: "NOT_FOUND",
        4: "RETRY_LATER",
        5: "HUMAN_VERIFICATION_REQUIRED",
        100: "INVALID_CONTEXT",
        101: "APP_UPGRADE_REQUIRED",
    }

    _NAMES_TO_VALUES = {
        "INTERNAL_ERROR": 0,
        "ILLEGAL_ARGUMENT": 1,
        "VERIFICATION_FAILED": 2,
        "NOT_FOUND": 3,
        "RETRY_LATER": 4,
        "HUMAN_VERIFICATION_REQUIRED": 5,
        "INVALID_CONTEXT": 100,
        "APP_UPGRADE_REQUIRED": 101,
    }


class ChannelErrorCode(object):
    ILLEGAL_ARGUMENT = 0
    INTERNAL_ERROR = 1
    CONNECTION_ERROR = 2
    AUTHENTICATIONI_FAILED = 3
    NEED_PERMISSION_APPROVAL = 4
    COIN_NOT_USABLE = 5
    WEBVIEW_NOT_ALLOWED = 6

    _VALUES_TO_NAMES = {
        0: "ILLEGAL_ARGUMENT",
        1: "INTERNAL_ERROR",
        2: "CONNECTION_ERROR",
        3: "AUTHENTICATIONI_FAILED",
        4: "NEED_PERMISSION_APPROVAL",
        5: "COIN_NOT_USABLE",
        6: "WEBVIEW_NOT_ALLOWED",
    }

    _NAMES_TO_VALUES = {
        "ILLEGAL_ARGUMENT": 0,
        "INTERNAL_ERROR": 1,
        "CONNECTION_ERROR": 2,
        "AUTHENTICATIONI_FAILED": 3,
        "NEED_PERMISSION_APPROVAL": 4,
        "COIN_NOT_USABLE": 5,
        "WEBVIEW_NOT_ALLOWED": 6,
    }


class TalkException(TException):
    """
    Attributes:
     - code
     - reason
     - parameterMap

    """


    def __init__(self, code=None, reason=None, parameterMap=None,):
        self.code = code
        self.reason = reason
        self.parameterMap = parameterMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.parameterMap = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.parameterMap[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TalkException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        if self.parameterMap is not None:
            oprot.writeFieldBegin('parameterMap', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.parameterMap))
            for kiter7, viter8 in self.parameterMap.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                oprot.writeString(viter8.encode('utf-8') if sys.version_info[0] == 2 else viter8)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShouldSyncException(TException):
    """
    Attributes:
     - syncOpRevision
     - syncScope
     - syncReason
     - message
    """


    def __init__(self, syncOpRevision=None, syncScope=None, syncReason=None, message=None,):
        self.syncOpRevision = syncOpRevision
        self.syncScope = syncScope
        self.syncReason = syncReason
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.syncOpRevision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.syncScope = SyncScope()
                    self.syncScope.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.syncReason = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShouldSyncException')
        if self.syncOpRevision is not None:
            oprot.writeFieldBegin('syncOpRevision', TType.I64, 1)
            oprot.writeI64(self.syncOpRevision)
            oprot.writeFieldEnd()
        if self.syncScope is not None:
            oprot.writeFieldBegin('syncScope', TType.STRUCT, 2)
            self.syncScope.write(oprot)
            oprot.writeFieldEnd()
        if self.syncReason is not None:
            oprot.writeFieldBegin('syncReason', TType.I32, 3)
            oprot.writeI32(self.syncReason)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 4)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SyncParamMid(object):
    """
    Attributes:
     - mid
     - diff
     - revision

    """


    def __init__(self, mid=None, diff=None, revision=None,):
        self.mid = mid
        self.diff = diff
        self.revision = revision

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.diff = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SyncParamMid')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid.encode('utf-8') if sys.version_info[0] == 2 else self.mid)
            oprot.writeFieldEnd()
        if self.diff is not None:
            oprot.writeFieldBegin('diff', TType.I32, 2)
            oprot.writeI32(self.diff)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 3)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SyncParamContact(object):
    """
    Attributes:
     - syncParamMid
     - contactStatus

    """


    def __init__(self, syncParamMid=None, contactStatus=None,):
        self.syncParamMid = syncParamMid
        self.contactStatus = contactStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.syncParamMid = SyncParamMid()
                    self.syncParamMid.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.contactStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SyncParamContact')
        if self.syncParamMid is not None:
            oprot.writeFieldBegin('syncParamMid', TType.STRUCT, 1)
            self.syncParamMid.write(oprot)
            oprot.writeFieldEnd()
        if self.contactStatus is not None:
            oprot.writeFieldBegin('contactStatus', TType.I32, 2)
            oprot.writeI32(self.contactStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SyncRelations(object):
    """
    Attributes:
     - syncAll
     - syncParamContact
     - syncParamMid

    """


    def __init__(self, syncAll=None, syncParamContact=None, syncParamMid=None,):
        self.syncAll = syncAll
        self.syncParamContact = syncParamContact
        self.syncParamMid = syncParamMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.syncAll = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.syncParamContact = []
                    (_etype512, _size509) = iprot.readListBegin()
                    for _i513 in range(_size509):
                        _elem514 = SyncParamContact()
                        _elem514.read(iprot)
                        self.syncParamContact.append(_elem514)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.syncParamMid = []
                    (_etype518, _size515) = iprot.readListBegin()
                    for _i519 in range(_size515):
                        _elem520 = SyncParamMid()
                        _elem520.read(iprot)
                        self.syncParamMid.append(_elem520)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SyncRelations')
        if self.syncAll is not None:
            oprot.writeFieldBegin('syncAll', TType.BOOL, 1)
            oprot.writeBool(self.syncAll)
            oprot.writeFieldEnd()
        if self.syncParamContact is not None:
            oprot.writeFieldBegin('syncParamContact', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.syncParamContact))
            for iter521 in self.syncParamContact:
                iter521.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.syncParamMid is not None:
            oprot.writeFieldBegin('syncParamMid', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.syncParamMid))
            for iter522 in self.syncParamMid:
                iter522.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SyncScope(object):
    """
    Attributes:
     - syncProfile
     - syncSettings
     - syncSticker
     - syncThemeShop
     - contact
     - group
     - room
     - chat

    """


    def __init__(self, syncProfile=None, syncSettings=None, syncSticker=None, syncThemeShop=None, contact=None, group=None, room=None, chat=None,):
        self.syncProfile = syncProfile
        self.syncSettings = syncSettings
        self.syncSticker = syncSticker
        self.syncThemeShop = syncThemeShop
        self.contact = contact
        self.group = group
        self.room = room
        self.chat = chat

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.syncProfile = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.syncSettings = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.syncSticker = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.syncThemeShop = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.contact = SyncRelations()
                    self.contact.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.group = SyncRelations()
                    self.group.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.room = SyncRelations()
                    self.room.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.chat = SyncRelations()
                    self.chat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SyncScope')
        if self.syncProfile is not None:
            oprot.writeFieldBegin('syncProfile', TType.BOOL, 1)
            oprot.writeBool(self.syncProfile)
            oprot.writeFieldEnd()
        if self.syncSettings is not None:
            oprot.writeFieldBegin('syncSettings', TType.BOOL, 2)
            oprot.writeBool(self.syncSettings)
            oprot.writeFieldEnd()
        if self.syncSticker is not None:
            oprot.writeFieldBegin('syncSticker', TType.BOOL, 3)
            oprot.writeBool(self.syncSticker)
            oprot.writeFieldEnd()
        if self.syncThemeShop is not None:
            oprot.writeFieldBegin('syncThemeShop', TType.BOOL, 4)
            oprot.writeBool(self.syncThemeShop)
            oprot.writeFieldEnd()
        if self.contact is not None:
            oprot.writeFieldBegin('contact', TType.STRUCT, 10)
            self.contact.write(oprot)
            oprot.writeFieldEnd()
        if self.group is not None:
            oprot.writeFieldBegin('group', TType.STRUCT, 11)
            self.group.write(oprot)
            oprot.writeFieldEnd()
        if self.room is not None:
            oprot.writeFieldBegin('room', TType.STRUCT, 12)
            self.room.write(oprot)
            oprot.writeFieldEnd()
        if self.chat is not None:
            oprot.writeFieldBegin('chat', TType.STRUCT, 13)
            self.chat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SecondaryQrCodeException(TException):
    """
    Attributes:
     - code
     - alertMessage

    """


    def __init__(self, code=None, alertMessage=None,):
        self.code = code
        self.alertMessage = alertMessage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.alertMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SecondaryQrCodeException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.alertMessage is not None:
            oprot.writeFieldBegin('alertMessage', TType.STRING, 2)
            oprot.writeString(self.alertMessage.encode('utf-8') if sys.version_info[0] == 2 else self.alertMessage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AuthException(TException):
    """
    Attributes:
     - code
     - alertMessage
     - webAuthDetails

    """


    def __init__(self, code=None, alertMessage=None, webAuthDetails=None,):
        self.code = code
        self.alertMessage = alertMessage
        self.webAuthDetails = webAuthDetails

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.alertMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.webAuthDetails = WebAuthDetails()
                    self.webAuthDetails.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.alertMessage is not None:
            oprot.writeFieldBegin('alertMessage', TType.STRING, 2)
            oprot.writeString(self.alertMessage.encode('utf-8') if sys.version_info[0] == 2 else self.alertMessage)
            oprot.writeFieldEnd()
        if self.webAuthDetails is not None:
            oprot.writeFieldBegin('webAuthDetails', TType.STRUCT, 11)
            self.webAuthDetails.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChannelException(TException):
    """
    Attributes:
     - code
     - reason
     - parameterMap

    """


    def __init__(self, code=None, reason=None, parameterMap=None,):
        self.code = code
        self.reason = reason
        self.parameterMap = parameterMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.reason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.parameterMap = {}
                    (_ktype10, _vtype11, _size9) = iprot.readMapBegin()
                    for _i13 in range(_size9):
                        _key14 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val15 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.parameterMap[_key14] = _val15
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChannelException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.reason is not None:
            oprot.writeFieldBegin('reason', TType.STRING, 2)
            oprot.writeString(self.reason.encode('utf-8') if sys.version_info[0] == 2 else self.reason)
            oprot.writeFieldEnd()
        if self.parameterMap is not None:
            oprot.writeFieldBegin('parameterMap', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.parameterMap))
            for kiter16, viter17 in self.parameterMap.items():
                oprot.writeString(kiter16.encode('utf-8') if sys.version_info[0] == 2 else kiter16)
                oprot.writeString(viter17.encode('utf-8') if sys.version_info[0] == 2 else viter17)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiffException(TException):
    """
    Attributes:
     - code
     - message
     - payload

    """


    def __init__(self, code=None, message=None, payload=None,):
        self.code = code
        self.message = message
        self.payload = payload

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.payload = LiffErrorPayload()
                    self.payload.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LiffException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.payload is not None:
            oprot.writeFieldBegin('payload', TType.STRUCT, 3)
            self.payload.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Contact(object):
    """
    Attributes:
     - mid
     - createdTime
     - type
     - status
     - relation
     - displayName
     - phoneticName
     - pictureStatus
     - thumbnailUrl
     - statusMessage
     - displayNameOverridden
     - favoriteTime
     - capableVoiceCall
     - capableVideoCall
     - capableMyhome
     - capableBuddy
     - attributes
     - settings
     - picturePath
     - recommendParams
     - friendRequestStatus
     - musicProfile
     - videoProfile
     - statusMessageContentMetadata
     - avatarProfile

    """


    def __init__(self, mid=None, createdTime=None, type=None, status=None, relation=None, displayName=None, phoneticName=None, pictureStatus=None, thumbnailUrl=None, statusMessage=None, displayNameOverridden=None, favoriteTime=None, capableVoiceCall=None, capableVideoCall=None, capableMyhome=None, capableBuddy=None, attributes=None, settings=None, picturePath=None, recommendParams=None, friendRequestStatus=None, musicProfile=None, videoProfile=None, statusMessageContentMetadata=None, avatarProfile=None,):
        self.mid = mid
        self.createdTime = createdTime
        self.type = type
        self.status = status
        self.relation = relation
        self.displayName = displayName
        self.phoneticName = phoneticName
        self.pictureStatus = pictureStatus
        self.thumbnailUrl = thumbnailUrl
        self.statusMessage = statusMessage
        self.displayNameOverridden = displayNameOverridden
        self.favoriteTime = favoriteTime
        self.capableVoiceCall = capableVoiceCall
        self.capableVideoCall = capableVideoCall
        self.capableMyhome = capableMyhome
        self.capableBuddy = capableBuddy
        self.attributes = attributes
        self.settings = settings
        self.picturePath = picturePath
        self.recommendParams = recommendParams
        self.friendRequestStatus = friendRequestStatus
        self.musicProfile = musicProfile
        self.videoProfile = videoProfile
        self.statusMessageContentMetadata = statusMessageContentMetadata
        self.avatarProfile = avatarProfile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.relation = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.phoneticName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.thumbnailUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.statusMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.displayNameOverridden = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.I64:
                    self.favoriteTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.I64:
                    self.capableVoiceCall = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.BOOL:
                    self.capableVideoCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.BOOL:
                    self.capableMyhome = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.BOOL:
                    self.capableBuddy = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.BOOL:
                    self.attributes = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.I32:
                    self.settings = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.STRING:
                    self.recommendParams = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.I32:
                    self.friendRequestStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRING:
                    self.musicProfile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.STRING:
                    self.videoProfile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.MAP:
                    self.statusMessageContentMetadata = {}
                    (_ktype19, _vtype20, _size18) = iprot.readMapBegin()
                    for _i22 in range(_size18):
                        _key23 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val24 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.statusMessageContentMetadata[_key23] = _val24
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.STRUCT:
                    self.avatarProfile = AvatarProfile()
                    self.avatarProfile.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Contact')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid.encode('utf-8') if sys.version_info[0] == 2 else self.mid)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 10)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 11)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.relation is not None:
            oprot.writeFieldBegin('relation', TType.I32, 21)
            oprot.writeI32(self.relation)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 22)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.phoneticName is not None:
            oprot.writeFieldBegin('phoneticName', TType.STRING, 23)
            oprot.writeString(self.phoneticName.encode('utf-8') if sys.version_info[0] == 2 else self.phoneticName)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 24)
            oprot.writeString(self.pictureStatus.encode('utf-8') if sys.version_info[0] == 2 else self.pictureStatus)
            oprot.writeFieldEnd()
        if self.thumbnailUrl is not None:
            oprot.writeFieldBegin('thumbnailUrl', TType.STRING, 25)
            oprot.writeString(self.thumbnailUrl.encode('utf-8') if sys.version_info[0] == 2 else self.thumbnailUrl)
            oprot.writeFieldEnd()
        if self.statusMessage is not None:
            oprot.writeFieldBegin('statusMessage', TType.STRING, 26)
            oprot.writeString(self.statusMessage.encode('utf-8') if sys.version_info[0] == 2 else self.statusMessage)
            oprot.writeFieldEnd()
        if self.displayNameOverridden is not None:
            oprot.writeFieldBegin('displayNameOverridden', TType.STRING, 27)
            oprot.writeString(self.displayNameOverridden.encode('utf-8') if sys.version_info[0] == 2 else self.displayNameOverridden)
            oprot.writeFieldEnd()
        if self.favoriteTime is not None:
            oprot.writeFieldBegin('favoriteTime', TType.I64, 28)
            oprot.writeI64(self.favoriteTime)
            oprot.writeFieldEnd()
        if self.capableVoiceCall is not None:
            oprot.writeFieldBegin('capableVoiceCall', TType.I64, 31)
            oprot.writeI64(self.capableVoiceCall)
            oprot.writeFieldEnd()
        if self.capableVideoCall is not None:
            oprot.writeFieldBegin('capableVideoCall', TType.BOOL, 32)
            oprot.writeBool(self.capableVideoCall)
            oprot.writeFieldEnd()
        if self.capableMyhome is not None:
            oprot.writeFieldBegin('capableMyhome', TType.BOOL, 33)
            oprot.writeBool(self.capableMyhome)
            oprot.writeFieldEnd()
        if self.capableBuddy is not None:
            oprot.writeFieldBegin('capableBuddy', TType.BOOL, 34)
            oprot.writeBool(self.capableBuddy)
            oprot.writeFieldEnd()
        if self.attributes is not None:
            oprot.writeFieldBegin('attributes', TType.BOOL, 35)
            oprot.writeBool(self.attributes)
            oprot.writeFieldEnd()
        if self.settings is not None:
            oprot.writeFieldBegin('settings', TType.I32, 36)
            oprot.writeI32(self.settings)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 37)
            oprot.writeString(self.picturePath.encode('utf-8') if sys.version_info[0] == 2 else self.picturePath)
            oprot.writeFieldEnd()
        if self.recommendParams is not None:
            oprot.writeFieldBegin('recommendParams', TType.STRING, 38)
            oprot.writeString(self.recommendParams.encode('utf-8') if sys.version_info[0] == 2 else self.recommendParams)
            oprot.writeFieldEnd()
        if self.friendRequestStatus is not None:
            oprot.writeFieldBegin('friendRequestStatus', TType.I32, 39)
            oprot.writeI32(self.friendRequestStatus)
            oprot.writeFieldEnd()
        if self.musicProfile is not None:
            oprot.writeFieldBegin('musicProfile', TType.STRING, 40)
            oprot.writeString(self.musicProfile.encode('utf-8') if sys.version_info[0] == 2 else self.musicProfile)
            oprot.writeFieldEnd()
        if self.videoProfile is not None:
            oprot.writeFieldBegin('videoProfile', TType.STRING, 42)
            oprot.writeString(self.videoProfile.encode('utf-8') if sys.version_info[0] == 2 else self.videoProfile)
            oprot.writeFieldEnd()
        if self.statusMessageContentMetadata is not None:
            oprot.writeFieldBegin('statusMessageContentMetadata', TType.MAP, 43)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.statusMessageContentMetadata))
            for kiter25, viter26 in self.statusMessageContentMetadata.items():
                oprot.writeString(kiter25.encode('utf-8') if sys.version_info[0] == 2 else kiter25)
                oprot.writeString(viter26.encode('utf-8') if sys.version_info[0] == 2 else viter26)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.avatarProfile is not None:
            oprot.writeFieldBegin('avatarProfile', TType.STRUCT, 44)
            self.avatarProfile.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Chat(object):
    """
    Attributes:
     - type
     - chatMid
     - createdTime
     - notificationDisabled
     - favoriteTimestamp
     - chatName
     - picturePath
     - extra

    """


    def __init__(self, type=None, chatMid=None, createdTime=None, notificationDisabled=None, favoriteTimestamp=None, chatName=None, picturePath=None, extra=None,):
        self.type = type
        self.chatMid = chatMid
        self.createdTime = createdTime
        self.notificationDisabled = notificationDisabled
        self.favoriteTimestamp = favoriteTimestamp
        self.chatName = chatName
        self.picturePath = picturePath
        self.extra = extra

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.notificationDisabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.favoriteTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.chatName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.extra = Extra()
                    self.extra.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Chat')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid.encode('utf-8') if sys.version_info[0] == 2 else self.chatMid)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 3)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.notificationDisabled is not None:
            oprot.writeFieldBegin('notificationDisabled', TType.BOOL, 4)
            oprot.writeBool(self.notificationDisabled)
            oprot.writeFieldEnd()
        if self.favoriteTimestamp is not None:
            oprot.writeFieldBegin('favoriteTimestamp', TType.I64, 5)
            oprot.writeI64(self.favoriteTimestamp)
            oprot.writeFieldEnd()
        if self.chatName is not None:
            oprot.writeFieldBegin('chatName', TType.STRING, 6)
            oprot.writeString(self.chatName.encode('utf-8') if sys.version_info[0] == 2 else self.chatName)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 7)
            oprot.writeString(self.picturePath.encode('utf-8') if sys.version_info[0] == 2 else self.picturePath)
            oprot.writeFieldEnd()
        if self.extra is not None:
            oprot.writeFieldBegin('extra', TType.STRUCT, 8)
            self.extra.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetChatsRequest(object):
    """
    Attributes:
     - chatMids
     - withMembers
     - withInvitees

    """


    def __init__(self, chatMids=None, withMembers=None, withInvitees=None,):
        self.chatMids = chatMids
        self.withMembers = withMembers
        self.withInvitees = withInvitees

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.chatMids = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.chatMids.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.withMembers = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.withInvitees = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetChatsRequest')
        if self.chatMids is not None:
            oprot.writeFieldBegin('chatMids', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.chatMids))
            for iter33 in self.chatMids:
                oprot.writeString(iter33.encode('utf-8') if sys.version_info[0] == 2 else iter33)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.withMembers is not None:
            oprot.writeFieldBegin('withMembers', TType.BOOL, 2)
            oprot.writeBool(self.withMembers)
            oprot.writeFieldEnd()
        if self.withInvitees is not None:
            oprot.writeFieldBegin('withInvitees', TType.BOOL, 3)
            oprot.writeBool(self.withInvitees)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAllChatMidsRequest(object):
    """
    Attributes:
     - withMemberChats
     - withInvitedChats

    """


    def __init__(self, withMemberChats=None, withInvitedChats=None,):
        self.withMemberChats = withMemberChats
        self.withInvitedChats = withInvitedChats

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.withMemberChats = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.withInvitedChats = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetAllChatMidsRequest')
        if self.withMemberChats is not None:
            oprot.writeFieldBegin('withMemberChats', TType.BOOL, 1)
            oprot.writeBool(self.withMemberChats)
            oprot.writeFieldEnd()
        if self.withInvitedChats is not None:
            oprot.writeFieldBegin('withInvitedChats', TType.BOOL, 2)
            oprot.writeBool(self.withInvitedChats)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAllChatMidsResponse(object):
    """
    Attributes:
     - memberChatMids
     - invitedChatMids

    """


    def __init__(self, memberChatMids=None, invitedChatMids=None,):
        self.memberChatMids = memberChatMids
        self.invitedChatMids = invitedChatMids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.memberChatMids = set()
                    (_etype37, _size34) = iprot.readSetBegin()
                    for _i38 in range(_size34):
                        _elem39 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.memberChatMids.add(_elem39)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.SET:
                    self.invitedChatMids = set()
                    (_etype43, _size40) = iprot.readSetBegin()
                    for _i44 in range(_size40):
                        _elem45 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.invitedChatMids.add(_elem45)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetAllChatMidsResponse')
        if self.memberChatMids is not None:
            oprot.writeFieldBegin('memberChatMids', TType.SET, 1)
            oprot.writeSetBegin(TType.STRING, len(self.memberChatMids))
            for iter46 in self.memberChatMids:
                oprot.writeString(iter46.encode('utf-8') if sys.version_info[0] == 2 else iter46)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.invitedChatMids is not None:
            oprot.writeFieldBegin('invitedChatMids', TType.SET, 2)
            oprot.writeSetBegin(TType.STRING, len(self.invitedChatMids))
            for iter47 in self.invitedChatMids:
                oprot.writeString(iter47.encode('utf-8') if sys.version_info[0] == 2 else iter47)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UpdateChatRequest(object):
    """
    Attributes:
     - reqSeq
     - chat
     - updatedAttribute

    """


    def __init__(self, reqSeq=None, chat=None, updatedAttribute=None,):
        self.reqSeq = reqSeq
        self.chat = chat
        self.updatedAttribute = updatedAttribute

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.chat = Chat()
                    self.chat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.updatedAttribute = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateChatRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chat is not None:
            oprot.writeFieldBegin('chat', TType.STRUCT, 2)
            self.chat.write(oprot)
            oprot.writeFieldEnd()
        if self.updatedAttribute is not None:
            oprot.writeFieldBegin('updatedAttribute', TType.I32, 3)
            oprot.writeI32(self.updatedAttribute)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UpdateChatResponse(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UpdateChatResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PeerExtra(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PeerExtra')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Extra(object):
    """
    Attributes:
     - groupExtra
     - peerExtra

    """


    def __init__(self, groupExtra=None, peerExtra=None,):
        self.groupExtra = groupExtra
        self.peerExtra = peerExtra

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.groupExtra = GroupExtra()
                    self.groupExtra.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.peerExtra = PeerExtra()
                    self.peerExtra.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Extra')
        if self.groupExtra is not None:
            oprot.writeFieldBegin('groupExtra', TType.STRUCT, 1)
            self.groupExtra.write(oprot)
            oprot.writeFieldEnd()
        if self.peerExtra is not None:
            oprot.writeFieldBegin('peerExtra', TType.STRUCT, 2)
            self.peerExtra.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GroupExtra(object):
    """
    Attributes:
     - creator
     - preventedJoinByTicket
     - invitationTicket
     - memberMids
     - inviteeMids

    """


    def __init__(self, creator=None, preventedJoinByTicket=None, invitationTicket=None, memberMids=None, inviteeMids=None,):
        self.creator = creator
        self.preventedJoinByTicket = preventedJoinByTicket
        self.invitationTicket = invitationTicket
        self.memberMids = memberMids
        self.inviteeMids = inviteeMids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.creator = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.preventedJoinByTicket = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.invitationTicket = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.memberMids = {}
                    (_ktype49, _vtype50, _size48) = iprot.readMapBegin()
                    for _i52 in range(_size48):
                        _key53 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val54 = iprot.readI64()
                        self.memberMids[_key53] = _val54
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.inviteeMids = {}
                    (_ktype56, _vtype57, _size55) = iprot.readMapBegin()
                    for _i59 in range(_size55):
                        _key60 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val61 = iprot.readI64()
                        self.inviteeMids[_key60] = _val61
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GroupExtra')
        if self.creator is not None:
            oprot.writeFieldBegin('creator', TType.STRING, 1)
            oprot.writeString(self.creator.encode('utf-8') if sys.version_info[0] == 2 else self.creator)
            oprot.writeFieldEnd()
        if self.preventedJoinByTicket is not None:
            oprot.writeFieldBegin('preventedJoinByTicket', TType.BOOL, 2)
            oprot.writeBool(self.preventedJoinByTicket)
            oprot.writeFieldEnd()
        if self.invitationTicket is not None:
            oprot.writeFieldBegin('invitationTicket', TType.STRING, 3)
            oprot.writeString(self.invitationTicket.encode('utf-8') if sys.version_info[0] == 2 else self.invitationTicket)
            oprot.writeFieldEnd()
        if self.memberMids is not None:
            oprot.writeFieldBegin('memberMids', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.memberMids))
            for kiter62, viter63 in self.memberMids.items():
                oprot.writeString(kiter62.encode('utf-8') if sys.version_info[0] == 2 else kiter62)
                oprot.writeI64(viter63)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.inviteeMids is not None:
            oprot.writeFieldBegin('inviteeMids', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.I64, len(self.inviteeMids))
            for kiter64, viter65 in self.inviteeMids.items():
                oprot.writeString(kiter64.encode('utf-8') if sys.version_info[0] == 2 else kiter64)
                oprot.writeI64(viter65)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Room(object):
    """
    Attributes:
     - mid
     - createdTime
     - contacts
     - notificationDisabled
     - memberMids

    """


    def __init__(self, mid=None, createdTime=None, contacts=None, notificationDisabled=None, memberMids=None,):
        self.mid = mid
        self.createdTime = createdTime
        self.contacts = contacts
        self.notificationDisabled = notificationDisabled
        self.memberMids = memberMids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.contacts = []
                    (_etype69, _size66) = iprot.readListBegin()
                    for _i70 in range(_size66):
                        _elem71 = Contact()
                        _elem71.read(iprot)
                        self.contacts.append(_elem71)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.notificationDisabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.LIST:
                    self.memberMids = []
                    (_etype75, _size72) = iprot.readListBegin()
                    for _i76 in range(_size72):
                        _elem77 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.memberMids.append(_elem77)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Room')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid.encode('utf-8') if sys.version_info[0] == 2 else self.mid)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.contacts is not None:
            oprot.writeFieldBegin('contacts', TType.LIST, 10)
            oprot.writeListBegin(TType.STRUCT, len(self.contacts))
            for iter78 in self.contacts:
                iter78.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.notificationDisabled is not None:
            oprot.writeFieldBegin('notificationDisabled', TType.BOOL, 31)
            oprot.writeBool(self.notificationDisabled)
            oprot.writeFieldEnd()
        if self.memberMids is not None:
            oprot.writeFieldBegin('memberMids', TType.LIST, 40)
            oprot.writeListBegin(TType.STRING, len(self.memberMids))
            for iter79 in self.memberMids:
                oprot.writeString(iter79.encode('utf-8') if sys.version_info[0] == 2 else iter79)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AvatarProfile(object):
    """
    Attributes:
     - version
     - updatedMillis
     - thumbnail

    """


    def __init__(self, version=None, updatedMillis=None, thumbnail=None,):
        self.version = version
        self.updatedMillis = updatedMillis
        self.thumbnail = thumbnail

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.updatedMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.thumbnail = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AvatarProfile')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 1)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.updatedMillis is not None:
            oprot.writeFieldBegin('updatedMillis', TType.I64, 2)
            oprot.writeI64(self.updatedMillis)
            oprot.writeFieldEnd()
        if self.thumbnail is not None:
            oprot.writeFieldBegin('thumbnail', TType.STRING, 3)
            oprot.writeString(self.thumbnail.encode('utf-8') if sys.version_info[0] == 2 else self.thumbnail)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Location(object):
    """
    Attributes:
     - title
     - address
     - latitude
     - longitude
     - phone
     - categoryId
     - provider
     - accuracy
     - altitudeMeters

    """


    def __init__(self, title=None, address=None, latitude=None, longitude=None, phone=None, categoryId=None, provider=None, accuracy=None, altitudeMeters=None,):
        self.title = title
        self.address = address
        self.latitude = latitude
        self.longitude = longitude
        self.phone = phone
        self.categoryId = categoryId
        self.provider = provider
        self.accuracy = accuracy
        self.altitudeMeters = altitudeMeters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.address = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.phone = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.categoryId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.provider = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.accuracy = GeolocationAccuracy()
                    self.accuracy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.altitudeMeters = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Location')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 2)
            oprot.writeString(self.address.encode('utf-8') if sys.version_info[0] == 2 else self.address)
            oprot.writeFieldEnd()
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 3)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 4)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 5)
            oprot.writeString(self.phone.encode('utf-8') if sys.version_info[0] == 2 else self.phone)
            oprot.writeFieldEnd()
        if self.categoryId is not None:
            oprot.writeFieldBegin('categoryId', TType.STRING, 6)
            oprot.writeString(self.categoryId.encode('utf-8') if sys.version_info[0] == 2 else self.categoryId)
            oprot.writeFieldEnd()
        if self.provider is not None:
            oprot.writeFieldBegin('provider', TType.I32, 7)
            oprot.writeI32(self.provider)
            oprot.writeFieldEnd()
        if self.accuracy is not None:
            oprot.writeFieldBegin('accuracy', TType.STRUCT, 8)
            self.accuracy.write(oprot)
            oprot.writeFieldEnd()
        if self.altitudeMeters is not None:
            oprot.writeFieldBegin('altitudeMeters', TType.DOUBLE, 9)
            oprot.writeDouble(self.altitudeMeters)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GeolocationAccuracy(object):
    """
    Attributes:
     - radiusMeters
     - radiusConfidence
     - altitudeAccuracy
     - velocityAccuracy
     - bearingAccuracy

    """


    def __init__(self, radiusMeters=None, radiusConfidence=None, altitudeAccuracy=None, velocityAccuracy=None, bearingAccuracy=None,):
        self.radiusMeters = radiusMeters
        self.radiusConfidence = radiusConfidence
        self.altitudeAccuracy = altitudeAccuracy
        self.velocityAccuracy = velocityAccuracy
        self.bearingAccuracy = bearingAccuracy

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.radiusMeters = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.radiusConfidence = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.altitudeAccuracy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.velocityAccuracy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.bearingAccuracy = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GeolocationAccuracy')
        if self.radiusMeters is not None:
            oprot.writeFieldBegin('radiusMeters', TType.DOUBLE, 1)
            oprot.writeDouble(self.radiusMeters)
            oprot.writeFieldEnd()
        if self.radiusConfidence is not None:
            oprot.writeFieldBegin('radiusConfidence', TType.DOUBLE, 2)
            oprot.writeDouble(self.radiusConfidence)
            oprot.writeFieldEnd()
        if self.altitudeAccuracy is not None:
            oprot.writeFieldBegin('altitudeAccuracy', TType.DOUBLE, 3)
            oprot.writeDouble(self.altitudeAccuracy)
            oprot.writeFieldEnd()
        if self.velocityAccuracy is not None:
            oprot.writeFieldBegin('velocityAccuracy', TType.DOUBLE, 4)
            oprot.writeDouble(self.velocityAccuracy)
            oprot.writeFieldEnd()
        if self.bearingAccuracy is not None:
            oprot.writeFieldBegin('bearingAccuracy', TType.DOUBLE, 5)
            oprot.writeDouble(self.bearingAccuracy)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Geolocation(object):
    """
    Attributes:
     - longitude
     - latitude
     - accuracy
     - altitudeMeters
     - velocityMetersPerSecond
     - bearingDegrees

    """


    def __init__(self, longitude=None, latitude=None, accuracy=None, altitudeMeters=None, velocityMetersPerSecond=None, bearingDegrees=None,):
        self.longitude = longitude
        self.latitude = latitude
        self.accuracy = accuracy
        self.altitudeMeters = altitudeMeters
        self.velocityMetersPerSecond = velocityMetersPerSecond
        self.bearingDegrees = bearingDegrees

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.accuracy = GeolocationAccuracy()
                    self.accuracy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.altitudeMeters = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.velocityMetersPerSecond = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.bearingDegrees = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Geolocation')
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 1)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 2)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.accuracy is not None:
            oprot.writeFieldBegin('accuracy', TType.STRUCT, 3)
            self.accuracy.write(oprot)
            oprot.writeFieldEnd()
        if self.altitudeMeters is not None:
            oprot.writeFieldBegin('altitudeMeters', TType.DOUBLE, 4)
            oprot.writeDouble(self.altitudeMeters)
            oprot.writeFieldEnd()
        if self.velocityMetersPerSecond is not None:
            oprot.writeFieldBegin('velocityMetersPerSecond', TType.DOUBLE, 5)
            oprot.writeDouble(self.velocityMetersPerSecond)
            oprot.writeFieldEnd()
        if self.bearingDegrees is not None:
            oprot.writeFieldBegin('bearingDegrees', TType.DOUBLE, 6)
            oprot.writeDouble(self.bearingDegrees)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NearbyEntry(object):
    """
    Attributes:
     - emid
     - distance
     - lastUpdatedInSec
     - property
     - profile

    """


    def __init__(self, emid=None, distance=None, lastUpdatedInSec=None, property=None, profile=None,):
        self.emid = emid
        self.distance = distance
        self.lastUpdatedInSec = lastUpdatedInSec
        self.property = property
        self.profile = profile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.emid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.distance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.lastUpdatedInSec = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.property = {}
                    (_ktype81, _vtype82, _size80) = iprot.readMapBegin()
                    for _i84 in range(_size80):
                        _key85 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val86 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.property[_key85] = _val86
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.profile = Profile()
                    self.profile.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NearbyEntry')
        if self.emid is not None:
            oprot.writeFieldBegin('emid', TType.STRING, 1)
            oprot.writeString(self.emid.encode('utf-8') if sys.version_info[0] == 2 else self.emid)
            oprot.writeFieldEnd()
        if self.distance is not None:
            oprot.writeFieldBegin('distance', TType.DOUBLE, 2)
            oprot.writeDouble(self.distance)
            oprot.writeFieldEnd()
        if self.lastUpdatedInSec is not None:
            oprot.writeFieldBegin('lastUpdatedInSec', TType.DOUBLE, 3)
            oprot.writeDouble(self.lastUpdatedInSec)
            oprot.writeFieldEnd()
        if self.property is not None:
            oprot.writeFieldBegin('property', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.property))
            for kiter87, viter88 in self.property.items():
                oprot.writeString(kiter87.encode('utf-8') if sys.version_info[0] == 2 else kiter87)
                oprot.writeString(viter88.encode('utf-8') if sys.version_info[0] == 2 else viter88)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.profile is not None:
            oprot.writeFieldBegin('profile', TType.STRUCT, 5)
            self.profile.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Message(object):
    """
    Attributes:
     - _from
     - to
     - toType
     - id
     - createdTime
     - deliveredTime
     - text
     - location
     - hasContent
     - contentType
     - contentPreview
     - contentMetadata
     - sessionId
     - chunks
     - relatedMessageId
     - messageRelationType
     - readCount
     - relatedMessageServiceCode
     - appExtensionType

    """


    def __init__(self, _from=None, to=None, toType=None, id=None, createdTime=None, deliveredTime=None, text=None, location=None, hasContent=None, contentType=None, contentPreview=None, contentMetadata=None, sessionId=None, chunks=None, relatedMessageId=None, messageRelationType=None, readCount=None, relatedMessageServiceCode=None, appExtensionType=None,):
        self._from = _from
        self.to = to
        self.toType = toType
        self.id = id
        self.createdTime = createdTime
        self.deliveredTime = deliveredTime
        self.text = text
        self.location = location
        self.hasContent = hasContent
        self.contentType = contentType
        self.contentPreview = contentPreview
        self.contentMetadata = contentMetadata
        self.sessionId = sessionId
        self.chunks = chunks
        self.relatedMessageId = relatedMessageId
        self.messageRelationType = messageRelationType
        self.readCount = readCount
        self.relatedMessageServiceCode = relatedMessageServiceCode
        self.appExtensionType = appExtensionType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self._from = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.to = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.toType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.deliveredTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.location = Location()
                    self.location.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.hasContent = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.contentType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.contentPreview = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.MAP:
                    self.contentMetadata = {}
                    (_ktype90, _vtype91, _size89) = iprot.readMapBegin()
                    for _i93 in range(_size89):
                        _key94 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val95 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.contentMetadata[_key94] = _val95
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.sessionId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.chunks = []
                    (_etype99, _size96) = iprot.readListBegin()
                    for _i100 in range(_size96):
                        _elem101 = iprot.readBinary()
                        self.chunks.append(_elem101)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.relatedMessageId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.messageRelationType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.readCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I32:
                    self.relatedMessageServiceCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.I32:
                    self.appExtensionType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Message')
        if self._from is not None:
            oprot.writeFieldBegin('_from', TType.STRING, 1)
            oprot.writeString(self._from.encode('utf-8') if sys.version_info[0] == 2 else self._from)
            oprot.writeFieldEnd()
        if self.to is not None:
            oprot.writeFieldBegin('to', TType.STRING, 2)
            oprot.writeString(self.to.encode('utf-8') if sys.version_info[0] == 2 else self.to)
            oprot.writeFieldEnd()
        if self.toType is not None:
            oprot.writeFieldBegin('toType', TType.I32, 3)
            oprot.writeI32(self.toType)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 4)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 5)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.deliveredTime is not None:
            oprot.writeFieldBegin('deliveredTime', TType.I64, 6)
            oprot.writeI64(self.deliveredTime)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 10)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.location is not None:
            oprot.writeFieldBegin('location', TType.STRUCT, 11)
            self.location.write(oprot)
            oprot.writeFieldEnd()
        if self.hasContent is not None:
            oprot.writeFieldBegin('hasContent', TType.BOOL, 14)
            oprot.writeBool(self.hasContent)
            oprot.writeFieldEnd()
        if self.contentType is not None:
            oprot.writeFieldBegin('contentType', TType.I32, 15)
            oprot.writeI32(self.contentType)
            oprot.writeFieldEnd()
        if self.contentPreview is not None:
            oprot.writeFieldBegin('contentPreview', TType.STRING, 17)
            oprot.writeBinary(self.contentPreview)
            oprot.writeFieldEnd()
        if self.contentMetadata is not None:
            oprot.writeFieldBegin('contentMetadata', TType.MAP, 18)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.contentMetadata))
            for kiter102, viter103 in self.contentMetadata.items():
                oprot.writeString(kiter102.encode('utf-8') if sys.version_info[0] == 2 else kiter102)
                oprot.writeString(viter103.encode('utf-8') if sys.version_info[0] == 2 else viter103)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.I32, 19)
            oprot.writeI32(self.sessionId)
            oprot.writeFieldEnd()
        if self.chunks is not None:
            oprot.writeFieldBegin('chunks', TType.LIST, 20)
            oprot.writeListBegin(TType.STRING, len(self.chunks))
            for iter104 in self.chunks:
                oprot.writeBinary(iter104)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.relatedMessageId is not None:
            oprot.writeFieldBegin('relatedMessageId', TType.STRING, 21)
            oprot.writeString(self.relatedMessageId.encode('utf-8') if sys.version_info[0] == 2 else self.relatedMessageId)
            oprot.writeFieldEnd()
        if self.messageRelationType is not None:
            oprot.writeFieldBegin('messageRelationType', TType.I32, 22)
            oprot.writeI32(self.messageRelationType)
            oprot.writeFieldEnd()
        if self.readCount is not None:
            oprot.writeFieldBegin('readCount', TType.I32, 23)
            oprot.writeI32(self.readCount)
            oprot.writeFieldEnd()
        if self.relatedMessageServiceCode is not None:
            oprot.writeFieldBegin('relatedMessageServiceCode', TType.I32, 24)
            oprot.writeI32(self.relatedMessageServiceCode)
            oprot.writeFieldEnd()
        if self.appExtensionType is not None:
            oprot.writeFieldBegin('appExtensionType', TType.I32, 25)
            oprot.writeI32(self.appExtensionType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Profile(object):
    """
    Attributes:
     - mid
     - userid
     - phone
     - email
     - regionCode
     - displayName
     - phoneticName
     - pictureStatus
     - thumbnailUrl
     - statusMessage
     - allowSearchByUserid
     - allowSearchByEmail
     - picturePath
     - musicProfile
     - videoProfile
     - statusMessageContentMetadata
     - avatarProfile

    """


    def __init__(self, mid=None, userid=None, phone=None, email=None, regionCode=None, displayName=None, phoneticName=None, pictureStatus=None, thumbnailUrl=None, statusMessage=None, allowSearchByUserid=None, allowSearchByEmail=None, picturePath=None, musicProfile=None, videoProfile=None, statusMessageContentMetadata=None, avatarProfile=None,):
        self.mid = mid
        self.userid = userid
        self.phone = phone
        self.email = email
        self.regionCode = regionCode
        self.displayName = displayName
        self.phoneticName = phoneticName
        self.pictureStatus = pictureStatus
        self.thumbnailUrl = thumbnailUrl
        self.statusMessage = statusMessage
        self.allowSearchByUserid = allowSearchByUserid
        self.allowSearchByEmail = allowSearchByEmail
        self.picturePath = picturePath
        self.musicProfile = musicProfile
        self.videoProfile = videoProfile
        self.statusMessageContentMetadata = statusMessageContentMetadata
        self.avatarProfile = avatarProfile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.userid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.phone = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.regionCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.phoneticName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.thumbnailUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.statusMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.allowSearchByUserid = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.BOOL:
                    self.allowSearchByEmail = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.STRING:
                    self.musicProfile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRING:
                    self.videoProfile = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.MAP:
                    self.statusMessageContentMetadata = {}
                    (_ktype106, _vtype107, _size105) = iprot.readMapBegin()
                    for _i109 in range(_size105):
                        _key110 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val111 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.statusMessageContentMetadata[_key110] = _val111
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.STRUCT:
                    self.avatarProfile = AvatarProfile()
                    self.avatarProfile.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Profile')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid.encode('utf-8') if sys.version_info[0] == 2 else self.mid)
            oprot.writeFieldEnd()
        if self.userid is not None:
            oprot.writeFieldBegin('userid', TType.STRING, 3)
            oprot.writeString(self.userid.encode('utf-8') if sys.version_info[0] == 2 else self.userid)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 10)
            oprot.writeString(self.phone.encode('utf-8') if sys.version_info[0] == 2 else self.phone)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 11)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.regionCode is not None:
            oprot.writeFieldBegin('regionCode', TType.STRING, 12)
            oprot.writeString(self.regionCode.encode('utf-8') if sys.version_info[0] == 2 else self.regionCode)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 20)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.phoneticName is not None:
            oprot.writeFieldBegin('phoneticName', TType.STRING, 21)
            oprot.writeString(self.phoneticName.encode('utf-8') if sys.version_info[0] == 2 else self.phoneticName)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 22)
            oprot.writeString(self.pictureStatus.encode('utf-8') if sys.version_info[0] == 2 else self.pictureStatus)
            oprot.writeFieldEnd()
        if self.thumbnailUrl is not None:
            oprot.writeFieldBegin('thumbnailUrl', TType.STRING, 23)
            oprot.writeString(self.thumbnailUrl.encode('utf-8') if sys.version_info[0] == 2 else self.thumbnailUrl)
            oprot.writeFieldEnd()
        if self.statusMessage is not None:
            oprot.writeFieldBegin('statusMessage', TType.STRING, 24)
            oprot.writeString(self.statusMessage.encode('utf-8') if sys.version_info[0] == 2 else self.statusMessage)
            oprot.writeFieldEnd()
        if self.allowSearchByUserid is not None:
            oprot.writeFieldBegin('allowSearchByUserid', TType.BOOL, 31)
            oprot.writeBool(self.allowSearchByUserid)
            oprot.writeFieldEnd()
        if self.allowSearchByEmail is not None:
            oprot.writeFieldBegin('allowSearchByEmail', TType.BOOL, 32)
            oprot.writeBool(self.allowSearchByEmail)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 33)
            oprot.writeString(self.picturePath.encode('utf-8') if sys.version_info[0] == 2 else self.picturePath)
            oprot.writeFieldEnd()
        if self.musicProfile is not None:
            oprot.writeFieldBegin('musicProfile', TType.STRING, 34)
            oprot.writeString(self.musicProfile.encode('utf-8') if sys.version_info[0] == 2 else self.musicProfile)
            oprot.writeFieldEnd()
        if self.videoProfile is not None:
            oprot.writeFieldBegin('videoProfile', TType.STRING, 35)
            oprot.writeString(self.videoProfile.encode('utf-8') if sys.version_info[0] == 2 else self.videoProfile)
            oprot.writeFieldEnd()
        if self.statusMessageContentMetadata is not None:
            oprot.writeFieldBegin('statusMessageContentMetadata', TType.MAP, 36)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.statusMessageContentMetadata))
            for kiter112, viter113 in self.statusMessageContentMetadata.items():
                oprot.writeString(kiter112.encode('utf-8') if sys.version_info[0] == 2 else kiter112)
                oprot.writeString(viter113.encode('utf-8') if sys.version_info[0] == 2 else viter113)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.avatarProfile is not None:
            oprot.writeFieldBegin('avatarProfile', TType.STRUCT, 37)
            self.avatarProfile.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FollowProfile(object):
    """
    Attributes:
     - followMid
     - displayName
     - picturePath
     - following
     - allowFollow
     - followBuddyDetail

    """


    def __init__(self, followMid=None, displayName=None, picturePath=None, following=None, allowFollow=None, followBuddyDetail=None,):
        self.followMid = followMid
        self.displayName = displayName
        self.picturePath = picturePath
        self.following = following
        self.allowFollow = allowFollow
        self.followBuddyDetail = followBuddyDetail

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.followMid = FollowMid()
                    self.followMid.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.following = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.allowFollow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.followBuddyDetail = FollowBuddyDetail()
                    self.followBuddyDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FollowProfile')
        if self.followMid is not None:
            oprot.writeFieldBegin('followMid', TType.STRUCT, 1)
            self.followMid.write(oprot)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 2)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 3)
            oprot.writeString(self.picturePath.encode('utf-8') if sys.version_info[0] == 2 else self.picturePath)
            oprot.writeFieldEnd()
        if self.following is not None:
            oprot.writeFieldBegin('following', TType.BOOL, 4)
            oprot.writeBool(self.following)
            oprot.writeFieldEnd()
        if self.allowFollow is not None:
            oprot.writeFieldBegin('allowFollow', TType.BOOL, 5)
            oprot.writeBool(self.allowFollow)
            oprot.writeFieldEnd()
        if self.followBuddyDetail is not None:
            oprot.writeFieldBegin('followBuddyDetail', TType.STRUCT, 6)
            self.followBuddyDetail.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContactRegistration(object):
    """
    Attributes:
     - contact
     - luid
     - contactType
     - contactKey

    """


    def __init__(self, contact=None, luid=None, contactType=None, contactKey=None,):
        self.contact = contact
        self.luid = luid
        self.contactType = contactType
        self.contactKey = contactKey

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.contact = Contact()
                    self.contact.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.luid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.contactType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.contactKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContactRegistration')
        if self.contact is not None:
            oprot.writeFieldBegin('contact', TType.STRUCT, 1)
            self.contact.write(oprot)
            oprot.writeFieldEnd()
        if self.luid is not None:
            oprot.writeFieldBegin('luid', TType.STRING, 10)
            oprot.writeString(self.luid.encode('utf-8') if sys.version_info[0] == 2 else self.luid)
            oprot.writeFieldEnd()
        if self.contactType is not None:
            oprot.writeFieldBegin('contactType', TType.I32, 11)
            oprot.writeI32(self.contactType)
            oprot.writeFieldEnd()
        if self.contactKey is not None:
            oprot.writeFieldBegin('contactKey', TType.STRING, 12)
            oprot.writeString(self.contactKey.encode('utf-8') if sys.version_info[0] == 2 else self.contactKey)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Operation(object):
    """
    Attributes:
     - revision
     - createdTime
     - type
     - reqSeq
     - checksum
     - status
     - param1
     - param2
     - param3
     - message

    """


    def __init__(self, revision=None, createdTime=None, type=None, reqSeq=None, checksum=None, status=None, param1=None, param2=None, param3=None, message=None,):
        self.revision = revision
        self.createdTime = createdTime
        self.type = type
        self.reqSeq = reqSeq
        self.checksum = checksum
        self.status = status
        self.param1 = param1
        self.param2 = param2
        self.param3 = param3
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.checksum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.param1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.param2 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.param3 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRUCT:
                    self.message = Message()
                    self.message.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Operation')
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 1)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 4)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.checksum is not None:
            oprot.writeFieldBegin('checksum', TType.STRING, 5)
            oprot.writeString(self.checksum.encode('utf-8') if sys.version_info[0] == 2 else self.checksum)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 7)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.param1 is not None:
            oprot.writeFieldBegin('param1', TType.STRING, 10)
            oprot.writeString(self.param1.encode('utf-8') if sys.version_info[0] == 2 else self.param1)
            oprot.writeFieldEnd()
        if self.param2 is not None:
            oprot.writeFieldBegin('param2', TType.STRING, 11)
            oprot.writeString(self.param2.encode('utf-8') if sys.version_info[0] == 2 else self.param2)
            oprot.writeFieldEnd()
        if self.param3 is not None:
            oprot.writeFieldBegin('param3', TType.STRING, 12)
            oprot.writeString(self.param3.encode('utf-8') if sys.version_info[0] == 2 else self.param3)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRUCT, 20)
            self.message.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SIMInfo(object):
    """
    Attributes:
     - phoneNumber
     - countryCode

    """


    def __init__(self, phoneNumber=None, countryCode=None,):
        self.phoneNumber = phoneNumber
        self.countryCode = countryCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.phoneNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SIMInfo')
        if self.phoneNumber is not None:
            oprot.writeFieldBegin('phoneNumber', TType.STRING, 1)
            oprot.writeString(self.phoneNumber.encode('utf-8') if sys.version_info[0] == 2 else self.phoneNumber)
            oprot.writeFieldEnd()
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 2)
            oprot.writeString(self.countryCode.encode('utf-8') if sys.version_info[0] == 2 else self.countryCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CallHost(object):
    """
    Attributes:
     - host
     - port
     - zone

    """


    def __init__(self, host=None, port=None, zone=None,):
        self.host = host
        self.port = port
        self.zone = zone

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.zone = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CallHost')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 2)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.zone is not None:
            oprot.writeFieldBegin('zone', TType.STRING, 3)
            oprot.writeString(self.zone.encode('utf-8') if sys.version_info[0] == 2 else self.zone)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GroupCallRoute(object):
    """
    Attributes:
     - token
     - cscf
     - mix
     - hostMid
     - capabilities
     - proto
     - voipAddress
     - voipUdpPort
     - voipTcpPort
     - fromZone
     - commParam
     - polarisAddress
     - polarisUdpPort
     - polarisZone
     - orionAddress

    """


    def __init__(self, token=None, cscf=None, mix=None, hostMid=None, capabilities=None, proto=None, voipAddress=None, voipUdpPort=None, voipTcpPort=None, fromZone=None, commParam=None, polarisAddress=None, polarisUdpPort=None, polarisZone=None, orionAddress=None,):
        self.token = token
        self.cscf = cscf
        self.mix = mix
        self.hostMid = hostMid
        self.capabilities = capabilities
        self.proto = proto
        self.voipAddress = voipAddress
        self.voipUdpPort = voipUdpPort
        self.voipTcpPort = voipTcpPort
        self.fromZone = fromZone
        self.commParam = commParam
        self.polarisAddress = polarisAddress
        self.polarisUdpPort = polarisUdpPort
        self.polarisZone = polarisZone
        self.orionAddress = orionAddress

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cscf = CallHost()
                    self.cscf.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.mix = CallHost()
                    self.mix.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.hostMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.capabilities = []
                    (_etype117, _size114) = iprot.readListBegin()
                    for _i118 in range(_size114):
                        _elem119 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.capabilities.append(_elem119)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.proto = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.voipAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.voipUdpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.voipTcpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.fromZone = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.commParam = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.polarisAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.polarisUdpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.polarisZone = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.orionAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GroupCallRoute')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeString(self.token.encode('utf-8') if sys.version_info[0] == 2 else self.token)
            oprot.writeFieldEnd()
        if self.cscf is not None:
            oprot.writeFieldBegin('cscf', TType.STRUCT, 2)
            self.cscf.write(oprot)
            oprot.writeFieldEnd()
        if self.mix is not None:
            oprot.writeFieldBegin('mix', TType.STRUCT, 3)
            self.mix.write(oprot)
            oprot.writeFieldEnd()
        if self.hostMid is not None:
            oprot.writeFieldBegin('hostMid', TType.STRING, 4)
            oprot.writeString(self.hostMid.encode('utf-8') if sys.version_info[0] == 2 else self.hostMid)
            oprot.writeFieldEnd()
        if self.capabilities is not None:
            oprot.writeFieldBegin('capabilities', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.capabilities))
            for iter120 in self.capabilities:
                oprot.writeString(iter120.encode('utf-8') if sys.version_info[0] == 2 else iter120)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.proto is not None:
            oprot.writeFieldBegin('proto', TType.I32, 6)
            oprot.writeI32(self.proto)
            oprot.writeFieldEnd()
        if self.voipAddress is not None:
            oprot.writeFieldBegin('voipAddress', TType.STRING, 7)
            oprot.writeString(self.voipAddress.encode('utf-8') if sys.version_info[0] == 2 else self.voipAddress)
            oprot.writeFieldEnd()
        if self.voipUdpPort is not None:
            oprot.writeFieldBegin('voipUdpPort', TType.I32, 8)
            oprot.writeI32(self.voipUdpPort)
            oprot.writeFieldEnd()
        if self.voipTcpPort is not None:
            oprot.writeFieldBegin('voipTcpPort', TType.I32, 9)
            oprot.writeI32(self.voipTcpPort)
            oprot.writeFieldEnd()
        if self.fromZone is not None:
            oprot.writeFieldBegin('fromZone', TType.STRING, 10)
            oprot.writeString(self.fromZone.encode('utf-8') if sys.version_info[0] == 2 else self.fromZone)
            oprot.writeFieldEnd()
        if self.commParam is not None:
            oprot.writeFieldBegin('commParam', TType.STRING, 11)
            oprot.writeString(self.commParam.encode('utf-8') if sys.version_info[0] == 2 else self.commParam)
            oprot.writeFieldEnd()
        if self.polarisAddress is not None:
            oprot.writeFieldBegin('polarisAddress', TType.STRING, 12)
            oprot.writeString(self.polarisAddress.encode('utf-8') if sys.version_info[0] == 2 else self.polarisAddress)
            oprot.writeFieldEnd()
        if self.polarisUdpPort is not None:
            oprot.writeFieldBegin('polarisUdpPort', TType.I32, 13)
            oprot.writeI32(self.polarisUdpPort)
            oprot.writeFieldEnd()
        if self.polarisZone is not None:
            oprot.writeFieldBegin('polarisZone', TType.STRING, 14)
            oprot.writeString(self.polarisZone.encode('utf-8') if sys.version_info[0] == 2 else self.polarisZone)
            oprot.writeFieldEnd()
        if self.orionAddress is not None:
            oprot.writeFieldBegin('orionAddress', TType.STRING, 15)
            oprot.writeString(self.orionAddress.encode('utf-8') if sys.version_info[0] == 2 else self.orionAddress)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CallRoute(object):
    """
    Attributes:
     - fromToken
     - callFlowType
     - voipAddress
     - voipUdpPort
     - voipTcpPort
     - fromZone
     - toZone
     - fakeCall
     - ringbackTone
     - toMid
     - tunneling
     - commParam

    """


    def __init__(self, fromToken=None, callFlowType=None, voipAddress=None, voipUdpPort=None, voipTcpPort=None, fromZone=None, toZone=None, fakeCall=None, ringbackTone=None, toMid=None, tunneling=None, commParam=None,):
        self.fromToken = fromToken
        self.callFlowType = callFlowType
        self.voipAddress = voipAddress
        self.voipUdpPort = voipUdpPort
        self.voipTcpPort = voipTcpPort
        self.fromZone = fromZone
        self.toZone = toZone
        self.fakeCall = fakeCall
        self.ringbackTone = ringbackTone
        self.toMid = toMid
        self.tunneling = tunneling
        self.commParam = commParam

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fromToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.callFlowType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.voipAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.voipUdpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.voipTcpPort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.fromZone = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.toZone = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.fakeCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.ringbackTone = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.toMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.tunneling = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.commParam = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CallRoute')
        if self.fromToken is not None:
            oprot.writeFieldBegin('fromToken', TType.STRING, 1)
            oprot.writeString(self.fromToken.encode('utf-8') if sys.version_info[0] == 2 else self.fromToken)
            oprot.writeFieldEnd()
        if self.callFlowType is not None:
            oprot.writeFieldBegin('callFlowType', TType.I32, 2)
            oprot.writeI32(self.callFlowType)
            oprot.writeFieldEnd()
        if self.voipAddress is not None:
            oprot.writeFieldBegin('voipAddress', TType.STRING, 3)
            oprot.writeString(self.voipAddress.encode('utf-8') if sys.version_info[0] == 2 else self.voipAddress)
            oprot.writeFieldEnd()
        if self.voipUdpPort is not None:
            oprot.writeFieldBegin('voipUdpPort', TType.I32, 4)
            oprot.writeI32(self.voipUdpPort)
            oprot.writeFieldEnd()
        if self.voipTcpPort is not None:
            oprot.writeFieldBegin('voipTcpPort', TType.I32, 5)
            oprot.writeI32(self.voipTcpPort)
            oprot.writeFieldEnd()
        if self.fromZone is not None:
            oprot.writeFieldBegin('fromZone', TType.STRING, 6)
            oprot.writeString(self.fromZone.encode('utf-8') if sys.version_info[0] == 2 else self.fromZone)
            oprot.writeFieldEnd()
        if self.toZone is not None:
            oprot.writeFieldBegin('toZone', TType.STRING, 7)
            oprot.writeString(self.toZone.encode('utf-8') if sys.version_info[0] == 2 else self.toZone)
            oprot.writeFieldEnd()
        if self.fakeCall is not None:
            oprot.writeFieldBegin('fakeCall', TType.BOOL, 8)
            oprot.writeBool(self.fakeCall)
            oprot.writeFieldEnd()
        if self.ringbackTone is not None:
            oprot.writeFieldBegin('ringbackTone', TType.STRING, 9)
            oprot.writeString(self.ringbackTone.encode('utf-8') if sys.version_info[0] == 2 else self.ringbackTone)
            oprot.writeFieldEnd()
        if self.toMid is not None:
            oprot.writeFieldBegin('toMid', TType.STRING, 10)
            oprot.writeString(self.toMid.encode('utf-8') if sys.version_info[0] == 2 else self.toMid)
            oprot.writeFieldEnd()
        if self.tunneling is not None:
            oprot.writeFieldBegin('tunneling', TType.STRING, 11)
            oprot.writeString(self.tunneling.encode('utf-8') if sys.version_info[0] == 2 else self.tunneling)
            oprot.writeFieldEnd()
        if self.commParam is not None:
            oprot.writeFieldBegin('commParam', TType.STRING, 12)
            oprot.writeString(self.commParam.encode('utf-8') if sys.version_info[0] == 2 else self.commParam)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TestCallRoute(object):
    """
    Attributes:
     - token
     - voipServer

    """


    def __init__(self, token=None, voipServer=None,):
        self.token = token
        self.voipServer = voipServer

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.voipServer = CallHost()
                    self.voipServer.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TestCallRoute')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeString(self.token.encode('utf-8') if sys.version_info[0] == 2 else self.token)
            oprot.writeFieldEnd()
        if self.voipServer is not None:
            oprot.writeFieldBegin('voipServer', TType.STRUCT, 2)
            self.voipServer.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GroupCall(object):
    """
    Attributes:
     - online
     - chatMid
     - hostMid
     - memberMids
     - started
     - mediaType
     - protocol

    """


    def __init__(self, online=None, chatMid=None, hostMid=None, memberMids=None, started=None, mediaType=None, protocol=None,):
        self.online = online
        self.chatMid = chatMid
        self.hostMid = hostMid
        self.memberMids = memberMids
        self.started = started
        self.mediaType = mediaType
        self.protocol = protocol

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.online = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.hostMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.memberMids = []
                    (_etype124, _size121) = iprot.readListBegin()
                    for _i125 in range(_size121):
                        _elem126 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.memberMids.append(_elem126)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.started = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.mediaType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.protocol = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GroupCall')
        if self.online is not None:
            oprot.writeFieldBegin('online', TType.BOOL, 1)
            oprot.writeBool(self.online)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid.encode('utf-8') if sys.version_info[0] == 2 else self.chatMid)
            oprot.writeFieldEnd()
        if self.hostMid is not None:
            oprot.writeFieldBegin('hostMid', TType.STRING, 3)
            oprot.writeString(self.hostMid.encode('utf-8') if sys.version_info[0] == 2 else self.hostMid)
            oprot.writeFieldEnd()
        if self.memberMids is not None:
            oprot.writeFieldBegin('memberMids', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.memberMids))
            for iter127 in self.memberMids:
                oprot.writeString(iter127.encode('utf-8') if sys.version_info[0] == 2 else iter127)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.started is not None:
            oprot.writeFieldBegin('started', TType.I64, 5)
            oprot.writeI64(self.started)
            oprot.writeFieldEnd()
        if self.mediaType is not None:
            oprot.writeFieldBegin('mediaType', TType.I32, 6)
            oprot.writeI32(self.mediaType)
            oprot.writeFieldEnd()
        if self.protocol is not None:
            oprot.writeFieldBegin('protocol', TType.I32, 7)
            oprot.writeI32(self.protocol)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExtendedProfileBirthday(object):
    """
    Attributes:
     - year
     - yearPrivacyLevelType
     - yearEnabled
     - day
     - dayPrivacyLevelType
     - dayEnabled

    """


    def __init__(self, year=None, yearPrivacyLevelType=None, yearEnabled=None, day=None, dayPrivacyLevelType=None, dayEnabled=None,):
        self.year = year
        self.yearPrivacyLevelType = yearPrivacyLevelType
        self.yearEnabled = yearEnabled
        self.day = day
        self.dayPrivacyLevelType = dayPrivacyLevelType
        self.dayEnabled = dayEnabled

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.year = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.yearPrivacyLevelType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.yearEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.day = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.dayPrivacyLevelType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.dayEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExtendedProfileBirthday')
        if self.year is not None:
            oprot.writeFieldBegin('year', TType.STRING, 1)
            oprot.writeString(self.year.encode('utf-8') if sys.version_info[0] == 2 else self.year)
            oprot.writeFieldEnd()
        if self.yearPrivacyLevelType is not None:
            oprot.writeFieldBegin('yearPrivacyLevelType', TType.I32, 2)
            oprot.writeI32(self.yearPrivacyLevelType)
            oprot.writeFieldEnd()
        if self.yearEnabled is not None:
            oprot.writeFieldBegin('yearEnabled', TType.BOOL, 3)
            oprot.writeBool(self.yearEnabled)
            oprot.writeFieldEnd()
        if self.day is not None:
            oprot.writeFieldBegin('day', TType.STRING, 5)
            oprot.writeString(self.day.encode('utf-8') if sys.version_info[0] == 2 else self.day)
            oprot.writeFieldEnd()
        if self.dayPrivacyLevelType is not None:
            oprot.writeFieldBegin('dayPrivacyLevelType', TType.I32, 6)
            oprot.writeI32(self.dayPrivacyLevelType)
            oprot.writeFieldEnd()
        if self.dayEnabled is not None:
            oprot.writeFieldBegin('dayEnabled', TType.BOOL, 7)
            oprot.writeBool(self.dayEnabled)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExtendedProfile(object):
    """
    Attributes:
     - birthday

    """


    def __init__(self, birthday=None,):
        self.birthday = birthday

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.birthday = ExtendedProfileBirthday()
                    self.birthday.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExtendedProfile')
        if self.birthday is not None:
            oprot.writeFieldBegin('birthday', TType.STRUCT, 1)
            self.birthday.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Settings(object):
    """
    Attributes:
     - notificationEnable
     - notificationMuteExpiration
     - notificationNewMessage
     - notificationGroupInvitation
     - notificationShowMessage
     - notificationIncomingCall
     - notificationSoundMessage
     - notificationSoundGroup
     - notificationDisabledWithSub
     - notificationPayment
     - privacySyncContacts
     - privacySearchByPhoneNumber
     - privacySearchByUserid
     - privacySearchByEmail
     - privacyAllowSecondaryDeviceLogin
     - privacyProfileImagePostToMyhome
     - privacyReceiveMessagesFromNotFriend
     - privacyAgreeUseLineCoinToPaidCall
     - privacyAgreeUsePaidCall
     - privacyAllowFriendRequest
     - contactMyTicket
     - identityProvider
     - identityIdentifier
     - snsAccounts
     - phoneRegistration
     - emailConfirmationStatus
     - accountMigrationPincodeType
     - enforcedInputAccountMigrationPincode
     - securityCenterSettingsType
     - allowUnregistrationSecondaryDevice
     - preferenceLocale
     - customModes
     - e2eeEnable
     - hitokotoBackupRequested
     - privacyProfileMusicPostToMyhome
     - privacyAllowNearby
     - agreementNearbyTime
     - agreementSquareTime
     - notificationMention
     - botUseAgreementAcceptedAt
     - agreementShakeFunction
     - agreementMobileContactName
     - notificationThumbnail
     - agreementSoundToText
     - privacyPolicyVersion
     - agreementAdByWebAccess
     - agreementPhoneNumberMatching
     - agreementCommunicationInfo
     - privacySharePersonalInfoToFriends
     - agreementThingsWirelessCommunication
     - agreementGdpr
     - privacyStatusMessageHistory
     - agreementProvideLocation
     - agreementBeacon
     - privacyAllowProfileHistory
     - agreementContentsSuggest
     - agreementContentsSuggestDataCollection
     - privacyAgeResult
     - privacyAgeResultReceived
     - agreementOcrImageCollection
     - privacyAllowFollow
     - privacyShowFollowList
     - notificationBadgeTalkOnly

    """


    def __init__(self, notificationEnable=None, notificationMuteExpiration=None, notificationNewMessage=None, notificationGroupInvitation=None, notificationShowMessage=None, notificationIncomingCall=None, notificationSoundMessage=None, notificationSoundGroup=None, notificationDisabledWithSub=None, notificationPayment=None, privacySyncContacts=None, privacySearchByPhoneNumber=None, privacySearchByUserid=None, privacySearchByEmail=None, privacyAllowSecondaryDeviceLogin=None, privacyProfileImagePostToMyhome=None, privacyReceiveMessagesFromNotFriend=None, privacyAgreeUseLineCoinToPaidCall=None, privacyAgreeUsePaidCall=None, privacyAllowFriendRequest=None, contactMyTicket=None, identityProvider=None, identityIdentifier=None, snsAccounts=None, phoneRegistration=None, emailConfirmationStatus=None, accountMigrationPincodeType=None, enforcedInputAccountMigrationPincode=None, securityCenterSettingsType=None, allowUnregistrationSecondaryDevice=None, preferenceLocale=None, customModes=None, e2eeEnable=None, hitokotoBackupRequested=None, privacyProfileMusicPostToMyhome=None, privacyAllowNearby=None, agreementNearbyTime=None, agreementSquareTime=None, notificationMention=None, botUseAgreementAcceptedAt=None, agreementShakeFunction=None, agreementMobileContactName=None, notificationThumbnail=None, agreementSoundToText=None, privacyPolicyVersion=None, agreementAdByWebAccess=None, agreementPhoneNumberMatching=None, agreementCommunicationInfo=None, privacySharePersonalInfoToFriends=None, agreementThingsWirelessCommunication=None, agreementGdpr=None, privacyStatusMessageHistory=None, agreementProvideLocation=None, agreementBeacon=None, privacyAllowProfileHistory=None, agreementContentsSuggest=None, agreementContentsSuggestDataCollection=None, privacyAgeResult=None, privacyAgeResultReceived=None, agreementOcrImageCollection=None, privacyAllowFollow=None, privacyShowFollowList=None, notificationBadgeTalkOnly=None,):
        self.notificationEnable = notificationEnable
        self.notificationMuteExpiration = notificationMuteExpiration
        self.notificationNewMessage = notificationNewMessage
        self.notificationGroupInvitation = notificationGroupInvitation
        self.notificationShowMessage = notificationShowMessage
        self.notificationIncomingCall = notificationIncomingCall
        self.notificationSoundMessage = notificationSoundMessage
        self.notificationSoundGroup = notificationSoundGroup
        self.notificationDisabledWithSub = notificationDisabledWithSub
        self.notificationPayment = notificationPayment
        self.privacySyncContacts = privacySyncContacts
        self.privacySearchByPhoneNumber = privacySearchByPhoneNumber
        self.privacySearchByUserid = privacySearchByUserid
        self.privacySearchByEmail = privacySearchByEmail
        self.privacyAllowSecondaryDeviceLogin = privacyAllowSecondaryDeviceLogin
        self.privacyProfileImagePostToMyhome = privacyProfileImagePostToMyhome
        self.privacyReceiveMessagesFromNotFriend = privacyReceiveMessagesFromNotFriend
        self.privacyAgreeUseLineCoinToPaidCall = privacyAgreeUseLineCoinToPaidCall
        self.privacyAgreeUsePaidCall = privacyAgreeUsePaidCall
        self.privacyAllowFriendRequest = privacyAllowFriendRequest
        self.contactMyTicket = contactMyTicket
        self.identityProvider = identityProvider
        self.identityIdentifier = identityIdentifier
        self.snsAccounts = snsAccounts
        self.phoneRegistration = phoneRegistration
        self.emailConfirmationStatus = emailConfirmationStatus
        self.accountMigrationPincodeType = accountMigrationPincodeType
        self.enforcedInputAccountMigrationPincode = enforcedInputAccountMigrationPincode
        self.securityCenterSettingsType = securityCenterSettingsType
        self.allowUnregistrationSecondaryDevice = allowUnregistrationSecondaryDevice
        self.preferenceLocale = preferenceLocale
        self.customModes = customModes
        self.e2eeEnable = e2eeEnable
        self.hitokotoBackupRequested = hitokotoBackupRequested
        self.privacyProfileMusicPostToMyhome = privacyProfileMusicPostToMyhome
        self.privacyAllowNearby = privacyAllowNearby
        self.agreementNearbyTime = agreementNearbyTime
        self.agreementSquareTime = agreementSquareTime
        self.notificationMention = notificationMention
        self.botUseAgreementAcceptedAt = botUseAgreementAcceptedAt
        self.agreementShakeFunction = agreementShakeFunction
        self.agreementMobileContactName = agreementMobileContactName
        self.notificationThumbnail = notificationThumbnail
        self.agreementSoundToText = agreementSoundToText
        self.privacyPolicyVersion = privacyPolicyVersion
        self.agreementAdByWebAccess = agreementAdByWebAccess
        self.agreementPhoneNumberMatching = agreementPhoneNumberMatching
        self.agreementCommunicationInfo = agreementCommunicationInfo
        self.privacySharePersonalInfoToFriends = privacySharePersonalInfoToFriends
        self.agreementThingsWirelessCommunication = agreementThingsWirelessCommunication
        self.agreementGdpr = agreementGdpr
        self.privacyStatusMessageHistory = privacyStatusMessageHistory
        self.agreementProvideLocation = agreementProvideLocation
        self.agreementBeacon = agreementBeacon
        self.privacyAllowProfileHistory = privacyAllowProfileHistory
        self.agreementContentsSuggest = agreementContentsSuggest
        self.agreementContentsSuggestDataCollection = agreementContentsSuggestDataCollection
        self.privacyAgeResult = privacyAgeResult
        self.privacyAgeResultReceived = privacyAgeResultReceived
        self.agreementOcrImageCollection = agreementOcrImageCollection
        self.privacyAllowFollow = privacyAllowFollow
        self.privacyShowFollowList = privacyShowFollowList
        self.notificationBadgeTalkOnly = notificationBadgeTalkOnly

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 10:
                if ftype == TType.BOOL:
                    self.notificationEnable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.notificationMuteExpiration = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.notificationNewMessage = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.notificationGroupInvitation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.notificationShowMessage = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.notificationIncomingCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.notificationSoundMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.notificationSoundGroup = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.notificationDisabledWithSub = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.BOOL:
                    self.notificationPayment = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.privacySyncContacts = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.privacySearchByPhoneNumber = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.BOOL:
                    self.privacySearchByUserid = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.BOOL:
                    self.privacySearchByEmail = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BOOL:
                    self.privacyAllowSecondaryDeviceLogin = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.BOOL:
                    self.privacyProfileImagePostToMyhome = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.BOOL:
                    self.privacyReceiveMessagesFromNotFriend = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.BOOL:
                    self.privacyAgreeUseLineCoinToPaidCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.BOOL:
                    self.privacyAgreeUsePaidCall = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.BOOL:
                    self.privacyAllowFriendRequest = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.contactMyTicket = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.I32:
                    self.identityProvider = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 41:
                if ftype == TType.STRING:
                    self.identityIdentifier = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 42:
                if ftype == TType.MAP:
                    self.snsAccounts = {}
                    (_ktype129, _vtype130, _size128) = iprot.readMapBegin()
                    for _i132 in range(_size128):
                        _key133 = iprot.readI32()
                        _val134 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.snsAccounts[_key133] = _val134
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 43:
                if ftype == TType.BOOL:
                    self.phoneRegistration = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 44:
                if ftype == TType.I32:
                    self.emailConfirmationStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 45:
                if ftype == TType.I32:
                    self.accountMigrationPincodeType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 46:
                if ftype == TType.BOOL:
                    self.enforcedInputAccountMigrationPincode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 47:
                if ftype == TType.I32:
                    self.securityCenterSettingsType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 48:
                if ftype == TType.BOOL:
                    self.allowUnregistrationSecondaryDevice = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 50:
                if ftype == TType.STRING:
                    self.preferenceLocale = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 60:
                if ftype == TType.MAP:
                    self.customModes = {}
                    (_ktype136, _vtype137, _size135) = iprot.readMapBegin()
                    for _i139 in range(_size135):
                        _key140 = iprot.readI32()
                        _val141 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.customModes[_key140] = _val141
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 61:
                if ftype == TType.BOOL:
                    self.e2eeEnable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 62:
                if ftype == TType.BOOL:
                    self.hitokotoBackupRequested = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 63:
                if ftype == TType.BOOL:
                    self.privacyProfileMusicPostToMyhome = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 65:
                if ftype == TType.BOOL:
                    self.privacyAllowNearby = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 66:
                if ftype == TType.BOOL:
                    self.agreementNearbyTime = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 67:
                if ftype == TType.I64:
                    self.agreementSquareTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 68:
                if ftype == TType.BOOL:
                    self.notificationMention = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 69:
                if ftype == TType.I64:
                    self.botUseAgreementAcceptedAt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 70:
                if ftype == TType.I64:
                    self.agreementShakeFunction = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 71:
                if ftype == TType.I64:
                    self.agreementMobileContactName = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 72:
                if ftype == TType.BOOL:
                    self.notificationThumbnail = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 73:
                if ftype == TType.I64:
                    self.agreementSoundToText = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 74:
                if ftype == TType.STRING:
                    self.privacyPolicyVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 75:
                if ftype == TType.I64:
                    self.agreementAdByWebAccess = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 76:
                if ftype == TType.I64:
                    self.agreementPhoneNumberMatching = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 77:
                if ftype == TType.I64:
                    self.agreementCommunicationInfo = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 78:
                if ftype == TType.I32:
                    self.privacySharePersonalInfoToFriends = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 79:
                if ftype == TType.I64:
                    self.agreementThingsWirelessCommunication = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 80:
                if ftype == TType.I64:
                    self.agreementGdpr = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 81:
                if ftype == TType.I32:
                    self.privacyStatusMessageHistory = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 82:
                if ftype == TType.I64:
                    self.agreementProvideLocation = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 83:
                if ftype == TType.I64:
                    self.agreementBeacon = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 85:
                if ftype == TType.I32:
                    self.privacyAllowProfileHistory = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 86:
                if ftype == TType.I64:
                    self.agreementContentsSuggest = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 87:
                if ftype == TType.I64:
                    self.agreementContentsSuggestDataCollection = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 88:
                if ftype == TType.I32:
                    self.privacyAgeResult = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 89:
                if ftype == TType.BOOL:
                    self.privacyAgeResultReceived = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 90:
                if ftype == TType.I64:
                    self.agreementOcrImageCollection = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 91:
                if ftype == TType.BOOL:
                    self.privacyAllowFollow = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 92:
                if ftype == TType.BOOL:
                    self.privacyShowFollowList = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 93:
                if ftype == TType.BOOL:
                    self.notificationBadgeTalkOnly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Settings')
        if self.notificationEnable is not None:
            oprot.writeFieldBegin('notificationEnable', TType.BOOL, 10)
            oprot.writeBool(self.notificationEnable)
            oprot.writeFieldEnd()
        if self.notificationMuteExpiration is not None:
            oprot.writeFieldBegin('notificationMuteExpiration', TType.BOOL, 11)
            oprot.writeBool(self.notificationMuteExpiration)
            oprot.writeFieldEnd()
        if self.notificationNewMessage is not None:
            oprot.writeFieldBegin('notificationNewMessage', TType.I64, 12)
            oprot.writeI64(self.notificationNewMessage)
            oprot.writeFieldEnd()
        if self.notificationGroupInvitation is not None:
            oprot.writeFieldBegin('notificationGroupInvitation', TType.BOOL, 13)
            oprot.writeBool(self.notificationGroupInvitation)
            oprot.writeFieldEnd()
        if self.notificationShowMessage is not None:
            oprot.writeFieldBegin('notificationShowMessage', TType.BOOL, 14)
            oprot.writeBool(self.notificationShowMessage)
            oprot.writeFieldEnd()
        if self.notificationIncomingCall is not None:
            oprot.writeFieldBegin('notificationIncomingCall', TType.BOOL, 15)
            oprot.writeBool(self.notificationIncomingCall)
            oprot.writeFieldEnd()
        if self.notificationSoundMessage is not None:
            oprot.writeFieldBegin('notificationSoundMessage', TType.STRING, 16)
            oprot.writeString(self.notificationSoundMessage.encode('utf-8') if sys.version_info[0] == 2 else self.notificationSoundMessage)
            oprot.writeFieldEnd()
        if self.notificationSoundGroup is not None:
            oprot.writeFieldBegin('notificationSoundGroup', TType.STRING, 17)
            oprot.writeString(self.notificationSoundGroup.encode('utf-8') if sys.version_info[0] == 2 else self.notificationSoundGroup)
            oprot.writeFieldEnd()
        if self.notificationDisabledWithSub is not None:
            oprot.writeFieldBegin('notificationDisabledWithSub', TType.BOOL, 18)
            oprot.writeBool(self.notificationDisabledWithSub)
            oprot.writeFieldEnd()
        if self.notificationPayment is not None:
            oprot.writeFieldBegin('notificationPayment', TType.BOOL, 19)
            oprot.writeBool(self.notificationPayment)
            oprot.writeFieldEnd()
        if self.privacySyncContacts is not None:
            oprot.writeFieldBegin('privacySyncContacts', TType.BOOL, 20)
            oprot.writeBool(self.privacySyncContacts)
            oprot.writeFieldEnd()
        if self.privacySearchByPhoneNumber is not None:
            oprot.writeFieldBegin('privacySearchByPhoneNumber', TType.BOOL, 21)
            oprot.writeBool(self.privacySearchByPhoneNumber)
            oprot.writeFieldEnd()
        if self.privacySearchByUserid is not None:
            oprot.writeFieldBegin('privacySearchByUserid', TType.BOOL, 22)
            oprot.writeBool(self.privacySearchByUserid)
            oprot.writeFieldEnd()
        if self.privacySearchByEmail is not None:
            oprot.writeFieldBegin('privacySearchByEmail', TType.BOOL, 23)
            oprot.writeBool(self.privacySearchByEmail)
            oprot.writeFieldEnd()
        if self.privacyAllowSecondaryDeviceLogin is not None:
            oprot.writeFieldBegin('privacyAllowSecondaryDeviceLogin', TType.BOOL, 24)
            oprot.writeBool(self.privacyAllowSecondaryDeviceLogin)
            oprot.writeFieldEnd()
        if self.privacyProfileImagePostToMyhome is not None:
            oprot.writeFieldBegin('privacyProfileImagePostToMyhome', TType.BOOL, 25)
            oprot.writeBool(self.privacyProfileImagePostToMyhome)
            oprot.writeFieldEnd()
        if self.privacyReceiveMessagesFromNotFriend is not None:
            oprot.writeFieldBegin('privacyReceiveMessagesFromNotFriend', TType.BOOL, 26)
            oprot.writeBool(self.privacyReceiveMessagesFromNotFriend)
            oprot.writeFieldEnd()
        if self.privacyAgreeUseLineCoinToPaidCall is not None:
            oprot.writeFieldBegin('privacyAgreeUseLineCoinToPaidCall', TType.BOOL, 27)
            oprot.writeBool(self.privacyAgreeUseLineCoinToPaidCall)
            oprot.writeFieldEnd()
        if self.privacyAgreeUsePaidCall is not None:
            oprot.writeFieldBegin('privacyAgreeUsePaidCall', TType.BOOL, 28)
            oprot.writeBool(self.privacyAgreeUsePaidCall)
            oprot.writeFieldEnd()
        if self.privacyAllowFriendRequest is not None:
            oprot.writeFieldBegin('privacyAllowFriendRequest', TType.BOOL, 29)
            oprot.writeBool(self.privacyAllowFriendRequest)
            oprot.writeFieldEnd()
        if self.contactMyTicket is not None:
            oprot.writeFieldBegin('contactMyTicket', TType.STRING, 30)
            oprot.writeString(self.contactMyTicket.encode('utf-8') if sys.version_info[0] == 2 else self.contactMyTicket)
            oprot.writeFieldEnd()
        if self.identityProvider is not None:
            oprot.writeFieldBegin('identityProvider', TType.I32, 40)
            oprot.writeI32(self.identityProvider)
            oprot.writeFieldEnd()
        if self.identityIdentifier is not None:
            oprot.writeFieldBegin('identityIdentifier', TType.STRING, 41)
            oprot.writeString(self.identityIdentifier.encode('utf-8') if sys.version_info[0] == 2 else self.identityIdentifier)
            oprot.writeFieldEnd()
        if self.snsAccounts is not None:
            oprot.writeFieldBegin('snsAccounts', TType.MAP, 42)
            oprot.writeMapBegin(TType.I32, TType.STRING, len(self.snsAccounts))
            for kiter142, viter143 in self.snsAccounts.items():
                oprot.writeI32(kiter142)
                oprot.writeString(viter143.encode('utf-8') if sys.version_info[0] == 2 else viter143)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.phoneRegistration is not None:
            oprot.writeFieldBegin('phoneRegistration', TType.BOOL, 43)
            oprot.writeBool(self.phoneRegistration)
            oprot.writeFieldEnd()
        if self.emailConfirmationStatus is not None:
            oprot.writeFieldBegin('emailConfirmationStatus', TType.I32, 44)
            oprot.writeI32(self.emailConfirmationStatus)
            oprot.writeFieldEnd()
        if self.accountMigrationPincodeType is not None:
            oprot.writeFieldBegin('accountMigrationPincodeType', TType.I32, 45)
            oprot.writeI32(self.accountMigrationPincodeType)
            oprot.writeFieldEnd()
        if self.enforcedInputAccountMigrationPincode is not None:
            oprot.writeFieldBegin('enforcedInputAccountMigrationPincode', TType.BOOL, 46)
            oprot.writeBool(self.enforcedInputAccountMigrationPincode)
            oprot.writeFieldEnd()
        if self.securityCenterSettingsType is not None:
            oprot.writeFieldBegin('securityCenterSettingsType', TType.I32, 47)
            oprot.writeI32(self.securityCenterSettingsType)
            oprot.writeFieldEnd()
        if self.allowUnregistrationSecondaryDevice is not None:
            oprot.writeFieldBegin('allowUnregistrationSecondaryDevice', TType.BOOL, 48)
            oprot.writeBool(self.allowUnregistrationSecondaryDevice)
            oprot.writeFieldEnd()
        if self.preferenceLocale is not None:
            oprot.writeFieldBegin('preferenceLocale', TType.STRING, 50)
            oprot.writeString(self.preferenceLocale.encode('utf-8') if sys.version_info[0] == 2 else self.preferenceLocale)
            oprot.writeFieldEnd()
        if self.customModes is not None:
            oprot.writeFieldBegin('customModes', TType.MAP, 60)
            oprot.writeMapBegin(TType.I32, TType.STRING, len(self.customModes))
            for kiter144, viter145 in self.customModes.items():
                oprot.writeI32(kiter144)
                oprot.writeString(viter145.encode('utf-8') if sys.version_info[0] == 2 else viter145)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.e2eeEnable is not None:
            oprot.writeFieldBegin('e2eeEnable', TType.BOOL, 61)
            oprot.writeBool(self.e2eeEnable)
            oprot.writeFieldEnd()
        if self.hitokotoBackupRequested is not None:
            oprot.writeFieldBegin('hitokotoBackupRequested', TType.BOOL, 62)
            oprot.writeBool(self.hitokotoBackupRequested)
            oprot.writeFieldEnd()
        if self.privacyProfileMusicPostToMyhome is not None:
            oprot.writeFieldBegin('privacyProfileMusicPostToMyhome', TType.BOOL, 63)
            oprot.writeBool(self.privacyProfileMusicPostToMyhome)
            oprot.writeFieldEnd()
        if self.privacyAllowNearby is not None:
            oprot.writeFieldBegin('privacyAllowNearby', TType.BOOL, 65)
            oprot.writeBool(self.privacyAllowNearby)
            oprot.writeFieldEnd()
        if self.agreementNearbyTime is not None:
            oprot.writeFieldBegin('agreementNearbyTime', TType.BOOL, 66)
            oprot.writeBool(self.agreementNearbyTime)
            oprot.writeFieldEnd()
        if self.agreementSquareTime is not None:
            oprot.writeFieldBegin('agreementSquareTime', TType.I64, 67)
            oprot.writeI64(self.agreementSquareTime)
            oprot.writeFieldEnd()
        if self.notificationMention is not None:
            oprot.writeFieldBegin('notificationMention', TType.BOOL, 68)
            oprot.writeBool(self.notificationMention)
            oprot.writeFieldEnd()
        if self.botUseAgreementAcceptedAt is not None:
            oprot.writeFieldBegin('botUseAgreementAcceptedAt', TType.I64, 69)
            oprot.writeI64(self.botUseAgreementAcceptedAt)
            oprot.writeFieldEnd()
        if self.agreementShakeFunction is not None:
            oprot.writeFieldBegin('agreementShakeFunction', TType.I64, 70)
            oprot.writeI64(self.agreementShakeFunction)
            oprot.writeFieldEnd()
        if self.agreementMobileContactName is not None:
            oprot.writeFieldBegin('agreementMobileContactName', TType.I64, 71)
            oprot.writeI64(self.agreementMobileContactName)
            oprot.writeFieldEnd()
        if self.notificationThumbnail is not None:
            oprot.writeFieldBegin('notificationThumbnail', TType.BOOL, 72)
            oprot.writeBool(self.notificationThumbnail)
            oprot.writeFieldEnd()
        if self.agreementSoundToText is not None:
            oprot.writeFieldBegin('agreementSoundToText', TType.I64, 73)
            oprot.writeI64(self.agreementSoundToText)
            oprot.writeFieldEnd()
        if self.privacyPolicyVersion is not None:
            oprot.writeFieldBegin('privacyPolicyVersion', TType.STRING, 74)
            oprot.writeString(self.privacyPolicyVersion.encode('utf-8') if sys.version_info[0] == 2 else self.privacyPolicyVersion)
            oprot.writeFieldEnd()
        if self.agreementAdByWebAccess is not None:
            oprot.writeFieldBegin('agreementAdByWebAccess', TType.I64, 75)
            oprot.writeI64(self.agreementAdByWebAccess)
            oprot.writeFieldEnd()
        if self.agreementPhoneNumberMatching is not None:
            oprot.writeFieldBegin('agreementPhoneNumberMatching', TType.I64, 76)
            oprot.writeI64(self.agreementPhoneNumberMatching)
            oprot.writeFieldEnd()
        if self.agreementCommunicationInfo is not None:
            oprot.writeFieldBegin('agreementCommunicationInfo', TType.I64, 77)
            oprot.writeI64(self.agreementCommunicationInfo)
            oprot.writeFieldEnd()
        if self.privacySharePersonalInfoToFriends is not None:
            oprot.writeFieldBegin('privacySharePersonalInfoToFriends', TType.I32, 78)
            oprot.writeI32(self.privacySharePersonalInfoToFriends)
            oprot.writeFieldEnd()
        if self.agreementThingsWirelessCommunication is not None:
            oprot.writeFieldBegin('agreementThingsWirelessCommunication', TType.I64, 79)
            oprot.writeI64(self.agreementThingsWirelessCommunication)
            oprot.writeFieldEnd()
        if self.agreementGdpr is not None:
            oprot.writeFieldBegin('agreementGdpr', TType.I64, 80)
            oprot.writeI64(self.agreementGdpr)
            oprot.writeFieldEnd()
        if self.privacyStatusMessageHistory is not None:
            oprot.writeFieldBegin('privacyStatusMessageHistory', TType.I32, 81)
            oprot.writeI32(self.privacyStatusMessageHistory)
            oprot.writeFieldEnd()
        if self.agreementProvideLocation is not None:
            oprot.writeFieldBegin('agreementProvideLocation', TType.I64, 82)
            oprot.writeI64(self.agreementProvideLocation)
            oprot.writeFieldEnd()
        if self.agreementBeacon is not None:
            oprot.writeFieldBegin('agreementBeacon', TType.I64, 83)
            oprot.writeI64(self.agreementBeacon)
            oprot.writeFieldEnd()
        if self.privacyAllowProfileHistory is not None:
            oprot.writeFieldBegin('privacyAllowProfileHistory', TType.I32, 85)
            oprot.writeI32(self.privacyAllowProfileHistory)
            oprot.writeFieldEnd()
        if self.agreementContentsSuggest is not None:
            oprot.writeFieldBegin('agreementContentsSuggest', TType.I64, 86)
            oprot.writeI64(self.agreementContentsSuggest)
            oprot.writeFieldEnd()
        if self.agreementContentsSuggestDataCollection is not None:
            oprot.writeFieldBegin('agreementContentsSuggestDataCollection', TType.I64, 87)
            oprot.writeI64(self.agreementContentsSuggestDataCollection)
            oprot.writeFieldEnd()
        if self.privacyAgeResult is not None:
            oprot.writeFieldBegin('privacyAgeResult', TType.I32, 88)
            oprot.writeI32(self.privacyAgeResult)
            oprot.writeFieldEnd()
        if self.privacyAgeResultReceived is not None:
            oprot.writeFieldBegin('privacyAgeResultReceived', TType.BOOL, 89)
            oprot.writeBool(self.privacyAgeResultReceived)
            oprot.writeFieldEnd()
        if self.agreementOcrImageCollection is not None:
            oprot.writeFieldBegin('agreementOcrImageCollection', TType.I64, 90)
            oprot.writeI64(self.agreementOcrImageCollection)
            oprot.writeFieldEnd()
        if self.privacyAllowFollow is not None:
            oprot.writeFieldBegin('privacyAllowFollow', TType.BOOL, 91)
            oprot.writeBool(self.privacyAllowFollow)
            oprot.writeFieldEnd()
        if self.privacyShowFollowList is not None:
            oprot.writeFieldBegin('privacyShowFollowList', TType.BOOL, 92)
            oprot.writeBool(self.privacyShowFollowList)
            oprot.writeFieldEnd()
        if self.notificationBadgeTalkOnly is not None:
            oprot.writeFieldBegin('notificationBadgeTalkOnly', TType.BOOL, 93)
            oprot.writeBool(self.notificationBadgeTalkOnly)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiffNoneContext(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LiffNoneContext')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiffChatContext(object):
    """
    Attributes:
     - chatMid

    """


    def __init__(self, chatMid=None,):
        self.chatMid = chatMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LiffChatContext')
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 1)
            oprot.writeString(self.chatMid.encode('utf-8') if sys.version_info[0] == 2 else self.chatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiffSquareChatContext(object):
    """
    Attributes:
     - squareChatMid

    """


    def __init__(self, squareChatMid=None,):
        self.squareChatMid = squareChatMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.squareChatMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LiffSquareChatContext')
        if self.squareChatMid is not None:
            oprot.writeFieldBegin('squareChatMid', TType.STRING, 1)
            oprot.writeString(self.squareChatMid.encode('utf-8') if sys.version_info[0] == 2 else self.squareChatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiffContext(object):
    """
    Attributes:
     - none
     - chat
     - squareChat

    """


    def __init__(self, none=None, chat=None, squareChat=None,):
        self.none = none
        self.chat = chat
        self.squareChat = squareChat

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.none = LiffNoneContext()
                    self.none.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.chat = LiffChatContext()
                    self.chat.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.squareChat = LiffSquareChatContext()
                    self.squareChat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LiffContext')
        if self.none is not None:
            oprot.writeFieldBegin('none', TType.STRUCT, 1)
            self.none.write(oprot)
            oprot.writeFieldEnd()
        if self.chat is not None:
            oprot.writeFieldBegin('chat', TType.STRUCT, 2)
            self.chat.write(oprot)
            oprot.writeFieldEnd()
        if self.squareChat is not None:
            oprot.writeFieldBegin('squareChat', TType.STRUCT, 3)
            self.squareChat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiffAdvertisingId(object):
    """
    Attributes:
     - advertisingId
     - tracking

    """


    def __init__(self, advertisingId=None, tracking=None,):
        self.advertisingId = advertisingId
        self.tracking = tracking

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.advertisingId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.tracking = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LiffAdvertisingId')
        if self.advertisingId is not None:
            oprot.writeFieldBegin('advertisingId', TType.STRING, 1)
            oprot.writeString(self.advertisingId.encode('utf-8') if sys.version_info[0] == 2 else self.advertisingId)
            oprot.writeFieldEnd()
        if self.tracking is not None:
            oprot.writeFieldBegin('tracking', TType.BOOL, 2)
            oprot.writeBool(self.tracking)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiffDeviceSetting(object):
    """
    Attributes:
     - videoAutoPlayAllowed
     - advertisingId

    """


    def __init__(self, videoAutoPlayAllowed=None, advertisingId=None,):
        self.videoAutoPlayAllowed = videoAutoPlayAllowed
        self.advertisingId = advertisingId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.videoAutoPlayAllowed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.advertisingId = LiffAdvertisingId()
                    self.advertisingId.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LiffDeviceSetting')
        if self.videoAutoPlayAllowed is not None:
            oprot.writeFieldBegin('videoAutoPlayAllowed', TType.BOOL, 1)
            oprot.writeBool(self.videoAutoPlayAllowed)
            oprot.writeFieldEnd()
        if self.advertisingId is not None:
            oprot.writeFieldBegin('advertisingId', TType.STRUCT, 2)
            self.advertisingId.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiffViewRequest(object):
    """
    Attributes:
     - liffId
     - context
     - lang
     - deviceSetting

    """


    def __init__(self, liffId=None, context=None, lang=None, deviceSetting=None,):
        self.liffId = liffId
        self.context = context
        self.lang = lang
        self.deviceSetting = deviceSetting

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.liffId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.context = LiffContext()
                    self.context.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.lang = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.deviceSetting = LiffDeviceSetting()
                    self.deviceSetting.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LiffViewRequest')
        if self.liffId is not None:
            oprot.writeFieldBegin('liffId', TType.STRING, 1)
            oprot.writeString(self.liffId.encode('utf-8') if sys.version_info[0] == 2 else self.liffId)
            oprot.writeFieldEnd()
        if self.context is not None:
            oprot.writeFieldBegin('context', TType.STRUCT, 2)
            self.context.write(oprot)
            oprot.writeFieldEnd()
        if self.lang is not None:
            oprot.writeFieldBegin('lang', TType.STRING, 3)
            oprot.writeString(self.lang.encode('utf-8') if sys.version_info[0] == 2 else self.lang)
            oprot.writeFieldEnd()
        if self.deviceSetting is not None:
            oprot.writeFieldBegin('deviceSetting', TType.STRUCT, 4)
            self.deviceSetting.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiffView(object):
    """
    Attributes:
     - type
     - url
     - titleTextColor
     - titleBackgroundColor
     - titleIconUrl
     - titleSubtextColor
     - titleButtonColor
     - progressBarColor
     - progressBackgroundColor
     - trustedDomain
     - suspendable
     - maxBrightness
     - titleButtonAreaBackgroundColor
     - titleButtonAreaBorderColor
     - suspendableV2
     - menuStyle
     - moduleMode
     - pinToHomeServiceId

    """


    def __init__(self, type=None, url=None, titleTextColor=None, titleBackgroundColor=None, titleIconUrl=None, titleSubtextColor=None, titleButtonColor=None, progressBarColor=None, progressBackgroundColor=None, trustedDomain=None, suspendable=None, maxBrightness=None, titleButtonAreaBackgroundColor=None, titleButtonAreaBorderColor=None, suspendableV2=None, menuStyle=None, moduleMode=None, pinToHomeServiceId=None,):
        self.type = type
        self.url = url
        self.titleTextColor = titleTextColor
        self.titleBackgroundColor = titleBackgroundColor
        self.titleIconUrl = titleIconUrl
        self.titleSubtextColor = titleSubtextColor
        self.titleButtonColor = titleButtonColor
        self.progressBarColor = progressBarColor
        self.progressBackgroundColor = progressBackgroundColor
        self.trustedDomain = trustedDomain
        self.suspendable = suspendable
        self.maxBrightness = maxBrightness
        self.titleButtonAreaBackgroundColor = titleButtonAreaBackgroundColor
        self.titleButtonAreaBorderColor = titleButtonAreaBorderColor
        self.suspendableV2 = suspendableV2
        self.menuStyle = menuStyle
        self.moduleMode = moduleMode
        self.pinToHomeServiceId = pinToHomeServiceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.titleTextColor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.titleBackgroundColor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.titleIconUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.titleSubtextColor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.titleButtonColor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.progressBarColor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.progressBackgroundColor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.trustedDomain = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.suspendable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.maxBrightness = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.titleButtonAreaBackgroundColor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.titleButtonAreaBorderColor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.suspendableV2 = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.menuStyle = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.BOOL:
                    self.moduleMode = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.pinToHomeServiceId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LiffView')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 2)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.titleTextColor is not None:
            oprot.writeFieldBegin('titleTextColor', TType.I32, 4)
            oprot.writeI32(self.titleTextColor)
            oprot.writeFieldEnd()
        if self.titleBackgroundColor is not None:
            oprot.writeFieldBegin('titleBackgroundColor', TType.I32, 5)
            oprot.writeI32(self.titleBackgroundColor)
            oprot.writeFieldEnd()
        if self.titleIconUrl is not None:
            oprot.writeFieldBegin('titleIconUrl', TType.STRING, 6)
            oprot.writeString(self.titleIconUrl.encode('utf-8') if sys.version_info[0] == 2 else self.titleIconUrl)
            oprot.writeFieldEnd()
        if self.titleSubtextColor is not None:
            oprot.writeFieldBegin('titleSubtextColor', TType.I32, 7)
            oprot.writeI32(self.titleSubtextColor)
            oprot.writeFieldEnd()
        if self.titleButtonColor is not None:
            oprot.writeFieldBegin('titleButtonColor', TType.I32, 8)
            oprot.writeI32(self.titleButtonColor)
            oprot.writeFieldEnd()
        if self.progressBarColor is not None:
            oprot.writeFieldBegin('progressBarColor', TType.I32, 9)
            oprot.writeI32(self.progressBarColor)
            oprot.writeFieldEnd()
        if self.progressBackgroundColor is not None:
            oprot.writeFieldBegin('progressBackgroundColor', TType.I32, 10)
            oprot.writeI32(self.progressBackgroundColor)
            oprot.writeFieldEnd()
        if self.trustedDomain is not None:
            oprot.writeFieldBegin('trustedDomain', TType.BOOL, 11)
            oprot.writeBool(self.trustedDomain)
            oprot.writeFieldEnd()
        if self.suspendable is not None:
            oprot.writeFieldBegin('suspendable', TType.BOOL, 12)
            oprot.writeBool(self.suspendable)
            oprot.writeFieldEnd()
        if self.maxBrightness is not None:
            oprot.writeFieldBegin('maxBrightness', TType.BOOL, 13)
            oprot.writeBool(self.maxBrightness)
            oprot.writeFieldEnd()
        if self.titleButtonAreaBackgroundColor is not None:
            oprot.writeFieldBegin('titleButtonAreaBackgroundColor', TType.I32, 14)
            oprot.writeI32(self.titleButtonAreaBackgroundColor)
            oprot.writeFieldEnd()
        if self.titleButtonAreaBorderColor is not None:
            oprot.writeFieldBegin('titleButtonAreaBorderColor', TType.I32, 15)
            oprot.writeI32(self.titleButtonAreaBorderColor)
            oprot.writeFieldEnd()
        if self.suspendableV2 is not None:
            oprot.writeFieldBegin('suspendableV2', TType.BOOL, 16)
            oprot.writeBool(self.suspendableV2)
            oprot.writeFieldEnd()
        if self.menuStyle is not None:
            oprot.writeFieldBegin('menuStyle', TType.I32, 17)
            oprot.writeI32(self.menuStyle)
            oprot.writeFieldEnd()
        if self.moduleMode is not None:
            oprot.writeFieldBegin('moduleMode', TType.BOOL, 18)
            oprot.writeBool(self.moduleMode)
            oprot.writeFieldEnd()
        if self.pinToHomeServiceId is not None:
            oprot.writeFieldBegin('pinToHomeServiceId', TType.I32, 19)
            oprot.writeI32(self.pinToHomeServiceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiffViewResponse(object):
    """
    Attributes:
     - view
     - contextToken
     - accessToken
     - featureToken
     - features
     - channelId
     - idToken
     - scopes
     - launchOptions

    """


    def __init__(self, view=None, contextToken=None, accessToken=None, featureToken=None, features=None, channelId=None, idToken=None, scopes=None, launchOptions=None,):
        self.view = view
        self.contextToken = contextToken
        self.accessToken = accessToken
        self.featureToken = featureToken
        self.features = features
        self.channelId = channelId
        self.idToken = idToken
        self.scopes = scopes
        self.launchOptions = launchOptions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.view = LiffView()
                    self.view.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.contextToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.accessToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.featureToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.features = []
                    (_etype149, _size146) = iprot.readListBegin()
                    for _i150 in range(_size146):
                        _elem151 = iprot.readI32()
                        self.features.append(_elem151)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.idToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.scopes = []
                    (_etype155, _size152) = iprot.readListBegin()
                    for _i156 in range(_size152):
                        _elem157 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.scopes.append(_elem157)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.launchOptions = []
                    (_etype161, _size158) = iprot.readListBegin()
                    for _i162 in range(_size158):
                        _elem163 = iprot.readI32()
                        self.launchOptions.append(_elem163)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LiffViewResponse')
        if self.view is not None:
            oprot.writeFieldBegin('view', TType.STRUCT, 1)
            self.view.write(oprot)
            oprot.writeFieldEnd()
        if self.contextToken is not None:
            oprot.writeFieldBegin('contextToken', TType.STRING, 2)
            oprot.writeString(self.contextToken.encode('utf-8') if sys.version_info[0] == 2 else self.contextToken)
            oprot.writeFieldEnd()
        if self.accessToken is not None:
            oprot.writeFieldBegin('accessToken', TType.STRING, 3)
            oprot.writeString(self.accessToken.encode('utf-8') if sys.version_info[0] == 2 else self.accessToken)
            oprot.writeFieldEnd()
        if self.featureToken is not None:
            oprot.writeFieldBegin('featureToken', TType.STRING, 4)
            oprot.writeString(self.featureToken.encode('utf-8') if sys.version_info[0] == 2 else self.featureToken)
            oprot.writeFieldEnd()
        if self.features is not None:
            oprot.writeFieldBegin('features', TType.LIST, 5)
            oprot.writeListBegin(TType.I32, len(self.features))
            for iter164 in self.features:
                oprot.writeI32(iter164)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 6)
            oprot.writeString(self.channelId.encode('utf-8') if sys.version_info[0] == 2 else self.channelId)
            oprot.writeFieldEnd()
        if self.idToken is not None:
            oprot.writeFieldBegin('idToken', TType.STRING, 7)
            oprot.writeString(self.idToken.encode('utf-8') if sys.version_info[0] == 2 else self.idToken)
            oprot.writeFieldEnd()
        if self.scopes is not None:
            oprot.writeFieldBegin('scopes', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.scopes))
            for iter165 in self.scopes:
                oprot.writeString(iter165.encode('utf-8') if sys.version_info[0] == 2 else iter165)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.launchOptions is not None:
            oprot.writeFieldBegin('launchOptions', TType.LIST, 9)
            oprot.writeListBegin(TType.I32, len(self.launchOptions))
            for iter166 in self.launchOptions:
                oprot.writeI32(iter166)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiffRevokeTokenRequest(object):
    """
    Attributes:
     - accessToken

    """


    def __init__(self, accessToken=None,):
        self.accessToken = accessToken

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.accessToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LiffRevokeTokenRequest')
        if self.accessToken is not None:
            oprot.writeFieldBegin('accessToken', TType.STRING, 1)
            oprot.writeString(self.accessToken.encode('utf-8') if sys.version_info[0] == 2 else self.accessToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiffErrorConsentRequired(object):
    """
    Attributes:
     - channelId
     - consentUrl

    """


    def __init__(self, channelId=None, consentUrl=None,):
        self.channelId = channelId
        self.consentUrl = consentUrl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.consentUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LiffErrorConsentRequired')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId.encode('utf-8') if sys.version_info[0] == 2 else self.channelId)
            oprot.writeFieldEnd()
        if self.consentUrl is not None:
            oprot.writeFieldBegin('consentUrl', TType.STRING, 2)
            oprot.writeString(self.consentUrl.encode('utf-8') if sys.version_info[0] == 2 else self.consentUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LiffErrorPayload(object):
    """
    Attributes:
     - consentRequired

    """


    def __init__(self, consentRequired=None,):
        self.consentRequired = consentRequired

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 3:
                if ftype == TType.STRUCT:
                    self.consentRequired = LiffErrorConsentRequired()
                    self.consentRequired.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LiffErrorPayload')
        if self.consentRequired is not None:
            oprot.writeFieldBegin('consentRequired', TType.STRUCT, 3)
            self.consentRequired.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoginRequest(object):
    """
    Attributes:
     - type
     - identityProvider
     - identifier
     - password
     - keepLoggedIn
     - accessLocation
     - systemName
     - certificate
     - verifier
     - secret
     - e2eeVersion

    """


    def __init__(self, type=None, identityProvider=None, identifier=None, password=None, keepLoggedIn=None, accessLocation=None, systemName=None, certificate=None, verifier=None, secret=None, e2eeVersion=None,):
        self.type = type
        self.identityProvider = identityProvider
        self.identifier = identifier
        self.password = password
        self.keepLoggedIn = keepLoggedIn
        self.accessLocation = accessLocation
        self.systemName = systemName
        self.certificate = certificate
        self.verifier = verifier
        self.secret = secret
        self.e2eeVersion = e2eeVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.identityProvider = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.identifier = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.keepLoggedIn = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.accessLocation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.systemName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.certificate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.verifier = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.secret = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.e2eeVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginRequest')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.identityProvider is not None:
            oprot.writeFieldBegin('identityProvider', TType.I32, 2)
            oprot.writeI32(self.identityProvider)
            oprot.writeFieldEnd()
        if self.identifier is not None:
            oprot.writeFieldBegin('identifier', TType.STRING, 3)
            oprot.writeString(self.identifier.encode('utf-8') if sys.version_info[0] == 2 else self.identifier)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 4)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.keepLoggedIn is not None:
            oprot.writeFieldBegin('keepLoggedIn', TType.BOOL, 5)
            oprot.writeBool(self.keepLoggedIn)
            oprot.writeFieldEnd()
        if self.accessLocation is not None:
            oprot.writeFieldBegin('accessLocation', TType.STRING, 6)
            oprot.writeString(self.accessLocation.encode('utf-8') if sys.version_info[0] == 2 else self.accessLocation)
            oprot.writeFieldEnd()
        if self.systemName is not None:
            oprot.writeFieldBegin('systemName', TType.STRING, 7)
            oprot.writeString(self.systemName.encode('utf-8') if sys.version_info[0] == 2 else self.systemName)
            oprot.writeFieldEnd()
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRING, 8)
            oprot.writeString(self.certificate.encode('utf-8') if sys.version_info[0] == 2 else self.certificate)
            oprot.writeFieldEnd()
        if self.verifier is not None:
            oprot.writeFieldBegin('verifier', TType.STRING, 9)
            oprot.writeString(self.verifier.encode('utf-8') if sys.version_info[0] == 2 else self.verifier)
            oprot.writeFieldEnd()
        if self.secret is not None:
            oprot.writeFieldBegin('secret', TType.STRING, 10)
            oprot.writeBinary(self.secret)
            oprot.writeFieldEnd()
        if self.e2eeVersion is not None:
            oprot.writeFieldBegin('e2eeVersion', TType.I32, 11)
            oprot.writeI32(self.e2eeVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoginResult(object):
    """
    Attributes:
     - authToken
     - certificate
     - verifier
     - pinCode
     - type
     - lastPrimaryBindTime
     - displayMessage
     - sessionForSMSConfirm
     - tokenIssueResult

    """


    def __init__(self, authToken=None, certificate=None, verifier=None, pinCode=None, type=None, lastPrimaryBindTime=None, displayMessage=None, sessionForSMSConfirm=None, tokenIssueResult=None,):
        self.authToken = authToken
        self.certificate = certificate
        self.verifier = verifier
        self.pinCode = pinCode
        self.type = type
        self.lastPrimaryBindTime = lastPrimaryBindTime
        self.displayMessage = displayMessage
        self.sessionForSMSConfirm = sessionForSMSConfirm
        self.tokenIssueResult = tokenIssueResult

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.certificate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.verifier = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.pinCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.lastPrimaryBindTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.displayMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.sessionForSMSConfirm = VerificationSessionData()
                    self.sessionForSMSConfirm.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.tokenIssueResult = TokenIssueResult()
                    self.tokenIssueResult.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LoginResult')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRING, 2)
            oprot.writeString(self.certificate.encode('utf-8') if sys.version_info[0] == 2 else self.certificate)
            oprot.writeFieldEnd()
        if self.verifier is not None:
            oprot.writeFieldBegin('verifier', TType.STRING, 3)
            oprot.writeString(self.verifier.encode('utf-8') if sys.version_info[0] == 2 else self.verifier)
            oprot.writeFieldEnd()
        if self.pinCode is not None:
            oprot.writeFieldBegin('pinCode', TType.STRING, 4)
            oprot.writeString(self.pinCode.encode('utf-8') if sys.version_info[0] == 2 else self.pinCode)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 5)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.lastPrimaryBindTime is not None:
            oprot.writeFieldBegin('lastPrimaryBindTime', TType.I64, 6)
            oprot.writeI64(self.lastPrimaryBindTime)
            oprot.writeFieldEnd()
        if self.displayMessage is not None:
            oprot.writeFieldBegin('displayMessage', TType.STRING, 7)
            oprot.writeString(self.displayMessage.encode('utf-8') if sys.version_info[0] == 2 else self.displayMessage)
            oprot.writeFieldEnd()
        if self.sessionForSMSConfirm is not None:
            oprot.writeFieldBegin('sessionForSMSConfirm', TType.STRUCT, 8)
            self.sessionForSMSConfirm.write(oprot)
            oprot.writeFieldEnd()
        if self.tokenIssueResult is not None:
            oprot.writeFieldBegin('tokenIssueResult', TType.STRUCT, 9)
            self.tokenIssueResult.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DeviceInfo(object):
    """
    Attributes:
     - deviceName
     - systemName
     - systemVersion
     - model
     - webViewVersion
     - carrierCode
     - carrierName
     - applicationType

    """


    def __init__(self, deviceName=None, systemName=None, systemVersion=None, model=None, webViewVersion=None, carrierCode=None, carrierName=None, applicationType=None,):
        self.deviceName = deviceName
        self.systemName = systemName
        self.systemVersion = systemVersion
        self.model = model
        self.webViewVersion = webViewVersion
        self.carrierCode = carrierCode
        self.carrierName = carrierName
        self.applicationType = applicationType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.systemName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.systemVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.model = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.webViewVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.carrierCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.carrierName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.I32:
                    self.applicationType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeviceInfo')
        if self.deviceName is not None:
            oprot.writeFieldBegin('deviceName', TType.STRING, 1)
            oprot.writeString(self.deviceName.encode('utf-8') if sys.version_info[0] == 2 else self.deviceName)
            oprot.writeFieldEnd()
        if self.systemName is not None:
            oprot.writeFieldBegin('systemName', TType.STRING, 2)
            oprot.writeString(self.systemName.encode('utf-8') if sys.version_info[0] == 2 else self.systemName)
            oprot.writeFieldEnd()
        if self.systemVersion is not None:
            oprot.writeFieldBegin('systemVersion', TType.STRING, 3)
            oprot.writeString(self.systemVersion.encode('utf-8') if sys.version_info[0] == 2 else self.systemVersion)
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.STRING, 4)
            oprot.writeString(self.model.encode('utf-8') if sys.version_info[0] == 2 else self.model)
            oprot.writeFieldEnd()
        if self.webViewVersion is not None:
            oprot.writeFieldBegin('webViewVersion', TType.STRING, 5)
            oprot.writeString(self.webViewVersion.encode('utf-8') if sys.version_info[0] == 2 else self.webViewVersion)
            oprot.writeFieldEnd()
        if self.carrierCode is not None:
            oprot.writeFieldBegin('carrierCode', TType.I32, 10)
            oprot.writeI32(self.carrierCode)
            oprot.writeFieldEnd()
        if self.carrierName is not None:
            oprot.writeFieldBegin('carrierName', TType.STRING, 11)
            oprot.writeString(self.carrierName.encode('utf-8') if sys.version_info[0] == 2 else self.carrierName)
            oprot.writeFieldEnd()
        if self.applicationType is not None:
            oprot.writeFieldBegin('applicationType', TType.I32, 20)
            oprot.writeI32(self.applicationType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenIssueResult(object):
    """
    Attributes:
     - accessToken
     - refreshToken
     - appId

    """


    def __init__(self, accessToken=None, refreshToken=None, appId=None,):
        self.accessToken = accessToken
        self.refreshToken = refreshToken
        self.appId = appId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.accessToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.refreshToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.appId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenIssueResult')
        if self.accessToken is not None:
            oprot.writeFieldBegin('accessToken', TType.STRING, 1)
            oprot.writeString(self.accessToken.encode('utf-8') if sys.version_info[0] == 2 else self.accessToken)
            oprot.writeFieldEnd()
        if self.refreshToken is not None:
            oprot.writeFieldBegin('refreshToken', TType.STRING, 2)
            oprot.writeString(self.refreshToken.encode('utf-8') if sys.version_info[0] == 2 else self.refreshToken)
            oprot.writeFieldEnd()
        if self.appId is not None:
            oprot.writeFieldBegin('appId', TType.STRING, 3)
            oprot.writeString(self.appId.encode('utf-8') if sys.version_info[0] == 2 else self.appId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AuthLoginRequest(object):
    """
    Attributes:
     - authLoginVersion
     - metaData
     - cipherText

    """


    def __init__(self, authLoginVersion=None, metaData=None, cipherText=None,):
        self.authLoginVersion = authLoginVersion
        self.metaData = metaData
        self.cipherText = cipherText

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.authLoginVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_ktype168, _vtype169, _size167) = iprot.readMapBegin()
                    for _i171 in range(_size167):
                        _key172 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val173 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.metaData[_key172] = _val173
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cipherText = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthLoginRequest')
        if self.authLoginVersion is not None:
            oprot.writeFieldBegin('authLoginVersion', TType.I32, 1)
            oprot.writeI32(self.authLoginVersion)
            oprot.writeFieldEnd()
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for kiter174, viter175 in self.metaData.items():
                oprot.writeString(kiter174.encode('utf-8') if sys.version_info[0] == 2 else kiter174)
                oprot.writeString(viter175.encode('utf-8') if sys.version_info[0] == 2 else viter175)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.cipherText is not None:
            oprot.writeFieldBegin('cipherText', TType.STRING, 3)
            oprot.writeString(self.cipherText.encode('utf-8') if sys.version_info[0] == 2 else self.cipherText)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AuthSessionRequest(object):
    """
    Attributes:
     - metaData

    """


    def __init__(self, metaData=None,):
        self.metaData = metaData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_ktype177, _vtype178, _size176) = iprot.readMapBegin()
                    for _i180 in range(_size176):
                        _key181 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val182 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.metaData[_key181] = _val182
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthSessionRequest')
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for kiter183, viter184 in self.metaData.items():
                oprot.writeString(kiter183.encode('utf-8') if sys.version_info[0] == 2 else kiter183)
                oprot.writeString(viter184.encode('utf-8') if sys.version_info[0] == 2 else viter184)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AuthLoginResponse(object):
    """
    Attributes:
     - metaData
     - cipherText

    """


    def __init__(self, metaData=None, cipherText=None,):
        self.metaData = metaData
        self.cipherText = cipherText

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_ktype186, _vtype187, _size185) = iprot.readMapBegin()
                    for _i189 in range(_size185):
                        _key190 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val191 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.metaData[_key190] = _val191
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cipherText = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthLoginResponse')
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for kiter192, viter193 in self.metaData.items():
                oprot.writeString(kiter192.encode('utf-8') if sys.version_info[0] == 2 else kiter192)
                oprot.writeString(viter193.encode('utf-8') if sys.version_info[0] == 2 else viter193)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.cipherText is not None:
            oprot.writeFieldBegin('cipherText', TType.STRING, 2)
            oprot.writeString(self.cipherText.encode('utf-8') if sys.version_info[0] == 2 else self.cipherText)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OpenSessionRequest(object):
    """
    Attributes:
     - metaData

    """


    def __init__(self, metaData=None,):
        self.metaData = metaData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_ktype195, _vtype196, _size194) = iprot.readMapBegin()
                    for _i198 in range(_size194):
                        _key199 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val200 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.metaData[_key199] = _val200
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OpenSessionRequest')
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for kiter201, viter202 in self.metaData.items():
                oprot.writeString(kiter201.encode('utf-8') if sys.version_info[0] == 2 else kiter201)
                oprot.writeString(viter202.encode('utf-8') if sys.version_info[0] == 2 else viter202)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OpenSessionResponse(object):
    """
    Attributes:
     - authSessionId

    """


    def __init__(self, authSessionId=None,):
        self.authSessionId = authSessionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('OpenSessionResponse')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId.encode('utf-8') if sys.version_info[0] == 2 else self.authSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AccountIdentifier(object):
    """
    Attributes:
     - type
     - identifier
     - countryCode

    """


    def __init__(self, type=None, identifier=None, countryCode=None,):
        self.type = type
        self.identifier = identifier
        self.countryCode = countryCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.identifier = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AccountIdentifier')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.identifier is not None:
            oprot.writeFieldBegin('identifier', TType.STRING, 2)
            oprot.writeString(self.identifier.encode('utf-8') if sys.version_info[0] == 2 else self.identifier)
            oprot.writeFieldEnd()
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 11)
            oprot.writeString(self.countryCode.encode('utf-8') if sys.version_info[0] == 2 else self.countryCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Device(object):
    """
    Attributes:
     - udid
     - deviceModel

    """


    def __init__(self, udid=None, deviceModel=None,):
        self.udid = udid
        self.deviceModel = deviceModel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.udid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceModel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Device')
        if self.udid is not None:
            oprot.writeFieldBegin('udid', TType.STRING, 1)
            oprot.writeString(self.udid.encode('utf-8') if sys.version_info[0] == 2 else self.udid)
            oprot.writeFieldEnd()
        if self.deviceModel is not None:
            oprot.writeFieldBegin('deviceModel', TType.STRING, 2)
            oprot.writeString(self.deviceModel.encode('utf-8') if sys.version_info[0] == 2 else self.deviceModel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SocialLogin(object):
    """
    Attributes:
     - type
     - accessToken
     - countryCode

    """


    def __init__(self, type=None, accessToken=None, countryCode=None,):
        self.type = type
        self.accessToken = accessToken
        self.countryCode = countryCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.accessToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SocialLogin')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.accessToken is not None:
            oprot.writeFieldBegin('accessToken', TType.STRING, 2)
            oprot.writeString(self.accessToken.encode('utf-8') if sys.version_info[0] == 2 else self.accessToken)
            oprot.writeFieldEnd()
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 3)
            oprot.writeString(self.countryCode.encode('utf-8') if sys.version_info[0] == 2 else self.countryCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VerifySocialLoginResponse(object):
    """
    Attributes:
     - accountExist
     - userProfile
     - sameUdidFromAccount

    """


    def __init__(self, accountExist=None, userProfile=None, sameUdidFromAccount=None,):
        self.accountExist = accountExist
        self.userProfile = userProfile
        self.sameUdidFromAccount = sameUdidFromAccount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.BOOL:
                    self.accountExist = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.userProfile = UserProfile()
                    self.userProfile.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BOOL:
                    self.sameUdidFromAccount = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VerifySocialLoginResponse')
        if self.accountExist is not None:
            oprot.writeFieldBegin('accountExist', TType.BOOL, 2)
            oprot.writeBool(self.accountExist)
            oprot.writeFieldEnd()
        if self.userProfile is not None:
            oprot.writeFieldBegin('userProfile', TType.STRUCT, 11)
            self.userProfile.write(oprot)
            oprot.writeFieldEnd()
        if self.sameUdidFromAccount is not None:
            oprot.writeFieldBegin('sameUdidFromAccount', TType.BOOL, 12)
            oprot.writeBool(self.sameUdidFromAccount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetAcctVerifMethodResponse(object):
    """
    Attributes:
     - availableMethod
     - sameAccountFromAuthFactor

    """


    def __init__(self, availableMethod=None, sameAccountFromAuthFactor=None,):
        self.availableMethod = availableMethod
        self.sameAccountFromAuthFactor = sameAccountFromAuthFactor

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.availableMethod = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.sameAccountFromAuthFactor = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetAcctVerifMethodResponse')
        if self.availableMethod is not None:
            oprot.writeFieldBegin('availableMethod', TType.I32, 1)
            oprot.writeI32(self.availableMethod)
            oprot.writeFieldEnd()
        if self.sameAccountFromAuthFactor is not None:
            oprot.writeFieldBegin('sameAccountFromAuthFactor', TType.BOOL, 2)
            oprot.writeBool(self.sameAccountFromAuthFactor)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetCountryInfoResponse(object):
    """
    Attributes:
     - countryCode
     - countryInEEA
     - countrySetOfEEA

    """


    def __init__(self, countryCode=None, countryInEEA=None, countrySetOfEEA=None,):
        self.countryCode = countryCode
        self.countryInEEA = countryInEEA
        self.countrySetOfEEA = countrySetOfEEA

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.countryInEEA = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.countrySetOfEEA = set()
                    (_etype206, _size203) = iprot.readSetBegin()
                    for _i207 in range(_size203):
                        _elem208 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.countrySetOfEEA.add(_elem208)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetCountryInfoResponse')
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 1)
            oprot.writeString(self.countryCode.encode('utf-8') if sys.version_info[0] == 2 else self.countryCode)
            oprot.writeFieldEnd()
        if self.countryInEEA is not None:
            oprot.writeFieldBegin('countryInEEA', TType.BOOL, 2)
            oprot.writeBool(self.countryInEEA)
            oprot.writeFieldEnd()
        if self.countrySetOfEEA is not None:
            oprot.writeFieldBegin('countrySetOfEEA', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.countrySetOfEEA))
            for iter209 in self.countrySetOfEEA:
                oprot.writeString(iter209.encode('utf-8') if sys.version_info[0] == 2 else iter209)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SimCard(object):
    """
    Attributes:
     - countryCode
     - hni
     - carrierName

    """


    def __init__(self, countryCode=None, hni=None, carrierName=None,):
        self.countryCode = countryCode
        self.hni = hni
        self.carrierName = carrierName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hni = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.carrierName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SimCard')
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 1)
            oprot.writeString(self.countryCode.encode('utf-8') if sys.version_info[0] == 2 else self.countryCode)
            oprot.writeFieldEnd()
        if self.hni is not None:
            oprot.writeFieldBegin('hni', TType.STRING, 2)
            oprot.writeString(self.hni.encode('utf-8') if sys.version_info[0] == 2 else self.hni)
            oprot.writeFieldEnd()
        if self.carrierName is not None:
            oprot.writeFieldBegin('carrierName', TType.STRING, 3)
            oprot.writeString(self.carrierName.encode('utf-8') if sys.version_info[0] == 2 else self.carrierName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EncryptedPassword(object):
    """
    Attributes:
     - encryptionKeyVersion
     - cipherText

    """


    def __init__(self, encryptionKeyVersion=None, cipherText=None,):
        self.encryptionKeyVersion = encryptionKeyVersion
        self.cipherText = cipherText

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.encryptionKeyVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cipherText = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EncryptedPassword')
        if self.encryptionKeyVersion is not None:
            oprot.writeFieldBegin('encryptionKeyVersion', TType.I32, 1)
            oprot.writeI32(self.encryptionKeyVersion)
            oprot.writeFieldEnd()
        if self.cipherText is not None:
            oprot.writeFieldBegin('cipherText', TType.STRING, 2)
            oprot.writeString(self.cipherText.encode('utf-8') if sys.version_info[0] == 2 else self.cipherText)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetPhoneVerifMethodResponse(object):
    """
    Attributes:
     - availableMethods
     - prettifiedPhoneNumber

    """


    def __init__(self, availableMethods=None, prettifiedPhoneNumber=None,):
        self.availableMethods = availableMethods
        self.prettifiedPhoneNumber = prettifiedPhoneNumber

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.availableMethods = []
                    (_etype213, _size210) = iprot.readListBegin()
                    for _i214 in range(_size210):
                        _elem215 = iprot.readI32()
                        self.availableMethods.append(_elem215)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.prettifiedPhoneNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetPhoneVerifMethodResponse')
        if self.availableMethods is not None:
            oprot.writeFieldBegin('availableMethods', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.availableMethods))
            for iter216 in self.availableMethods:
                oprot.writeI32(iter216)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.prettifiedPhoneNumber is not None:
            oprot.writeFieldBegin('prettifiedPhoneNumber', TType.STRING, 3)
            oprot.writeString(self.prettifiedPhoneNumber.encode('utf-8') if sys.version_info[0] == 2 else self.prettifiedPhoneNumber)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserPhoneNumber(object):
    """
    Attributes:
     - phoneNumber
     - countryCode

    """


    def __init__(self, phoneNumber=None, countryCode=None,):
        self.phoneNumber = phoneNumber
        self.countryCode = countryCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.phoneNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserPhoneNumber')
        if self.phoneNumber is not None:
            oprot.writeFieldBegin('phoneNumber', TType.STRING, 1)
            oprot.writeString(self.phoneNumber.encode('utf-8') if sys.version_info[0] == 2 else self.phoneNumber)
            oprot.writeFieldEnd()
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 2)
            oprot.writeString(self.countryCode.encode('utf-8') if sys.version_info[0] == 2 else self.countryCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SendPinCodeForPhoneResponse(object):
    """
    Attributes:
     - availableMethods

    """


    def __init__(self, availableMethods=None,):
        self.availableMethods = availableMethods

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.availableMethods = []
                    (_etype220, _size217) = iprot.readListBegin()
                    for _i221 in range(_size217):
                        _elem222 = iprot.readI32()
                        self.availableMethods.append(_elem222)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SendPinCodeForPhoneResponse')
        if self.availableMethods is not None:
            oprot.writeFieldBegin('availableMethods', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.availableMethods))
            for iter223 in self.availableMethods:
                oprot.writeI32(iter223)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VerifyPhoneResponse(object):
    """
    Attributes:
     - accountExist
     - sameUdidFromAccount
     - userProfile

    """


    def __init__(self, accountExist=None, sameUdidFromAccount=None, userProfile=None,):
        self.accountExist = accountExist
        self.sameUdidFromAccount = sameUdidFromAccount
        self.userProfile = userProfile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.BOOL:
                    self.accountExist = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.sameUdidFromAccount = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.userProfile = UserProfile()
                    self.userProfile.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VerifyPhoneResponse')
        if self.accountExist is not None:
            oprot.writeFieldBegin('accountExist', TType.BOOL, 2)
            oprot.writeBool(self.accountExist)
            oprot.writeFieldEnd()
        if self.sameUdidFromAccount is not None:
            oprot.writeFieldBegin('sameUdidFromAccount', TType.BOOL, 3)
            oprot.writeBool(self.sameUdidFromAccount)
            oprot.writeFieldEnd()
        if self.userProfile is not None:
            oprot.writeFieldBegin('userProfile', TType.STRUCT, 11)
            self.userProfile.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RegisterPrimaryResponse(object):
    """
    Attributes:
     - authToken

    """


    def __init__(self, authToken=None,):
        self.authToken = authToken

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RegisterPrimaryResponse')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MigratePrimaryResponse(object):
    """
    Attributes:
     - authToken

    """


    def __init__(self, authToken=None,):
        self.authToken = authToken

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MigratePrimaryResponse')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetSecondAuthMethodResponse(object):
    """
    Attributes:
     - secondAuthMethod

    """


    def __init__(self, secondAuthMethod=None,):
        self.secondAuthMethod = secondAuthMethod

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.secondAuthMethod = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetSecondAuthMethodResponse')
        if self.secondAuthMethod is not None:
            oprot.writeFieldBegin('secondAuthMethod', TType.I32, 1)
            oprot.writeI32(self.secondAuthMethod)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WebAuthDetails(object):
    """
    Attributes:
     - baseUrl
     - token

    """


    def __init__(self, baseUrl=None, token=None,):
        self.baseUrl = baseUrl
        self.token = token

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.baseUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.token = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WebAuthDetails')
        if self.baseUrl is not None:
            oprot.writeFieldBegin('baseUrl', TType.STRING, 1)
            oprot.writeString(self.baseUrl.encode('utf-8') if sys.version_info[0] == 2 else self.baseUrl)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 2)
            oprot.writeString(self.token.encode('utf-8') if sys.version_info[0] == 2 else self.token)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IssueWebAuthDetailsForSecondAuthResponse(object):
    """
    Attributes:
     - webAuthDetails

    """


    def __init__(self, webAuthDetails=None,):
        self.webAuthDetails = webAuthDetails

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.webAuthDetails = WebAuthDetails()
                    self.webAuthDetails.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IssueWebAuthDetailsForSecondAuthResponse')
        if self.webAuthDetails is not None:
            oprot.writeFieldBegin('webAuthDetails', TType.STRUCT, 1)
            self.webAuthDetails.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IssueWebAuthDetailsForAcctVerifResponse(object):
    """
    Attributes:
     - webAuthDetails

    """


    def __init__(self, webAuthDetails=None,):
        self.webAuthDetails = webAuthDetails

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.webAuthDetails = WebAuthDetails()
                    self.webAuthDetails.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IssueWebAuthDetailsForAcctVerifResponse')
        if self.webAuthDetails is not None:
            oprot.writeFieldBegin('webAuthDetails', TType.STRUCT, 1)
            self.webAuthDetails.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserProfile(object):
    """
    Attributes:
     - displayName
     - profileImageUrl

    """


    def __init__(self, displayName=None, profileImageUrl=None,):
        self.displayName = displayName
        self.profileImageUrl = profileImageUrl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.profileImageUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserProfile')
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 1)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.profileImageUrl is not None:
            oprot.writeFieldBegin('profileImageUrl', TType.STRING, 2)
            oprot.writeString(self.profileImageUrl.encode('utf-8') if sys.version_info[0] == 2 else self.profileImageUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VerifyAccountUsingPwdResponse(object):
    """
    Attributes:
     - userProfile

    """


    def __init__(self, userProfile=None,):
        self.userProfile = userProfile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 2:
                if ftype == TType.STRUCT:
                    self.userProfile = UserProfile()
                    self.userProfile.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VerifyAccountUsingPwdResponse')
        if self.userProfile is not None:
            oprot.writeFieldBegin('userProfile', TType.STRUCT, 2)
            self.userProfile.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SetPasswordResponse(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SetPasswordResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExchangeEncryptionKeyResponse(object):
    """
    Attributes:
     - publicKey
     - nonce

    """


    def __init__(self, publicKey=None, nonce=None,):
        self.publicKey = publicKey
        self.nonce = nonce

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.publicKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nonce = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExchangeEncryptionKeyResponse')
        if self.publicKey is not None:
            oprot.writeFieldBegin('publicKey', TType.STRING, 1)
            oprot.writeString(self.publicKey.encode('utf-8') if sys.version_info[0] == 2 else self.publicKey)
            oprot.writeFieldEnd()
        if self.nonce is not None:
            oprot.writeFieldBegin('nonce', TType.STRING, 2)
            oprot.writeString(self.nonce.encode('utf-8') if sys.version_info[0] == 2 else self.nonce)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExchangeEncryptionKeyRequest(object):
    """
    Attributes:
     - authKeyVersion
     - publicKey
     - nonce

    """


    def __init__(self, authKeyVersion=None, publicKey=None, nonce=None,):
        self.authKeyVersion = authKeyVersion
        self.publicKey = publicKey
        self.nonce = nonce

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.authKeyVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.publicKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.nonce = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExchangeEncryptionKeyRequest')
        if self.authKeyVersion is not None:
            oprot.writeFieldBegin('authKeyVersion', TType.I32, 1)
            oprot.writeI32(self.authKeyVersion)
            oprot.writeFieldEnd()
        if self.publicKey is not None:
            oprot.writeFieldBegin('publicKey', TType.STRING, 2)
            oprot.writeString(self.publicKey.encode('utf-8') if sys.version_info[0] == 2 else self.publicKey)
            oprot.writeFieldEnd()
        if self.nonce is not None:
            oprot.writeFieldBegin('nonce', TType.STRING, 3)
            oprot.writeString(self.nonce.encode('utf-8') if sys.version_info[0] == 2 else self.nonce)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetUserProfileResponse(object):
    """
    Attributes:
     - userProfile

    """


    def __init__(self, userProfile=None,):
        self.userProfile = userProfile

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.userProfile = UserProfile()
                    self.userProfile.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetUserProfileResponse')
        if self.userProfile is not None:
            oprot.writeFieldBegin('userProfile', TType.STRUCT, 1)
            self.userProfile.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ValidateProfileResponse(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ValidateProfileResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SecurityCenterResult(object):
    """
    Attributes:
     - uri
     - token
     - cookiePath
     - skip

    """


    def __init__(self, uri=None, token=None, cookiePath=None, skip=None,):
        self.uri = uri
        self.token = token
        self.cookiePath = cookiePath
        self.skip = skip

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uri = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.token = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cookiePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.skip = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SecurityCenterResult')
        if self.uri is not None:
            oprot.writeFieldBegin('uri', TType.STRING, 1)
            oprot.writeString(self.uri.encode('utf-8') if sys.version_info[0] == 2 else self.uri)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 2)
            oprot.writeString(self.token.encode('utf-8') if sys.version_info[0] == 2 else self.token)
            oprot.writeFieldEnd()
        if self.cookiePath is not None:
            oprot.writeFieldBegin('cookiePath', TType.STRING, 3)
            oprot.writeString(self.cookiePath.encode('utf-8') if sys.version_info[0] == 2 else self.cookiePath)
            oprot.writeFieldEnd()
        if self.skip is not None:
            oprot.writeFieldBegin('skip', TType.BOOL, 4)
            oprot.writeBool(self.skip)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IdentityCredentialResponse(object):
    """
    Attributes:
     - metaData
     - responseType
     - confirmationVerifier
     - timeoutInSeconds

    """


    def __init__(self, metaData=None, responseType=None, confirmationVerifier=None, timeoutInSeconds=None,):
        self.metaData = metaData
        self.responseType = responseType
        self.confirmationVerifier = confirmationVerifier
        self.timeoutInSeconds = timeoutInSeconds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_ktype225, _vtype226, _size224) = iprot.readMapBegin()
                    for _i228 in range(_size224):
                        _key229 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val230 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.metaData[_key229] = _val230
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.responseType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.confirmationVerifier = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.timeoutInSeconds = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IdentityCredentialResponse')
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for kiter231, viter232 in self.metaData.items():
                oprot.writeString(kiter231.encode('utf-8') if sys.version_info[0] == 2 else kiter231)
                oprot.writeString(viter232.encode('utf-8') if sys.version_info[0] == 2 else viter232)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.responseType is not None:
            oprot.writeFieldBegin('responseType', TType.I32, 2)
            oprot.writeI32(self.responseType)
            oprot.writeFieldEnd()
        if self.confirmationVerifier is not None:
            oprot.writeFieldBegin('confirmationVerifier', TType.STRING, 3)
            oprot.writeString(self.confirmationVerifier.encode('utf-8') if sys.version_info[0] == 2 else self.confirmationVerifier)
            oprot.writeFieldEnd()
        if self.timeoutInSeconds is not None:
            oprot.writeFieldBegin('timeoutInSeconds', TType.I64, 4)
            oprot.writeI64(self.timeoutInSeconds)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IdentityCredential(object):
    """
    Attributes:
     - provider
     - identifier
     - password

    """


    def __init__(self, provider=None, identifier=None, password=None,):
        self.provider = provider
        self.identifier = identifier
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.provider = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.identifier = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IdentityCredential')
        if self.provider is not None:
            oprot.writeFieldBegin('provider', TType.I32, 1)
            oprot.writeI32(self.provider)
            oprot.writeFieldEnd()
        if self.identifier is not None:
            oprot.writeFieldBegin('identifier', TType.STRING, 2)
            oprot.writeString(self.identifier.encode('utf-8') if sys.version_info[0] == 2 else self.identifier)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IdentifierConfirmationRequest(object):
    """
    Attributes:
     - metaData
     - forceRegistration
     - verificationCode

    """


    def __init__(self, metaData=None, forceRegistration=None, verificationCode=None,):
        self.metaData = metaData
        self.forceRegistration = forceRegistration
        self.verificationCode = verificationCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_ktype234, _vtype235, _size233) = iprot.readMapBegin()
                    for _i237 in range(_size233):
                        _key238 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val239 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.metaData[_key238] = _val239
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.forceRegistration = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.verificationCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IdentifierConfirmationRequest')
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for kiter240, viter241 in self.metaData.items():
                oprot.writeString(kiter240.encode('utf-8') if sys.version_info[0] == 2 else kiter240)
                oprot.writeString(viter241.encode('utf-8') if sys.version_info[0] == 2 else viter241)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.forceRegistration is not None:
            oprot.writeFieldBegin('forceRegistration', TType.BOOL, 2)
            oprot.writeBool(self.forceRegistration)
            oprot.writeFieldEnd()
        if self.verificationCode is not None:
            oprot.writeFieldBegin('verificationCode', TType.STRING, 3)
            oprot.writeString(self.verificationCode.encode('utf-8') if sys.version_info[0] == 2 else self.verificationCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IdentityCredentialRequest(object):
    """
    Attributes:
     - metaData
     - identityProvider
     - cipherKeyId
     - cipherText
     - confirmationRequest

    """


    def __init__(self, metaData=None, identityProvider=None, cipherKeyId=None, cipherText=None, confirmationRequest=None,):
        self.metaData = metaData
        self.identityProvider = identityProvider
        self.cipherKeyId = cipherKeyId
        self.cipherText = cipherText
        self.confirmationRequest = confirmationRequest

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_ktype243, _vtype244, _size242) = iprot.readMapBegin()
                    for _i246 in range(_size242):
                        _key247 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val248 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.metaData[_key247] = _val248
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.identityProvider = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cipherKeyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.cipherText = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.confirmationRequest = IdentifierConfirmationRequest()
                    self.confirmationRequest.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('IdentityCredentialRequest')
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for kiter249, viter250 in self.metaData.items():
                oprot.writeString(kiter249.encode('utf-8') if sys.version_info[0] == 2 else kiter249)
                oprot.writeString(viter250.encode('utf-8') if sys.version_info[0] == 2 else viter250)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.identityProvider is not None:
            oprot.writeFieldBegin('identityProvider', TType.I32, 2)
            oprot.writeI32(self.identityProvider)
            oprot.writeFieldEnd()
        if self.cipherKeyId is not None:
            oprot.writeFieldBegin('cipherKeyId', TType.STRING, 3)
            oprot.writeString(self.cipherKeyId.encode('utf-8') if sys.version_info[0] == 2 else self.cipherKeyId)
            oprot.writeFieldEnd()
        if self.cipherText is not None:
            oprot.writeFieldBegin('cipherText', TType.STRING, 4)
            oprot.writeString(self.cipherText.encode('utf-8') if sys.version_info[0] == 2 else self.cipherText)
            oprot.writeFieldEnd()
        if self.confirmationRequest is not None:
            oprot.writeFieldBegin('confirmationRequest', TType.STRUCT, 5)
            self.confirmationRequest.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AuthKeyExchangeResponse(object):
    """
    Attributes:
     - publicKey
     - nonce

    """


    def __init__(self, publicKey=None, nonce=None,):
        self.publicKey = publicKey
        self.nonce = nonce

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.publicKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nonce = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthKeyExchangeResponse')
        if self.publicKey is not None:
            oprot.writeFieldBegin('publicKey', TType.STRING, 1)
            oprot.writeString(self.publicKey.encode('utf-8') if sys.version_info[0] == 2 else self.publicKey)
            oprot.writeFieldEnd()
        if self.nonce is not None:
            oprot.writeFieldBegin('nonce', TType.STRING, 2)
            oprot.writeString(self.nonce.encode('utf-8') if sys.version_info[0] == 2 else self.nonce)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AuthKeyExchangeRequest(object):
    """
    Attributes:
     - authKeyVersion
     - publicKey
     - nonce

    """


    def __init__(self, authKeyVersion=None, publicKey=None, nonce=None,):
        self.authKeyVersion = authKeyVersion
        self.publicKey = publicKey
        self.nonce = nonce

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.authKeyVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.publicKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.nonce = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthKeyExchangeRequest')
        if self.authKeyVersion is not None:
            oprot.writeFieldBegin('authKeyVersion', TType.I32, 1)
            oprot.writeI32(self.authKeyVersion)
            oprot.writeFieldEnd()
        if self.publicKey is not None:
            oprot.writeFieldBegin('publicKey', TType.STRING, 2)
            oprot.writeString(self.publicKey.encode('utf-8') if sys.version_info[0] == 2 else self.publicKey)
            oprot.writeFieldEnd()
        if self.nonce is not None:
            oprot.writeFieldBegin('nonce', TType.STRING, 3)
            oprot.writeString(self.nonce.encode('utf-8') if sys.version_info[0] == 2 else self.nonce)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Configurations(object):
    """
    Attributes:
     - revision
     - configMap

    """


    def __init__(self, revision=None, configMap=None,):
        self.revision = revision
        self.configMap = configMap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.configMap = {}
                    (_ktype252, _vtype253, _size251) = iprot.readMapBegin()
                    for _i255 in range(_size251):
                        _key256 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val257 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.configMap[_key256] = _val257
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Configurations')
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 1)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        if self.configMap is not None:
            oprot.writeFieldBegin('configMap', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.configMap))
            for kiter258, viter259 in self.configMap.items():
                oprot.writeString(kiter258.encode('utf-8') if sys.version_info[0] == 2 else kiter258)
                oprot.writeString(viter259.encode('utf-8') if sys.version_info[0] == 2 else viter259)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FriendRequest(object):
    """
    Attributes:
     - eMid
     - mid
     - direction
     - method
     - param
     - timestamp
     - seqId
     - displayName
     - picturePath
     - pictureStatus

    """


    def __init__(self, eMid=None, mid=None, direction=None, method=None, param=None, timestamp=None, seqId=None, displayName=None, picturePath=None, pictureStatus=None,):
        self.eMid = eMid
        self.mid = mid
        self.direction = direction
        self.method = method
        self.param = param
        self.timestamp = timestamp
        self.seqId = seqId
        self.displayName = displayName
        self.picturePath = picturePath
        self.pictureStatus = pictureStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.eMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.mid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.direction = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.method = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.param = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.seqId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.displayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FriendRequest')
        if self.eMid is not None:
            oprot.writeFieldBegin('eMid', TType.STRING, 1)
            oprot.writeString(self.eMid.encode('utf-8') if sys.version_info[0] == 2 else self.eMid)
            oprot.writeFieldEnd()
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 2)
            oprot.writeString(self.mid.encode('utf-8') if sys.version_info[0] == 2 else self.mid)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.I32, 3)
            oprot.writeI32(self.direction)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.I32, 4)
            oprot.writeI32(self.method)
            oprot.writeFieldEnd()
        if self.param is not None:
            oprot.writeFieldBegin('param', TType.STRING, 5)
            oprot.writeString(self.param.encode('utf-8') if sys.version_info[0] == 2 else self.param)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 6)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.seqId is not None:
            oprot.writeFieldBegin('seqId', TType.I64, 7)
            oprot.writeI64(self.seqId)
            oprot.writeFieldEnd()
        if self.displayName is not None:
            oprot.writeFieldBegin('displayName', TType.STRING, 10)
            oprot.writeString(self.displayName.encode('utf-8') if sys.version_info[0] == 2 else self.displayName)
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 11)
            oprot.writeString(self.picturePath.encode('utf-8') if sys.version_info[0] == 2 else self.picturePath)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 12)
            oprot.writeString(self.pictureStatus.encode('utf-8') if sys.version_info[0] == 2 else self.pictureStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FriendRequestsInfo(object):
    """
    Attributes:
     - totalIncomingCount
     - totalOutgoingCount
     - recentIncomings
     - recentOutgoings
     - totalIncomingLimit
     - totalOutgoingLimit

    """


    def __init__(self, totalIncomingCount=None, totalOutgoingCount=None, recentIncomings=None, recentOutgoings=None, totalIncomingLimit=None, totalOutgoingLimit=None,):
        self.totalIncomingCount = totalIncomingCount
        self.totalOutgoingCount = totalOutgoingCount
        self.recentIncomings = recentIncomings
        self.recentOutgoings = recentOutgoings
        self.totalIncomingLimit = totalIncomingLimit
        self.totalOutgoingLimit = totalOutgoingLimit

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.totalIncomingCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.totalOutgoingCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.recentIncomings = []
                    (_etype263, _size260) = iprot.readListBegin()
                    for _i264 in range(_size260):
                        _elem265 = FriendRequest()
                        _elem265.read(iprot)
                        self.recentIncomings.append(_elem265)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.recentOutgoings = []
                    (_etype269, _size266) = iprot.readListBegin()
                    for _i270 in range(_size266):
                        _elem271 = FriendRequest()
                        _elem271.read(iprot)
                        self.recentOutgoings.append(_elem271)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.totalIncomingLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.totalOutgoingLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FriendRequestsInfo')
        if self.totalIncomingCount is not None:
            oprot.writeFieldBegin('totalIncomingCount', TType.I32, 1)
            oprot.writeI32(self.totalIncomingCount)
            oprot.writeFieldEnd()
        if self.totalOutgoingCount is not None:
            oprot.writeFieldBegin('totalOutgoingCount', TType.I32, 2)
            oprot.writeI32(self.totalOutgoingCount)
            oprot.writeFieldEnd()
        if self.recentIncomings is not None:
            oprot.writeFieldBegin('recentIncomings', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.recentIncomings))
            for iter272 in self.recentIncomings:
                iter272.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.recentOutgoings is not None:
            oprot.writeFieldBegin('recentOutgoings', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.recentOutgoings))
            for iter273 in self.recentOutgoings:
                iter273.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.totalIncomingLimit is not None:
            oprot.writeFieldBegin('totalIncomingLimit', TType.I32, 5)
            oprot.writeI32(self.totalIncomingLimit)
            oprot.writeFieldEnd()
        if self.totalOutgoingLimit is not None:
            oprot.writeFieldBegin('totalOutgoingLimit', TType.I32, 6)
            oprot.writeI32(self.totalOutgoingLimit)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Ringtone(object):
    """
    Attributes:
     - title
     - artist
     - oid
     - channelId

    """


    def __init__(self, title=None, artist=None, oid=None, channelId=None,):
        self.title = title
        self.artist = artist
        self.oid = oid
        self.channelId = channelId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.artist = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.oid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Ringtone')
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 1)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.artist is not None:
            oprot.writeFieldBegin('artist', TType.STRING, 2)
            oprot.writeString(self.artist.encode('utf-8') if sys.version_info[0] == 2 else self.artist)
            oprot.writeFieldEnd()
        if self.oid is not None:
            oprot.writeFieldBegin('oid', TType.STRING, 3)
            oprot.writeString(self.oid.encode('utf-8') if sys.version_info[0] == 2 else self.oid)
            oprot.writeFieldEnd()
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 4)
            oprot.writeString(self.channelId.encode('utf-8') if sys.version_info[0] == 2 else self.channelId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RingbackTone(object):
    """
    Attributes:
     - uuid
     - trackId
     - title
     - oid
     - tids
     - sid
     - artist
     - channelId

    """


    def __init__(self, uuid=None, trackId=None, title=None, oid=None, tids=None, sid=None, artist=None, channelId=None,):
        self.uuid = uuid
        self.trackId = trackId
        self.title = title
        self.oid = oid
        self.tids = tids
        self.sid = sid
        self.artist = artist
        self.channelId = channelId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uuid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.trackId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.oid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.tids = {}
                    (_ktype275, _vtype276, _size274) = iprot.readMapBegin()
                    for _i278 in range(_size274):
                        _key279 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val280 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.tids[_key279] = _val280
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.sid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.artist = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RingbackTone')
        if self.uuid is not None:
            oprot.writeFieldBegin('uuid', TType.STRING, 1)
            oprot.writeString(self.uuid.encode('utf-8') if sys.version_info[0] == 2 else self.uuid)
            oprot.writeFieldEnd()
        if self.trackId is not None:
            oprot.writeFieldBegin('trackId', TType.STRING, 2)
            oprot.writeString(self.trackId.encode('utf-8') if sys.version_info[0] == 2 else self.trackId)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 3)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.oid is not None:
            oprot.writeFieldBegin('oid', TType.STRING, 4)
            oprot.writeString(self.oid.encode('utf-8') if sys.version_info[0] == 2 else self.oid)
            oprot.writeFieldEnd()
        if self.tids is not None:
            oprot.writeFieldBegin('tids', TType.MAP, 5)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.tids))
            for kiter281, viter282 in self.tids.items():
                oprot.writeString(kiter281.encode('utf-8') if sys.version_info[0] == 2 else kiter281)
                oprot.writeString(viter282.encode('utf-8') if sys.version_info[0] == 2 else viter282)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.sid is not None:
            oprot.writeFieldBegin('sid', TType.STRING, 6)
            oprot.writeString(self.sid.encode('utf-8') if sys.version_info[0] == 2 else self.sid)
            oprot.writeFieldEnd()
        if self.artist is not None:
            oprot.writeFieldBegin('artist', TType.STRING, 7)
            oprot.writeString(self.artist.encode('utf-8') if sys.version_info[0] == 2 else self.artist)
            oprot.writeFieldEnd()
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 8)
            oprot.writeString(self.channelId.encode('utf-8') if sys.version_info[0] == 2 else self.channelId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClientNetworkStatus(object):
    """
    Attributes:
     - networkType

    """


    def __init__(self, networkType=None,):
        self.networkType = networkType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.networkType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ClientNetworkStatus')
        if self.networkType is not None:
            oprot.writeFieldBegin('networkType', TType.I32, 1)
            oprot.writeI32(self.networkType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MessageBoxV2MessageId(object):
    """
    Attributes:
     - deliveredTime
     - messageId

    """


    def __init__(self, deliveredTime=None, messageId=None,):
        self.deliveredTime = deliveredTime
        self.messageId = messageId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.deliveredTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.messageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MessageBoxV2MessageId')
        if self.deliveredTime is not None:
            oprot.writeFieldBegin('deliveredTime', TType.I64, 1)
            oprot.writeI64(self.deliveredTime)
            oprot.writeFieldEnd()
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.I64, 2)
            oprot.writeI64(self.messageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExtendedMessageBox(object):
    """
    Attributes:
     - id
     - midType
     - lastDeliveredMessageId
     - lastSeenMessageId
     - unreadCount
     - lastMessages
     - lastRemovedMessageId
     - lastRemovedTime

    """


    def __init__(self, id=None, midType=None, lastDeliveredMessageId=None, lastSeenMessageId=None, unreadCount=None, lastMessages=None, lastRemovedMessageId=None, lastRemovedTime=None,):
        self.id = id
        self.midType = midType
        self.lastDeliveredMessageId = lastDeliveredMessageId
        self.lastSeenMessageId = lastSeenMessageId
        self.unreadCount = unreadCount
        self.lastMessages = lastMessages
        self.lastRemovedMessageId = lastRemovedMessageId
        self.lastRemovedTime = lastRemovedTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.midType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.lastDeliveredMessageId = MessageBoxV2MessageId()
                    self.lastDeliveredMessageId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.lastSeenMessageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.unreadCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.lastMessages = []
                    (_etype286, _size283) = iprot.readListBegin()
                    for _i287 in range(_size283):
                        _elem288 = Message()
                        _elem288.read(iprot)
                        self.lastMessages.append(_elem288)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.lastRemovedMessageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.lastRemovedTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExtendedMessageBox')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.midType is not None:
            oprot.writeFieldBegin('midType', TType.I32, 2)
            oprot.writeI32(self.midType)
            oprot.writeFieldEnd()
        if self.lastDeliveredMessageId is not None:
            oprot.writeFieldBegin('lastDeliveredMessageId', TType.STRUCT, 4)
            self.lastDeliveredMessageId.write(oprot)
            oprot.writeFieldEnd()
        if self.lastSeenMessageId is not None:
            oprot.writeFieldBegin('lastSeenMessageId', TType.I64, 5)
            oprot.writeI64(self.lastSeenMessageId)
            oprot.writeFieldEnd()
        if self.unreadCount is not None:
            oprot.writeFieldBegin('unreadCount', TType.I64, 6)
            oprot.writeI64(self.unreadCount)
            oprot.writeFieldEnd()
        if self.lastMessages is not None:
            oprot.writeFieldBegin('lastMessages', TType.LIST, 7)
            oprot.writeListBegin(TType.STRUCT, len(self.lastMessages))
            for iter289 in self.lastMessages:
                iter289.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.lastRemovedMessageId is not None:
            oprot.writeFieldBegin('lastRemovedMessageId', TType.I64, 8)
            oprot.writeI64(self.lastRemovedMessageId)
            oprot.writeFieldEnd()
        if self.lastRemovedTime is not None:
            oprot.writeFieldBegin('lastRemovedTime', TType.I64, 9)
            oprot.writeI64(self.lastRemovedTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MessageBoxList(object):
    """
    Attributes:
     - messageBoxes
     - hasNext

    """


    def __init__(self, messageBoxes=None, hasNext=None,):
        self.messageBoxes = messageBoxes
        self.hasNext = hasNext

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.messageBoxes = []
                    (_etype293, _size290) = iprot.readListBegin()
                    for _i294 in range(_size290):
                        _elem295 = ExtendedMessageBox()
                        _elem295.read(iprot)
                        self.messageBoxes.append(_elem295)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.hasNext = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MessageBoxList')
        if self.messageBoxes is not None:
            oprot.writeFieldBegin('messageBoxes', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.messageBoxes))
            for iter296 in self.messageBoxes:
                iter296.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hasNext is not None:
            oprot.writeFieldBegin('hasNext', TType.BOOL, 2)
            oprot.writeBool(self.hasNext)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InstantNews(object):
    """
    Attributes:
     - newsId
     - newsService
     - ttlMillis
     - category
     - categoryBgColor
     - categoryColor
     - title
     - url
     - image

    """


    def __init__(self, newsId=None, newsService=None, ttlMillis=None, category=None, categoryBgColor=None, categoryColor=None, title=None, url=None, image=None,):
        self.newsId = newsId
        self.newsService = newsService
        self.ttlMillis = ttlMillis
        self.category = category
        self.categoryBgColor = categoryBgColor
        self.categoryColor = categoryColor
        self.title = title
        self.url = url
        self.image = image

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.newsId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.newsService = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.ttlMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.category = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.categoryBgColor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.categoryColor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.image = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InstantNews')
        if self.newsId is not None:
            oprot.writeFieldBegin('newsId', TType.I64, 1)
            oprot.writeI64(self.newsId)
            oprot.writeFieldEnd()
        if self.newsService is not None:
            oprot.writeFieldBegin('newsService', TType.STRING, 2)
            oprot.writeString(self.newsService.encode('utf-8') if sys.version_info[0] == 2 else self.newsService)
            oprot.writeFieldEnd()
        if self.ttlMillis is not None:
            oprot.writeFieldBegin('ttlMillis', TType.I64, 3)
            oprot.writeI64(self.ttlMillis)
            oprot.writeFieldEnd()
        if self.category is not None:
            oprot.writeFieldBegin('category', TType.STRING, 4)
            oprot.writeString(self.category.encode('utf-8') if sys.version_info[0] == 2 else self.category)
            oprot.writeFieldEnd()
        if self.categoryBgColor is not None:
            oprot.writeFieldBegin('categoryBgColor', TType.STRING, 5)
            oprot.writeString(self.categoryBgColor.encode('utf-8') if sys.version_info[0] == 2 else self.categoryBgColor)
            oprot.writeFieldEnd()
        if self.categoryColor is not None:
            oprot.writeFieldBegin('categoryColor', TType.STRING, 6)
            oprot.writeString(self.categoryColor.encode('utf-8') if sys.version_info[0] == 2 else self.categoryColor)
            oprot.writeFieldEnd()
        if self.title is not None:
            oprot.writeFieldBegin('title', TType.STRING, 7)
            oprot.writeString(self.title.encode('utf-8') if sys.version_info[0] == 2 else self.title)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 8)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.image is not None:
            oprot.writeFieldBegin('image', TType.STRING, 9)
            oprot.writeString(self.image.encode('utf-8') if sys.version_info[0] == 2 else self.image)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserAuthStatus(object):
    """
    Attributes:
     - phoneNumberRegistered
     - registeredSnsIdTypes
     - accountMigrationCheckType

    """


    def __init__(self, phoneNumberRegistered=None, registeredSnsIdTypes=None, accountMigrationCheckType=None,):
        self.phoneNumberRegistered = phoneNumberRegistered
        self.registeredSnsIdTypes = registeredSnsIdTypes
        self.accountMigrationCheckType = accountMigrationCheckType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.phoneNumberRegistered = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.registeredSnsIdTypes = []
                    (_etype300, _size297) = iprot.readListBegin()
                    for _i301 in range(_size297):
                        _elem302 = iprot.readI32()
                        self.registeredSnsIdTypes.append(_elem302)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.accountMigrationCheckType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserAuthStatus')
        if self.phoneNumberRegistered is not None:
            oprot.writeFieldBegin('phoneNumberRegistered', TType.BOOL, 1)
            oprot.writeBool(self.phoneNumberRegistered)
            oprot.writeFieldEnd()
        if self.registeredSnsIdTypes is not None:
            oprot.writeFieldBegin('registeredSnsIdTypes', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.registeredSnsIdTypes))
            for iter303 in self.registeredSnsIdTypes:
                oprot.writeI32(iter303)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.accountMigrationCheckType is not None:
            oprot.writeFieldBegin('accountMigrationCheckType', TType.I32, 3)
            oprot.writeI32(self.accountMigrationCheckType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnalyticsInfo(object):
    """
    Attributes:
     - gaSamplingRate
     - tmid

    """


    def __init__(self, gaSamplingRate=None, tmid=None,):
        self.gaSamplingRate = gaSamplingRate
        self.tmid = tmid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.gaSamplingRate = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tmid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AnalyticsInfo')
        if self.gaSamplingRate is not None:
            oprot.writeFieldBegin('gaSamplingRate', TType.DOUBLE, 1)
            oprot.writeDouble(self.gaSamplingRate)
            oprot.writeFieldEnd()
        if self.tmid is not None:
            oprot.writeFieldBegin('tmid', TType.STRING, 2)
            oprot.writeString(self.tmid.encode('utf-8') if sys.version_info[0] == 2 else self.tmid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MessageBoxListRequest(object):
    """
    Attributes:
     - minChatId
     - maxChatId
     - activeOnly
     - messageBoxCountLimit
     - withUnreadCount
     - lastMessagesPerMessageBoxCount
     - unreadOnly

    """


    def __init__(self, minChatId=None, maxChatId=None, activeOnly=None, messageBoxCountLimit=None, withUnreadCount=None, lastMessagesPerMessageBoxCount=None, unreadOnly=None,):
        self.minChatId = minChatId
        self.maxChatId = maxChatId
        self.activeOnly = activeOnly
        self.messageBoxCountLimit = messageBoxCountLimit
        self.withUnreadCount = withUnreadCount
        self.lastMessagesPerMessageBoxCount = lastMessagesPerMessageBoxCount
        self.unreadOnly = unreadOnly

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.minChatId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.maxChatId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.activeOnly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.messageBoxCountLimit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.withUnreadCount = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.lastMessagesPerMessageBoxCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.unreadOnly = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MessageBoxListRequest')
        if self.minChatId is not None:
            oprot.writeFieldBegin('minChatId', TType.STRING, 1)
            oprot.writeString(self.minChatId.encode('utf-8') if sys.version_info[0] == 2 else self.minChatId)
            oprot.writeFieldEnd()
        if self.maxChatId is not None:
            oprot.writeFieldBegin('maxChatId', TType.STRING, 2)
            oprot.writeString(self.maxChatId.encode('utf-8') if sys.version_info[0] == 2 else self.maxChatId)
            oprot.writeFieldEnd()
        if self.activeOnly is not None:
            oprot.writeFieldBegin('activeOnly', TType.BOOL, 3)
            oprot.writeBool(self.activeOnly)
            oprot.writeFieldEnd()
        if self.messageBoxCountLimit is not None:
            oprot.writeFieldBegin('messageBoxCountLimit', TType.I32, 4)
            oprot.writeI32(self.messageBoxCountLimit)
            oprot.writeFieldEnd()
        if self.withUnreadCount is not None:
            oprot.writeFieldBegin('withUnreadCount', TType.BOOL, 5)
            oprot.writeBool(self.withUnreadCount)
            oprot.writeFieldEnd()
        if self.lastMessagesPerMessageBoxCount is not None:
            oprot.writeFieldBegin('lastMessagesPerMessageBoxCount', TType.I32, 6)
            oprot.writeI32(self.lastMessagesPerMessageBoxCount)
            oprot.writeFieldEnd()
        if self.unreadOnly is not None:
            oprot.writeFieldBegin('unreadOnly', TType.BOOL, 7)
            oprot.writeBool(self.unreadOnly)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VerificationSessionData(object):
    """
    Attributes:
     - sessionId
     - method
     - callback
     - normalizedPhone
     - countryCode
     - nationalSignificantNumber
     - availableVerificationMethods
     - callerIdMask

    """


    def __init__(self, sessionId=None, method=None, callback=None, normalizedPhone=None, countryCode=None, nationalSignificantNumber=None, availableVerificationMethods=None, callerIdMask=None,):
        self.sessionId = sessionId
        self.method = method
        self.callback = callback
        self.normalizedPhone = normalizedPhone
        self.countryCode = countryCode
        self.nationalSignificantNumber = nationalSignificantNumber
        self.availableVerificationMethods = availableVerificationMethods
        self.callerIdMask = callerIdMask

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sessionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.method = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.callback = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.normalizedPhone = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.countryCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.nationalSignificantNumber = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.availableVerificationMethods = []
                    (_etype307, _size304) = iprot.readListBegin()
                    for _i308 in range(_size304):
                        _elem309 = iprot.readI32()
                        self.availableVerificationMethods.append(_elem309)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.callerIdMask = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VerificationSessionData')
        if self.sessionId is not None:
            oprot.writeFieldBegin('sessionId', TType.STRING, 1)
            oprot.writeString(self.sessionId.encode('utf-8') if sys.version_info[0] == 2 else self.sessionId)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.I32, 2)
            oprot.writeI32(self.method)
            oprot.writeFieldEnd()
        if self.callback is not None:
            oprot.writeFieldBegin('callback', TType.STRING, 3)
            oprot.writeString(self.callback.encode('utf-8') if sys.version_info[0] == 2 else self.callback)
            oprot.writeFieldEnd()
        if self.normalizedPhone is not None:
            oprot.writeFieldBegin('normalizedPhone', TType.STRING, 4)
            oprot.writeString(self.normalizedPhone.encode('utf-8') if sys.version_info[0] == 2 else self.normalizedPhone)
            oprot.writeFieldEnd()
        if self.countryCode is not None:
            oprot.writeFieldBegin('countryCode', TType.STRING, 5)
            oprot.writeString(self.countryCode.encode('utf-8') if sys.version_info[0] == 2 else self.countryCode)
            oprot.writeFieldEnd()
        if self.nationalSignificantNumber is not None:
            oprot.writeFieldBegin('nationalSignificantNumber', TType.STRING, 6)
            oprot.writeString(self.nationalSignificantNumber.encode('utf-8') if sys.version_info[0] == 2 else self.nationalSignificantNumber)
            oprot.writeFieldEnd()
        if self.availableVerificationMethods is not None:
            oprot.writeFieldBegin('availableVerificationMethods', TType.LIST, 7)
            oprot.writeListBegin(TType.I32, len(self.availableVerificationMethods))
            for iter310 in self.availableVerificationMethods:
                oprot.writeI32(iter310)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.callerIdMask is not None:
            oprot.writeFieldBegin('callerIdMask', TType.STRING, 8)
            oprot.writeString(self.callerIdMask.encode('utf-8') if sys.version_info[0] == 2 else self.callerIdMask)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetEncryptedIdentityV3Response(object):
    """
    Attributes:
     - wrappedNonce
     - kdfParameter1
     - kdfParameter2

    """


    def __init__(self, wrappedNonce=None, kdfParameter1=None, kdfParameter2=None,):
        self.wrappedNonce = wrappedNonce
        self.kdfParameter1 = kdfParameter1
        self.kdfParameter2 = kdfParameter2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.wrappedNonce = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.kdfParameter1 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.kdfParameter2 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetEncryptedIdentityV3Response')
        if self.wrappedNonce is not None:
            oprot.writeFieldBegin('wrappedNonce', TType.STRING, 1)
            oprot.writeBinary(self.wrappedNonce)
            oprot.writeFieldEnd()
        if self.kdfParameter1 is not None:
            oprot.writeFieldBegin('kdfParameter1', TType.STRING, 2)
            oprot.writeBinary(self.kdfParameter1)
            oprot.writeFieldEnd()
        if self.kdfParameter2 is not None:
            oprot.writeFieldBegin('kdfParameter2', TType.STRING, 3)
            oprot.writeBinary(self.kdfParameter2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RegisterWithSnsIdResult(object):
    """
    Attributes:
     - authToken
     - userCreated
     - recommendEmailRegistration

    """


    def __init__(self, authToken=None, userCreated=None, recommendEmailRegistration=None,):
        self.authToken = authToken
        self.userCreated = userCreated
        self.recommendEmailRegistration = recommendEmailRegistration

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.userCreated = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recommendEmailRegistration = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RegisterWithSnsIdResult')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        if self.userCreated is not None:
            oprot.writeFieldBegin('userCreated', TType.BOOL, 2)
            oprot.writeBool(self.userCreated)
            oprot.writeFieldEnd()
        if self.recommendEmailRegistration is not None:
            oprot.writeFieldBegin('recommendEmailRegistration', TType.BOOL, 3)
            oprot.writeBool(self.recommendEmailRegistration)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SnsIdUserStatus(object):
    """
    Attributes:
     - userExisting
     - phoneNumberRegistered
     - sameDevice
     - accountMigrationCheckType

    """


    def __init__(self, userExisting=None, phoneNumberRegistered=None, sameDevice=None, accountMigrationCheckType=None,):
        self.userExisting = userExisting
        self.phoneNumberRegistered = phoneNumberRegistered
        self.sameDevice = sameDevice
        self.accountMigrationCheckType = accountMigrationCheckType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.userExisting = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.phoneNumberRegistered = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.sameDevice = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.accountMigrationCheckType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SnsIdUserStatus')
        if self.userExisting is not None:
            oprot.writeFieldBegin('userExisting', TType.BOOL, 1)
            oprot.writeBool(self.userExisting)
            oprot.writeFieldEnd()
        if self.phoneNumberRegistered is not None:
            oprot.writeFieldBegin('phoneNumberRegistered', TType.BOOL, 2)
            oprot.writeBool(self.phoneNumberRegistered)
            oprot.writeFieldEnd()
        if self.sameDevice is not None:
            oprot.writeFieldBegin('sameDevice', TType.BOOL, 3)
            oprot.writeBool(self.sameDevice)
            oprot.writeFieldEnd()
        if self.accountMigrationCheckType is not None:
            oprot.writeFieldBegin('accountMigrationCheckType', TType.I32, 4)
            oprot.writeI32(self.accountMigrationCheckType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PhoneVerificationResult(object):
    """
    Attributes:
     - verificationResult
     - accountMigrationCheckType
     - recommendAddFriends

    """


    def __init__(self, verificationResult=None, accountMigrationCheckType=None, recommendAddFriends=None,):
        self.verificationResult = verificationResult
        self.accountMigrationCheckType = accountMigrationCheckType
        self.recommendAddFriends = recommendAddFriends

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.verificationResult = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.accountMigrationCheckType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.recommendAddFriends = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PhoneVerificationResult')
        if self.verificationResult is not None:
            oprot.writeFieldBegin('verificationResult', TType.I32, 1)
            oprot.writeI32(self.verificationResult)
            oprot.writeFieldEnd()
        if self.accountMigrationCheckType is not None:
            oprot.writeFieldBegin('accountMigrationCheckType', TType.I32, 2)
            oprot.writeI32(self.accountMigrationCheckType)
            oprot.writeFieldEnd()
        if self.recommendAddFriends is not None:
            oprot.writeFieldBegin('recommendAddFriends', TType.BOOL, 3)
            oprot.writeBool(self.recommendAddFriends)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CreateQrSessionRequest(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CreateQrSessionRequest')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CreateQrSessionResponse(object):
    """
    Attributes:
     - authSessionId

    """


    def __init__(self, authSessionId=None,):
        self.authSessionId = authSessionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CreateQrSessionResponse')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId.encode('utf-8') if sys.version_info[0] == 2 else self.authSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CreateQrCodeRequest(object):
    """
    Attributes:
     - authSessionId

    """


    def __init__(self, authSessionId=None,):
        self.authSessionId = authSessionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CreateQrCodeRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId.encode('utf-8') if sys.version_info[0] == 2 else self.authSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CreateQrCodeResponse(object):
    """
    Attributes:
     - callbackUrl

    """


    def __init__(self, callbackUrl=None,):
        self.callbackUrl = callbackUrl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.callbackUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CreateQrCodeResponse')
        if self.callbackUrl is not None:
            oprot.writeFieldBegin('callbackUrl', TType.STRING, 1)
            oprot.writeString(self.callbackUrl.encode('utf-8') if sys.version_info[0] == 2 else self.callbackUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CheckQrCodeVerifiedRequest(object):
    """
    Attributes:
     - authSessionId

    """


    def __init__(self, authSessionId=None,):
        self.authSessionId = authSessionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CheckQrCodeVerifiedRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId.encode('utf-8') if sys.version_info[0] == 2 else self.authSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CheckQrCodeVerifiedResponse(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CheckQrCodeVerifiedResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CreatePinCodeRequest(object):
    """
    Attributes:
     - authSessionId

    """


    def __init__(self, authSessionId=None,):
        self.authSessionId = authSessionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CreatePinCodeRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId.encode('utf-8') if sys.version_info[0] == 2 else self.authSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CreatePinCodeResponse(object):
    """
    Attributes:
     - pinCode

    """


    def __init__(self, pinCode=None,):
        self.pinCode = pinCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pinCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CreatePinCodeResponse')
        if self.pinCode is not None:
            oprot.writeFieldBegin('pinCode', TType.STRING, 1)
            oprot.writeString(self.pinCode.encode('utf-8') if sys.version_info[0] == 2 else self.pinCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CheckPinCodeVerifiedRequest(object):
    """
    Attributes:
     - authSessionId

    """


    def __init__(self, authSessionId=None,):
        self.authSessionId = authSessionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CheckPinCodeVerifiedRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId.encode('utf-8') if sys.version_info[0] == 2 else self.authSessionId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CheckPinCodeVerifiedResponse(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CheckPinCodeVerifiedResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VerifyCertificateRequest(object):
    """
    Attributes:
     - authSessionId
     - certificate

    """


    def __init__(self, authSessionId=None, certificate=None,):
        self.authSessionId = authSessionId
        self.certificate = certificate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.certificate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VerifyCertificateRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId.encode('utf-8') if sys.version_info[0] == 2 else self.authSessionId)
            oprot.writeFieldEnd()
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRING, 2)
            oprot.writeString(self.certificate.encode('utf-8') if sys.version_info[0] == 2 else self.certificate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VerifyCertificateResponse(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VerifyCertificateResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QrCodeLoginRequest(object):
    """
    Attributes:
     - authSessionId
     - systemName
     - autoLoginIsRequired

    """


    def __init__(self, authSessionId=None, systemName=None, autoLoginIsRequired=None,):
        self.authSessionId = authSessionId
        self.systemName = systemName
        self.autoLoginIsRequired = autoLoginIsRequired

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authSessionId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.systemName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.autoLoginIsRequired = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QrCodeLoginRequest')
        if self.authSessionId is not None:
            oprot.writeFieldBegin('authSessionId', TType.STRING, 1)
            oprot.writeString(self.authSessionId.encode('utf-8') if sys.version_info[0] == 2 else self.authSessionId)
            oprot.writeFieldEnd()
        if self.systemName is not None:
            oprot.writeFieldBegin('systemName', TType.STRING, 2)
            oprot.writeString(self.systemName.encode('utf-8') if sys.version_info[0] == 2 else self.systemName)
            oprot.writeFieldEnd()
        if self.autoLoginIsRequired is not None:
            oprot.writeFieldBegin('autoLoginIsRequired', TType.BOOL, 3)
            oprot.writeBool(self.autoLoginIsRequired)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QrCodeLoginResponse(object):
    """
    Attributes:
     - certificate
     - accessToken
     - lastBindTimestamp
     - metaData

    """


    def __init__(self, certificate=None, accessToken=None, lastBindTimestamp=None, metaData=None,):
        self.certificate = certificate
        self.accessToken = accessToken
        self.lastBindTimestamp = lastBindTimestamp
        self.metaData = metaData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.certificate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.accessToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastBindTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.metaData = {}
                    (_ktype312, _vtype313, _size311) = iprot.readMapBegin()
                    for _i315 in range(_size311):
                        _key316 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val317 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.metaData[_key316] = _val317
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QrCodeLoginResponse')
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRING, 1)
            oprot.writeString(self.certificate.encode('utf-8') if sys.version_info[0] == 2 else self.certificate)
            oprot.writeFieldEnd()
        if self.accessToken is not None:
            oprot.writeFieldBegin('accessToken', TType.STRING, 2)
            oprot.writeString(self.accessToken.encode('utf-8') if sys.version_info[0] == 2 else self.accessToken)
            oprot.writeFieldEnd()
        if self.lastBindTimestamp is not None:
            oprot.writeFieldBegin('lastBindTimestamp', TType.I64, 3)
            oprot.writeI64(self.lastBindTimestamp)
            oprot.writeFieldEnd()
        if self.metaData is not None:
            oprot.writeFieldBegin('metaData', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metaData))
            for kiter318, viter319 in self.metaData.items():
                oprot.writeString(kiter318.encode('utf-8') if sys.version_info[0] == 2 else kiter318)
                oprot.writeString(viter319.encode('utf-8') if sys.version_info[0] == 2 else viter319)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SendPostbackRequest(object):
    """
    Attributes:
     - messageId
     - url
     - chatMID
     - originMID

    """


    def __init__(self, messageId=None, url=None, chatMID=None, originMID=None,):
        self.messageId = messageId
        self.url = url
        self.chatMID = chatMID
        self.originMID = originMID

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.messageId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.chatMID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.originMID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SendPostbackRequest')
        if self.messageId is not None:
            oprot.writeFieldBegin('messageId', TType.STRING, 1)
            oprot.writeString(self.messageId.encode('utf-8') if sys.version_info[0] == 2 else self.messageId)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 2)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.chatMID is not None:
            oprot.writeFieldBegin('chatMID', TType.STRING, 3)
            oprot.writeString(self.chatMID.encode('utf-8') if sys.version_info[0] == 2 else self.chatMID)
            oprot.writeFieldEnd()
        if self.originMID is not None:
            oprot.writeFieldBegin('originMID', TType.STRING, 4)
            oprot.writeString(self.originMID.encode('utf-8') if sys.version_info[0] == 2 else self.originMID)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChannelToken(object):
    """
    Attributes:
     - token
     - obsToken
     - expiration
     - refreshToken
     - channelAccessToken

    """


    def __init__(self, token=None, obsToken=None, expiration=None, refreshToken=None, channelAccessToken=None,):
        self.token = token
        self.obsToken = obsToken
        self.expiration = expiration
        self.refreshToken = refreshToken
        self.channelAccessToken = channelAccessToken

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.obsToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.expiration = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.refreshToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.channelAccessToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChannelToken')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeString(self.token.encode('utf-8') if sys.version_info[0] == 2 else self.token)
            oprot.writeFieldEnd()
        if self.obsToken is not None:
            oprot.writeFieldBegin('obsToken', TType.STRING, 2)
            oprot.writeString(self.obsToken.encode('utf-8') if sys.version_info[0] == 2 else self.obsToken)
            oprot.writeFieldEnd()
        if self.expiration is not None:
            oprot.writeFieldBegin('expiration', TType.I64, 3)
            oprot.writeI64(self.expiration)
            oprot.writeFieldEnd()
        if self.refreshToken is not None:
            oprot.writeFieldBegin('refreshToken', TType.STRING, 4)
            oprot.writeString(self.refreshToken.encode('utf-8') if sys.version_info[0] == 2 else self.refreshToken)
            oprot.writeFieldEnd()
        if self.channelAccessToken is not None:
            oprot.writeFieldBegin('channelAccessToken', TType.STRING, 5)
            oprot.writeString(self.channelAccessToken.encode('utf-8') if sys.version_info[0] == 2 else self.channelAccessToken)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WebLoginResponse(object):
    """
    Attributes:
     - returnUrl
     - optionalReturnUrl
     - redirectConfirmationPageUrl

    """


    def __init__(self, returnUrl=None, optionalReturnUrl=None, redirectConfirmationPageUrl=None,):
        self.returnUrl = returnUrl
        self.optionalReturnUrl = optionalReturnUrl
        self.redirectConfirmationPageUrl = redirectConfirmationPageUrl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.returnUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.optionalReturnUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.redirectConfirmationPageUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WebLoginResponse')
        if self.returnUrl is not None:
            oprot.writeFieldBegin('returnUrl', TType.STRING, 1)
            oprot.writeString(self.returnUrl.encode('utf-8') if sys.version_info[0] == 2 else self.returnUrl)
            oprot.writeFieldEnd()
        if self.optionalReturnUrl is not None:
            oprot.writeFieldBegin('optionalReturnUrl', TType.STRING, 2)
            oprot.writeString(self.optionalReturnUrl.encode('utf-8') if sys.version_info[0] == 2 else self.optionalReturnUrl)
            oprot.writeFieldEnd()
        if self.redirectConfirmationPageUrl is not None:
            oprot.writeFieldBegin('redirectConfirmationPageUrl', TType.STRING, 3)
            oprot.writeString(self.redirectConfirmationPageUrl.encode('utf-8') if sys.version_info[0] == 2 else self.redirectConfirmationPageUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WebLoginRequest(object):
    """
    Attributes:
     - hookedFullUrl
     - sessionString
     - fromIAB
     - sourceApplication

    """


    def __init__(self, hookedFullUrl=None, sessionString=None, fromIAB=None, sourceApplication=None,):
        self.hookedFullUrl = hookedFullUrl
        self.sessionString = sessionString
        self.fromIAB = fromIAB
        self.sourceApplication = sourceApplication

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hookedFullUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sessionString = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.fromIAB = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sourceApplication = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WebLoginRequest')
        if self.hookedFullUrl is not None:
            oprot.writeFieldBegin('hookedFullUrl', TType.STRING, 1)
            oprot.writeString(self.hookedFullUrl.encode('utf-8') if sys.version_info[0] == 2 else self.hookedFullUrl)
            oprot.writeFieldEnd()
        if self.sessionString is not None:
            oprot.writeFieldBegin('sessionString', TType.STRING, 2)
            oprot.writeString(self.sessionString.encode('utf-8') if sys.version_info[0] == 2 else self.sessionString)
            oprot.writeFieldEnd()
        if self.fromIAB is not None:
            oprot.writeFieldBegin('fromIAB', TType.BOOL, 3)
            oprot.writeBool(self.fromIAB)
            oprot.writeFieldEnd()
        if self.sourceApplication is not None:
            oprot.writeFieldBegin('sourceApplication', TType.STRING, 4)
            oprot.writeString(self.sourceApplication.encode('utf-8') if sys.version_info[0] == 2 else self.sourceApplication)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChannelProvider(object):
    """
    Attributes:
     - name
     - certified

    """


    def __init__(self, name=None, certified=None,):
        self.name = name
        self.certified = certified

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.certified = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChannelProvider')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.certified is not None:
            oprot.writeFieldBegin('certified', TType.BOOL, 2)
            oprot.writeBool(self.certified)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChannelDomain(object):
    """
    Attributes:
     - host
     - removed

    """


    def __init__(self, host=None, removed=None,):
        self.host = host
        self.removed = removed

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.removed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChannelDomain')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.removed is not None:
            oprot.writeFieldBegin('removed', TType.BOOL, 2)
            oprot.writeBool(self.removed)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChannelInfo(object):
    """
    Attributes:
     - channelId
     - name
     - entryPageUrl
     - descriptionText
     - provider
     - publicType
     - iconImage
     - permissions
     - iconThumbnailImage
     - channelConfigurations
     - lcsAllApiUsable
     - allowedPermissions
     - channelDomains
     - updatedTimestamp
     - featureLicenses

    """


    def __init__(self, channelId=None, name=None, entryPageUrl=None, descriptionText=None, provider=None, publicType=None, iconImage=None, permissions=None, iconThumbnailImage=None, channelConfigurations=None, lcsAllApiUsable=None, allowedPermissions=None, channelDomains=None, updatedTimestamp=None, featureLicenses=None,):
        self.channelId = channelId
        self.name = name
        self.entryPageUrl = entryPageUrl
        self.descriptionText = descriptionText
        self.provider = provider
        self.publicType = publicType
        self.iconImage = iconImage
        self.permissions = permissions
        self.iconThumbnailImage = iconThumbnailImage
        self.channelConfigurations = channelConfigurations
        self.lcsAllApiUsable = lcsAllApiUsable
        self.allowedPermissions = allowedPermissions
        self.channelDomains = channelDomains
        self.updatedTimestamp = updatedTimestamp
        self.featureLicenses = featureLicenses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.entryPageUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.descriptionText = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.provider = ChannelProvider()
                    self.provider.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.publicType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.iconImage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.permissions = []
                    (_etype323, _size320) = iprot.readListBegin()
                    for _i324 in range(_size320):
                        _elem325 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.permissions.append(_elem325)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.iconThumbnailImage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.channelConfigurations = []
                    (_etype329, _size326) = iprot.readListBegin()
                    for _i330 in range(_size326):
                        _elem331 = iprot.readI32()
                        self.channelConfigurations.append(_elem331)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.BOOL:
                    self.lcsAllApiUsable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.SET:
                    self.allowedPermissions = set()
                    (_etype335, _size332) = iprot.readSetBegin()
                    for _i336 in range(_size332):
                        _elem337 = iprot.readI32()
                        self.allowedPermissions.add(_elem337)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.channelDomains = []
                    (_etype341, _size338) = iprot.readListBegin()
                    for _i342 in range(_size338):
                        _elem343 = ChannelDomain()
                        _elem343.read(iprot)
                        self.channelDomains.append(_elem343)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I64:
                    self.updatedTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.SET:
                    self.featureLicenses = set()
                    (_etype347, _size344) = iprot.readSetBegin()
                    for _i348 in range(_size344):
                        _elem349 = iprot.readI32()
                        self.featureLicenses.add(_elem349)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChannelInfo')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId.encode('utf-8') if sys.version_info[0] == 2 else self.channelId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.entryPageUrl is not None:
            oprot.writeFieldBegin('entryPageUrl', TType.STRING, 4)
            oprot.writeString(self.entryPageUrl.encode('utf-8') if sys.version_info[0] == 2 else self.entryPageUrl)
            oprot.writeFieldEnd()
        if self.descriptionText is not None:
            oprot.writeFieldBegin('descriptionText', TType.STRING, 5)
            oprot.writeString(self.descriptionText.encode('utf-8') if sys.version_info[0] == 2 else self.descriptionText)
            oprot.writeFieldEnd()
        if self.provider is not None:
            oprot.writeFieldBegin('provider', TType.STRUCT, 6)
            self.provider.write(oprot)
            oprot.writeFieldEnd()
        if self.publicType is not None:
            oprot.writeFieldBegin('publicType', TType.I32, 7)
            oprot.writeI32(self.publicType)
            oprot.writeFieldEnd()
        if self.iconImage is not None:
            oprot.writeFieldBegin('iconImage', TType.STRING, 8)
            oprot.writeString(self.iconImage.encode('utf-8') if sys.version_info[0] == 2 else self.iconImage)
            oprot.writeFieldEnd()
        if self.permissions is not None:
            oprot.writeFieldBegin('permissions', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.permissions))
            for iter350 in self.permissions:
                oprot.writeString(iter350.encode('utf-8') if sys.version_info[0] == 2 else iter350)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.iconThumbnailImage is not None:
            oprot.writeFieldBegin('iconThumbnailImage', TType.STRING, 11)
            oprot.writeString(self.iconThumbnailImage.encode('utf-8') if sys.version_info[0] == 2 else self.iconThumbnailImage)
            oprot.writeFieldEnd()
        if self.channelConfigurations is not None:
            oprot.writeFieldBegin('channelConfigurations', TType.LIST, 12)
            oprot.writeListBegin(TType.I32, len(self.channelConfigurations))
            for iter351 in self.channelConfigurations:
                oprot.writeI32(iter351)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.lcsAllApiUsable is not None:
            oprot.writeFieldBegin('lcsAllApiUsable', TType.BOOL, 13)
            oprot.writeBool(self.lcsAllApiUsable)
            oprot.writeFieldEnd()
        if self.allowedPermissions is not None:
            oprot.writeFieldBegin('allowedPermissions', TType.SET, 14)
            oprot.writeSetBegin(TType.I32, len(self.allowedPermissions))
            for iter352 in self.allowedPermissions:
                oprot.writeI32(iter352)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.channelDomains is not None:
            oprot.writeFieldBegin('channelDomains', TType.LIST, 15)
            oprot.writeListBegin(TType.STRUCT, len(self.channelDomains))
            for iter353 in self.channelDomains:
                iter353.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.updatedTimestamp is not None:
            oprot.writeFieldBegin('updatedTimestamp', TType.I64, 16)
            oprot.writeI64(self.updatedTimestamp)
            oprot.writeFieldEnd()
        if self.featureLicenses is not None:
            oprot.writeFieldBegin('featureLicenses', TType.SET, 17)
            oprot.writeSetBegin(TType.I32, len(self.featureLicenses))
            for iter354 in self.featureLicenses:
                oprot.writeI32(iter354)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RequestTokenResponse(object):
    """
    Attributes:
     - requestToken
     - returnUrl

    """


    def __init__(self, requestToken=None, returnUrl=None,):
        self.requestToken = requestToken
        self.returnUrl = returnUrl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.returnUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RequestTokenResponse')
        if self.requestToken is not None:
            oprot.writeFieldBegin('requestToken', TType.STRING, 1)
            oprot.writeString(self.requestToken.encode('utf-8') if sys.version_info[0] == 2 else self.requestToken)
            oprot.writeFieldEnd()
        if self.returnUrl is not None:
            oprot.writeFieldBegin('returnUrl', TType.STRING, 2)
            oprot.writeString(self.returnUrl.encode('utf-8') if sys.version_info[0] == 2 else self.returnUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ApprovedChannelInfo(object):
    """
    Attributes:
     - channelInfo
     - approvedAt

    """


    def __init__(self, channelInfo=None, approvedAt=None,):
        self.channelInfo = channelInfo
        self.approvedAt = approvedAt

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.channelInfo = ChannelInfo()
                    self.channelInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.approvedAt = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ApprovedChannelInfo')
        if self.channelInfo is not None:
            oprot.writeFieldBegin('channelInfo', TType.STRUCT, 1)
            self.channelInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.approvedAt is not None:
            oprot.writeFieldBegin('approvedAt', TType.I64, 2)
            oprot.writeI64(self.approvedAt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ApprovedChannelInfos(object):
    """
    Attributes:
     - approvedChannelInfos
     - revision

    """


    def __init__(self, approvedChannelInfos=None, revision=None,):
        self.approvedChannelInfos = approvedChannelInfos
        self.revision = revision

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.approvedChannelInfos = []
                    (_etype358, _size355) = iprot.readListBegin()
                    for _i359 in range(_size355):
                        _elem360 = ApprovedChannelInfo()
                        _elem360.read(iprot)
                        self.approvedChannelInfos.append(_elem360)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ApprovedChannelInfos')
        if self.approvedChannelInfos is not None:
            oprot.writeFieldBegin('approvedChannelInfos', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.approvedChannelInfos))
            for iter361 in self.approvedChannelInfos:
                iter361.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 2)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CoinUseReservationItem(object):
    """
    Attributes:
     - itemId
     - itemName
     - amount

    """


    def __init__(self, itemId=None, itemName=None, amount=None,):
        self.itemId = itemId
        self.itemName = itemName
        self.amount = amount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.itemId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.itemName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.amount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CoinUseReservationItem')
        if self.itemId is not None:
            oprot.writeFieldBegin('itemId', TType.STRING, 1)
            oprot.writeString(self.itemId.encode('utf-8') if sys.version_info[0] == 2 else self.itemId)
            oprot.writeFieldEnd()
        if self.itemName is not None:
            oprot.writeFieldBegin('itemName', TType.STRING, 2)
            oprot.writeString(self.itemName.encode('utf-8') if sys.version_info[0] == 2 else self.itemName)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.I32, 3)
            oprot.writeI32(self.amount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CoinUseReservation(object):
    """
    Attributes:
     - channelId
     - shopOrderId
     - appStoreCode
     - items
     - country

    """


    def __init__(self, channelId=None, shopOrderId=None, appStoreCode=None, items=None, country=None,):
        self.channelId = channelId
        self.shopOrderId = shopOrderId
        self.appStoreCode = appStoreCode
        self.items = items
        self.country = country

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.shopOrderId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.appStoreCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.items = []
                    (_etype365, _size362) = iprot.readListBegin()
                    for _i366 in range(_size362):
                        _elem367 = CoinUseReservationItem()
                        _elem367.read(iprot)
                        self.items.append(_elem367)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.country = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CoinUseReservation')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId.encode('utf-8') if sys.version_info[0] == 2 else self.channelId)
            oprot.writeFieldEnd()
        if self.shopOrderId is not None:
            oprot.writeFieldBegin('shopOrderId', TType.STRING, 2)
            oprot.writeString(self.shopOrderId.encode('utf-8') if sys.version_info[0] == 2 else self.shopOrderId)
            oprot.writeFieldEnd()
        if self.appStoreCode is not None:
            oprot.writeFieldBegin('appStoreCode', TType.I32, 3)
            oprot.writeI32(self.appStoreCode)
            oprot.writeFieldEnd()
        if self.items is not None:
            oprot.writeFieldBegin('items', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.items))
            for iter368 in self.items:
                iter368.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.country is not None:
            oprot.writeFieldBegin('country', TType.STRING, 5)
            oprot.writeString(self.country.encode('utf-8') if sys.version_info[0] == 2 else self.country)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChannelDomains(object):
    """
    Attributes:
     - channelDomains
     - revision

    """


    def __init__(self, channelDomains=None, revision=None,):
        self.channelDomains = channelDomains
        self.revision = revision

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.channelDomains = []
                    (_etype372, _size369) = iprot.readListBegin()
                    for _i373 in range(_size369):
                        _elem374 = ChannelDomain()
                        _elem374.read(iprot)
                        self.channelDomains.append(_elem374)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChannelDomains')
        if self.channelDomains is not None:
            oprot.writeFieldBegin('channelDomains', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.channelDomains))
            for iter375 in self.channelDomains:
                iter375.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 2)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChannelIdWithLastUpdated(object):
    """
    Attributes:
     - channelId
     - lastUpdated

    """


    def __init__(self, channelId=None, lastUpdated=None,):
        self.channelId = channelId
        self.lastUpdated = lastUpdated

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.lastUpdated = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChannelIdWithLastUpdated')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId.encode('utf-8') if sys.version_info[0] == 2 else self.channelId)
            oprot.writeFieldEnd()
        if self.lastUpdated is not None:
            oprot.writeFieldBegin('lastUpdated', TType.I64, 2)
            oprot.writeI64(self.lastUpdated)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChannelNotificationSetting(object):
    """
    Attributes:
     - channelId
     - name
     - notificationReceivable
     - messageReceivable
     - showDefault

    """


    def __init__(self, channelId=None, name=None, notificationReceivable=None, messageReceivable=None, showDefault=None,):
        self.channelId = channelId
        self.name = name
        self.notificationReceivable = notificationReceivable
        self.messageReceivable = messageReceivable
        self.showDefault = showDefault

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.channelId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.notificationReceivable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.messageReceivable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.showDefault = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChannelNotificationSetting')
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.STRING, 1)
            oprot.writeString(self.channelId.encode('utf-8') if sys.version_info[0] == 2 else self.channelId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.notificationReceivable is not None:
            oprot.writeFieldBegin('notificationReceivable', TType.BOOL, 3)
            oprot.writeBool(self.notificationReceivable)
            oprot.writeFieldEnd()
        if self.messageReceivable is not None:
            oprot.writeFieldBegin('messageReceivable', TType.BOOL, 4)
            oprot.writeBool(self.messageReceivable)
            oprot.writeFieldEnd()
        if self.showDefault is not None:
            oprot.writeFieldBegin('showDefault', TType.BOOL, 5)
            oprot.writeBool(self.showDefault)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChannelSettings(object):
    """
    Attributes:
     - unapprovedMessageReceivable

    """


    def __init__(self, unapprovedMessageReceivable=None,):
        self.unapprovedMessageReceivable = unapprovedMessageReceivable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.unapprovedMessageReceivable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChannelSettings')
        if self.unapprovedMessageReceivable is not None:
            oprot.writeFieldBegin('unapprovedMessageReceivable', TType.BOOL, 1)
            oprot.writeBool(self.unapprovedMessageReceivable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BuddyDetail(object):
    """
    Attributes:
     - mid
     - memberCount
     - onAir
     - businessAccount
     - addable
     - acceptableContentTypes
     - capableMyhome
     - freePhoneCallable
     - phoneNumberToDial
     - needPermissionApproval
     - channelId
     - channelProviderName
     - iconType
     - botType
     - showRichMenu
     - richMenuRevision
     - onAirLabel
     - useTheme
     - themeId
     - useBar
     - barRevision
     - useBackground
     - backgroundId
     - statusBarEnabled
     - statusBarRevision
     - searchId
     - onAirVersion
     - blockable

    """


    def __init__(self, mid=None, memberCount=None, onAir=None, businessAccount=None, addable=None, acceptableContentTypes=None, capableMyhome=None, freePhoneCallable=None, phoneNumberToDial=None, needPermissionApproval=None, channelId=None, channelProviderName=None, iconType=None, botType=None, showRichMenu=None, richMenuRevision=None, onAirLabel=None, useTheme=None, themeId=None, useBar=None, barRevision=None, useBackground=None, backgroundId=None, statusBarEnabled=None, statusBarRevision=None, searchId=None, onAirVersion=None, blockable=None,):
        self.mid = mid
        self.memberCount = memberCount
        self.onAir = onAir
        self.businessAccount = businessAccount
        self.addable = addable
        self.acceptableContentTypes = acceptableContentTypes
        self.capableMyhome = capableMyhome
        self.freePhoneCallable = freePhoneCallable
        self.phoneNumberToDial = phoneNumberToDial
        self.needPermissionApproval = needPermissionApproval
        self.channelId = channelId
        self.channelProviderName = channelProviderName
        self.iconType = iconType
        self.botType = botType
        self.showRichMenu = showRichMenu
        self.richMenuRevision = richMenuRevision
        self.onAirLabel = onAirLabel
        self.useTheme = useTheme
        self.themeId = themeId
        self.useBar = useBar
        self.barRevision = barRevision
        self.useBackground = useBackground
        self.backgroundId = backgroundId
        self.statusBarEnabled = statusBarEnabled
        self.statusBarRevision = statusBarRevision
        self.searchId = searchId
        self.onAirVersion = onAirVersion
        self.blockable = blockable

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.memberCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.onAir = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.businessAccount = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.addable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.SET:
                    self.acceptableContentTypes = set()
                    (_etype379, _size376) = iprot.readSetBegin()
                    for _i380 in range(_size376):
                        _elem381 = iprot.readI32()
                        self.acceptableContentTypes.add(_elem381)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.capableMyhome = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.freePhoneCallable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.phoneNumberToDial = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.needPermissionApproval = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.channelId = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.channelProviderName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.iconType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.botType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.showRichMenu = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.BOOL:
                    self.richMenuRevision = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.onAirLabel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.useTheme = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.themeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.BOOL:
                    self.useBar = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.BOOL:
                    self.barRevision = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I64:
                    self.useBackground = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.backgroundId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.BOOL:
                    self.statusBarEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.BOOL:
                    self.statusBarRevision = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.searchId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.I32:
                    self.onAirVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.BOOL:
                    self.blockable = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BuddyDetail')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid.encode('utf-8') if sys.version_info[0] == 2 else self.mid)
            oprot.writeFieldEnd()
        if self.memberCount is not None:
            oprot.writeFieldBegin('memberCount', TType.I64, 2)
            oprot.writeI64(self.memberCount)
            oprot.writeFieldEnd()
        if self.onAir is not None:
            oprot.writeFieldBegin('onAir', TType.I64, 3)
            oprot.writeI64(self.onAir)
            oprot.writeFieldEnd()
        if self.businessAccount is not None:
            oprot.writeFieldBegin('businessAccount', TType.BOOL, 4)
            oprot.writeBool(self.businessAccount)
            oprot.writeFieldEnd()
        if self.addable is not None:
            oprot.writeFieldBegin('addable', TType.BOOL, 5)
            oprot.writeBool(self.addable)
            oprot.writeFieldEnd()
        if self.acceptableContentTypes is not None:
            oprot.writeFieldBegin('acceptableContentTypes', TType.SET, 6)
            oprot.writeSetBegin(TType.I32, len(self.acceptableContentTypes))
            for iter382 in self.acceptableContentTypes:
                oprot.writeI32(iter382)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.capableMyhome is not None:
            oprot.writeFieldBegin('capableMyhome', TType.BOOL, 7)
            oprot.writeBool(self.capableMyhome)
            oprot.writeFieldEnd()
        if self.freePhoneCallable is not None:
            oprot.writeFieldBegin('freePhoneCallable', TType.BOOL, 8)
            oprot.writeBool(self.freePhoneCallable)
            oprot.writeFieldEnd()
        if self.phoneNumberToDial is not None:
            oprot.writeFieldBegin('phoneNumberToDial', TType.STRING, 9)
            oprot.writeString(self.phoneNumberToDial.encode('utf-8') if sys.version_info[0] == 2 else self.phoneNumberToDial)
            oprot.writeFieldEnd()
        if self.needPermissionApproval is not None:
            oprot.writeFieldBegin('needPermissionApproval', TType.BOOL, 10)
            oprot.writeBool(self.needPermissionApproval)
            oprot.writeFieldEnd()
        if self.channelId is not None:
            oprot.writeFieldBegin('channelId', TType.BOOL, 11)
            oprot.writeBool(self.channelId)
            oprot.writeFieldEnd()
        if self.channelProviderName is not None:
            oprot.writeFieldBegin('channelProviderName', TType.STRING, 12)
            oprot.writeString(self.channelProviderName.encode('utf-8') if sys.version_info[0] == 2 else self.channelProviderName)
            oprot.writeFieldEnd()
        if self.iconType is not None:
            oprot.writeFieldBegin('iconType', TType.I32, 13)
            oprot.writeI32(self.iconType)
            oprot.writeFieldEnd()
        if self.botType is not None:
            oprot.writeFieldBegin('botType', TType.I32, 14)
            oprot.writeI32(self.botType)
            oprot.writeFieldEnd()
        if self.showRichMenu is not None:
            oprot.writeFieldBegin('showRichMenu', TType.BOOL, 15)
            oprot.writeBool(self.showRichMenu)
            oprot.writeFieldEnd()
        if self.richMenuRevision is not None:
            oprot.writeFieldBegin('richMenuRevision', TType.BOOL, 16)
            oprot.writeBool(self.richMenuRevision)
            oprot.writeFieldEnd()
        if self.onAirLabel is not None:
            oprot.writeFieldBegin('onAirLabel', TType.I32, 17)
            oprot.writeI32(self.onAirLabel)
            oprot.writeFieldEnd()
        if self.useTheme is not None:
            oprot.writeFieldBegin('useTheme', TType.I32, 18)
            oprot.writeI32(self.useTheme)
            oprot.writeFieldEnd()
        if self.themeId is not None:
            oprot.writeFieldBegin('themeId', TType.STRING, 19)
            oprot.writeString(self.themeId.encode('utf-8') if sys.version_info[0] == 2 else self.themeId)
            oprot.writeFieldEnd()
        if self.useBar is not None:
            oprot.writeFieldBegin('useBar', TType.BOOL, 20)
            oprot.writeBool(self.useBar)
            oprot.writeFieldEnd()
        if self.barRevision is not None:
            oprot.writeFieldBegin('barRevision', TType.BOOL, 21)
            oprot.writeBool(self.barRevision)
            oprot.writeFieldEnd()
        if self.useBackground is not None:
            oprot.writeFieldBegin('useBackground', TType.I64, 22)
            oprot.writeI64(self.useBackground)
            oprot.writeFieldEnd()
        if self.backgroundId is not None:
            oprot.writeFieldBegin('backgroundId', TType.STRING, 23)
            oprot.writeString(self.backgroundId.encode('utf-8') if sys.version_info[0] == 2 else self.backgroundId)
            oprot.writeFieldEnd()
        if self.statusBarEnabled is not None:
            oprot.writeFieldBegin('statusBarEnabled', TType.BOOL, 24)
            oprot.writeBool(self.statusBarEnabled)
            oprot.writeFieldEnd()
        if self.statusBarRevision is not None:
            oprot.writeFieldBegin('statusBarRevision', TType.BOOL, 25)
            oprot.writeBool(self.statusBarRevision)
            oprot.writeFieldEnd()
        if self.searchId is not None:
            oprot.writeFieldBegin('searchId', TType.STRING, 26)
            oprot.writeString(self.searchId.encode('utf-8') if sys.version_info[0] == 2 else self.searchId)
            oprot.writeFieldEnd()
        if self.onAirVersion is not None:
            oprot.writeFieldBegin('onAirVersion', TType.I32, 27)
            oprot.writeI32(self.onAirVersion)
            oprot.writeFieldEnd()
        if self.blockable is not None:
            oprot.writeFieldBegin('blockable', TType.BOOL, 28)
            oprot.writeBool(self.blockable)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProximityMatchCandidateEntry(object):
    """
    Attributes:
     - contact
     - buddyDetail

    """


    def __init__(self, contact=None, buddyDetail=None,):
        self.contact = contact
        self.buddyDetail = buddyDetail

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.contact = Contact()
                    self.contact.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.buddyDetail = BuddyDetail()
                    self.buddyDetail.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProximityMatchCandidateEntry')
        if self.contact is not None:
            oprot.writeFieldBegin('contact', TType.STRUCT, 1)
            self.contact.write(oprot)
            oprot.writeFieldEnd()
        if self.buddyDetail is not None:
            oprot.writeFieldBegin('buddyDetail', TType.STRUCT, 11)
            self.buddyDetail.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProximityMatchCandidateResult(object):
    """
    Attributes:
     - users
     - buddies
     - endOfResult

    """


    def __init__(self, users=None, buddies=None, endOfResult=None,):
        self.users = users
        self.buddies = buddies
        self.endOfResult = endOfResult

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.users = []
                    (_etype386, _size383) = iprot.readListBegin()
                    for _i387 in range(_size383):
                        _elem388 = ProximityMatchCandidateEntry()
                        _elem388.read(iprot)
                        self.users.append(_elem388)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.buddies = []
                    (_etype392, _size389) = iprot.readListBegin()
                    for _i393 in range(_size389):
                        _elem394 = ProximityMatchCandidateEntry()
                        _elem394.read(iprot)
                        self.buddies.append(_elem394)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 91:
                if ftype == TType.BOOL:
                    self.endOfResult = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProximityMatchCandidateResult')
        if self.users is not None:
            oprot.writeFieldBegin('users', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.users))
            for iter395 in self.users:
                iter395.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.buddies is not None:
            oprot.writeFieldBegin('buddies', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.buddies))
            for iter396 in self.buddies:
                iter396.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.endOfResult is not None:
            oprot.writeFieldBegin('endOfResult', TType.BOOL, 91)
            oprot.writeBool(self.endOfResult)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PendingAgreementsResponse(object):
    """
    Attributes:
     - pendingAgreements

    """


    def __init__(self, pendingAgreements=None,):
        self.pendingAgreements = pendingAgreements

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.pendingAgreements = []
                    (_etype400, _size397) = iprot.readListBegin()
                    for _i401 in range(_size397):
                        _elem402 = iprot.readI32()
                        self.pendingAgreements.append(_elem402)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PendingAgreementsResponse')
        if self.pendingAgreements is not None:
            oprot.writeFieldBegin('pendingAgreements', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.pendingAgreements))
            for iter403 in self.pendingAgreements:
                oprot.writeI32(iter403)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PushRecvReport(object):
    """
    Attributes:
     - pushTrackingId
     - recvTimestamp
     - battery
     - batteryMode
     - clientNetworkType
     - carrierCode
     - displayTimestamp

    """


    def __init__(self, pushTrackingId=None, recvTimestamp=None, battery=None, batteryMode=None, clientNetworkType=None, carrierCode=None, displayTimestamp=None,):
        self.pushTrackingId = pushTrackingId
        self.recvTimestamp = recvTimestamp
        self.battery = battery
        self.batteryMode = batteryMode
        self.clientNetworkType = clientNetworkType
        self.carrierCode = carrierCode
        self.displayTimestamp = displayTimestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pushTrackingId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.recvTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.battery = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.batteryMode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.clientNetworkType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.carrierCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.displayTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PushRecvReport')
        if self.pushTrackingId is not None:
            oprot.writeFieldBegin('pushTrackingId', TType.STRING, 1)
            oprot.writeString(self.pushTrackingId.encode('utf-8') if sys.version_info[0] == 2 else self.pushTrackingId)
            oprot.writeFieldEnd()
        if self.recvTimestamp is not None:
            oprot.writeFieldBegin('recvTimestamp', TType.I64, 2)
            oprot.writeI64(self.recvTimestamp)
            oprot.writeFieldEnd()
        if self.battery is not None:
            oprot.writeFieldBegin('battery', TType.I64, 3)
            oprot.writeI64(self.battery)
            oprot.writeFieldEnd()
        if self.batteryMode is not None:
            oprot.writeFieldBegin('batteryMode', TType.I32, 4)
            oprot.writeI32(self.batteryMode)
            oprot.writeFieldEnd()
        if self.clientNetworkType is not None:
            oprot.writeFieldBegin('clientNetworkType', TType.I32, 5)
            oprot.writeI32(self.clientNetworkType)
            oprot.writeFieldEnd()
        if self.carrierCode is not None:
            oprot.writeFieldBegin('carrierCode', TType.STRING, 6)
            oprot.writeString(self.carrierCode.encode('utf-8') if sys.version_info[0] == 2 else self.carrierCode)
            oprot.writeFieldEnd()
        if self.displayTimestamp is not None:
            oprot.writeFieldBegin('displayTimestamp', TType.I64, 7)
            oprot.writeI64(self.displayTimestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RegisterWithPhoneNumberResult(object):
    """
    Attributes:
     - authToken
     - recommendEmailRegistration
     - certificate

    """


    def __init__(self, authToken=None, recommendEmailRegistration=None, certificate=None,):
        self.authToken = authToken
        self.recommendEmailRegistration = recommendEmailRegistration
        self.certificate = certificate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.authToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.recommendEmailRegistration = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.certificate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RegisterWithPhoneNumberResult')
        if self.authToken is not None:
            oprot.writeFieldBegin('authToken', TType.STRING, 1)
            oprot.writeString(self.authToken.encode('utf-8') if sys.version_info[0] == 2 else self.authToken)
            oprot.writeFieldEnd()
        if self.recommendEmailRegistration is not None:
            oprot.writeFieldBegin('recommendEmailRegistration', TType.BOOL, 2)
            oprot.writeBool(self.recommendEmailRegistration)
            oprot.writeFieldEnd()
        if self.certificate is not None:
            oprot.writeFieldBegin('certificate', TType.STRING, 3)
            oprot.writeString(self.certificate.encode('utf-8') if sys.version_info[0] == 2 else self.certificate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TMessageReadRangeEntry(object):
    """
    Attributes:
     - startMessageId
     - endMessageId
     - startTime
     - endTime

    """


    def __init__(self, startMessageId=None, endMessageId=None, startTime=None, endTime=None,):
        self.startMessageId = startMessageId
        self.endMessageId = endMessageId
        self.startTime = startTime
        self.endTime = endTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.startMessageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.endMessageId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.endTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TMessageReadRangeEntry')
        if self.startMessageId is not None:
            oprot.writeFieldBegin('startMessageId', TType.I64, 1)
            oprot.writeI64(self.startMessageId)
            oprot.writeFieldEnd()
        if self.endMessageId is not None:
            oprot.writeFieldBegin('endMessageId', TType.I64, 2)
            oprot.writeI64(self.endMessageId)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 3)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.I64, 4)
            oprot.writeI64(self.endTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TMessageReadRange(object):
    """
    Attributes:
     - chatId
     - ranges

    """


    def __init__(self, chatId=None, ranges=None,):
        self.chatId = chatId
        self.ranges = ranges

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.chatId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.ranges = {}
                    (_ktype405, _vtype406, _size404) = iprot.readMapBegin()
                    for _i408 in range(_size404):
                        _key409 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val410 = []
                        (_etype414, _size411) = iprot.readListBegin()
                        for _i415 in range(_size411):
                            _elem416 = TMessageReadRangeEntry()
                            _elem416.read(iprot)
                            _val410.append(_elem416)
                        iprot.readListEnd()
                        self.ranges[_key409] = _val410
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TMessageReadRange')
        if self.chatId is not None:
            oprot.writeFieldBegin('chatId', TType.STRING, 1)
            oprot.writeString(self.chatId.encode('utf-8') if sys.version_info[0] == 2 else self.chatId)
            oprot.writeFieldEnd()
        if self.ranges is not None:
            oprot.writeFieldBegin('ranges', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.ranges))
            for kiter417, viter418 in self.ranges.items():
                oprot.writeString(kiter417.encode('utf-8') if sys.version_info[0] == 2 else kiter417)
                oprot.writeListBegin(TType.STRUCT, len(viter418))
                for iter419 in viter418:
                    iter419.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContactModification(object):
    """
    Attributes:
     - type
     - luid
     - phones
     - emails
     - userids
     - mobileContactName
     - phoneticName

    """


    def __init__(self, type=None, luid=None, phones=None, emails=None, userids=None, mobileContactName=None, phoneticName=None,):
        self.type = type
        self.luid = luid
        self.phones = phones
        self.emails = emails
        self.userids = userids
        self.mobileContactName = mobileContactName
        self.phoneticName = phoneticName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.luid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.phones = []
                    (_etype423, _size420) = iprot.readListBegin()
                    for _i424 in range(_size420):
                        _elem425 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.phones.append(_elem425)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.emails = []
                    (_etype429, _size426) = iprot.readListBegin()
                    for _i430 in range(_size426):
                        _elem431 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.emails.append(_elem431)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.userids = []
                    (_etype435, _size432) = iprot.readListBegin()
                    for _i436 in range(_size432):
                        _elem437 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.userids.append(_elem437)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.mobileContactName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.phoneticName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContactModification')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.luid is not None:
            oprot.writeFieldBegin('luid', TType.STRING, 2)
            oprot.writeString(self.luid.encode('utf-8') if sys.version_info[0] == 2 else self.luid)
            oprot.writeFieldEnd()
        if self.phones is not None:
            oprot.writeFieldBegin('phones', TType.LIST, 11)
            oprot.writeListBegin(TType.STRING, len(self.phones))
            for iter438 in self.phones:
                oprot.writeString(iter438.encode('utf-8') if sys.version_info[0] == 2 else iter438)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.emails is not None:
            oprot.writeFieldBegin('emails', TType.LIST, 12)
            oprot.writeListBegin(TType.STRING, len(self.emails))
            for iter439 in self.emails:
                oprot.writeString(iter439.encode('utf-8') if sys.version_info[0] == 2 else iter439)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.userids is not None:
            oprot.writeFieldBegin('userids', TType.LIST, 13)
            oprot.writeListBegin(TType.STRING, len(self.userids))
            for iter440 in self.userids:
                oprot.writeString(iter440.encode('utf-8') if sys.version_info[0] == 2 else iter440)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.mobileContactName is not None:
            oprot.writeFieldBegin('mobileContactName', TType.STRING, 14)
            oprot.writeString(self.mobileContactName.encode('utf-8') if sys.version_info[0] == 2 else self.mobileContactName)
            oprot.writeFieldEnd()
        if self.phoneticName is not None:
            oprot.writeFieldBegin('phoneticName', TType.STRING, 15)
            oprot.writeString(self.phoneticName.encode('utf-8') if sys.version_info[0] == 2 else self.phoneticName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FollowMid(object):
    """
    Attributes:
     - mid
     - eMid

    """


    def __init__(self, mid=None, eMid=None,):
        self.mid = mid
        self.eMid = eMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.mid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.eMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FollowMid')
        if self.mid is not None:
            oprot.writeFieldBegin('mid', TType.STRING, 1)
            oprot.writeString(self.mid.encode('utf-8') if sys.version_info[0] == 2 else self.mid)
            oprot.writeFieldEnd()
        if self.eMid is not None:
            oprot.writeFieldBegin('eMid', TType.STRING, 2)
            oprot.writeString(self.eMid.encode('utf-8') if sys.version_info[0] == 2 else self.eMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FollowRequest(object):
    """
    Attributes:
     - followMid

    """


    def __init__(self, followMid=None,):
        self.followMid = followMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.followMid = FollowMid()
                    self.followMid.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FollowRequest')
        if self.followMid is not None:
            oprot.writeFieldBegin('followMid', TType.STRUCT, 1)
            self.followMid.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RemoveFollowerRequest(object):
    """
    Attributes:
     - followMid

    """


    def __init__(self, followMid=None,):
        self.followMid = followMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.followMid = FollowMid()
                    self.followMid.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RemoveFollowerRequest')
        if self.followMid is not None:
            oprot.writeFieldBegin('followMid', TType.STRUCT, 1)
            self.followMid.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UnfollowRequest(object):
    """
    Attributes:
     - followMid

    """


    def __init__(self, followMid=None,):
        self.followMid = followMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.followMid = FollowMid()
                    self.followMid.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UnfollowRequest')
        if self.followMid is not None:
            oprot.writeFieldBegin('followMid', TType.STRUCT, 1)
            self.followMid.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFollowersRequest(object):
    """
    Attributes:
     - followMid
     - cursor

    """


    def __init__(self, followMid=None, cursor=None,):
        self.followMid = followMid
        self.cursor = cursor

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.followMid = FollowMid()
                    self.followMid.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cursor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetFollowersRequest')
        if self.followMid is not None:
            oprot.writeFieldBegin('followMid', TType.STRUCT, 1)
            self.followMid.write(oprot)
            oprot.writeFieldEnd()
        if self.cursor is not None:
            oprot.writeFieldBegin('cursor', TType.STRING, 2)
            oprot.writeString(self.cursor.encode('utf-8') if sys.version_info[0] == 2 else self.cursor)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFollowersResponse(object):
    """
    Attributes:
     - profiles
     - cursor
     - followingCount
     - followerCount

    """


    def __init__(self, profiles=None, cursor=None, followingCount=None, followerCount=None,):
        self.profiles = profiles
        self.cursor = cursor
        self.followingCount = followingCount
        self.followerCount = followerCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.profiles = []
                    (_etype444, _size441) = iprot.readListBegin()
                    for _i445 in range(_size441):
                        _elem446 = FollowProfile()
                        _elem446.read(iprot)
                        self.profiles.append(_elem446)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cursor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.followingCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.followerCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetFollowersResponse')
        if self.profiles is not None:
            oprot.writeFieldBegin('profiles', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.profiles))
            for iter447 in self.profiles:
                iter447.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cursor is not None:
            oprot.writeFieldBegin('cursor', TType.STRING, 2)
            oprot.writeString(self.cursor.encode('utf-8') if sys.version_info[0] == 2 else self.cursor)
            oprot.writeFieldEnd()
        if self.followingCount is not None:
            oprot.writeFieldBegin('followingCount', TType.I64, 3)
            oprot.writeI64(self.followingCount)
            oprot.writeFieldEnd()
        if self.followerCount is not None:
            oprot.writeFieldBegin('followerCount', TType.I64, 4)
            oprot.writeI64(self.followerCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFollowingsRequest(object):
    """
    Attributes:
     - followMid
     - cursor

    """


    def __init__(self, followMid=None, cursor=None,):
        self.followMid = followMid
        self.cursor = cursor

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.followMid = FollowMid()
                    self.followMid.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cursor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetFollowingsRequest')
        if self.followMid is not None:
            oprot.writeFieldBegin('followMid', TType.STRUCT, 1)
            self.followMid.write(oprot)
            oprot.writeFieldEnd()
        if self.cursor is not None:
            oprot.writeFieldBegin('cursor', TType.STRING, 2)
            oprot.writeString(self.cursor.encode('utf-8') if sys.version_info[0] == 2 else self.cursor)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetFollowingsResponse(object):
    """
    Attributes:
     - profiles
     - cursor
     - followingCount
     - followerCount

    """


    def __init__(self, profiles=None, cursor=None, followingCount=None, followerCount=None,):
        self.profiles = profiles
        self.cursor = cursor
        self.followingCount = followingCount
        self.followerCount = followerCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.profiles = []
                    (_etype451, _size448) = iprot.readListBegin()
                    for _i452 in range(_size448):
                        _elem453 = FollowProfile()
                        _elem453.read(iprot)
                        self.profiles.append(_elem453)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cursor = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.followingCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.followerCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetFollowingsResponse')
        if self.profiles is not None:
            oprot.writeFieldBegin('profiles', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.profiles))
            for iter454 in self.profiles:
                iter454.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cursor is not None:
            oprot.writeFieldBegin('cursor', TType.STRING, 2)
            oprot.writeString(self.cursor.encode('utf-8') if sys.version_info[0] == 2 else self.cursor)
            oprot.writeFieldEnd()
        if self.followingCount is not None:
            oprot.writeFieldBegin('followingCount', TType.I64, 3)
            oprot.writeI64(self.followingCount)
            oprot.writeFieldEnd()
        if self.followerCount is not None:
            oprot.writeFieldBegin('followerCount', TType.I64, 4)
            oprot.writeI64(self.followerCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FollowBuddyDetail(object):
    """
    Attributes:
     - iconType

    """


    def __init__(self, iconType=None,):
        self.iconType = iconType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.iconType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FollowBuddyDetail')
        if self.iconType is not None:
            oprot.writeFieldBegin('iconType', TType.I32, 1)
            oprot.writeI32(self.iconType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Ticket(object):
    """
    Attributes:
     - id
     - expirationTime
     - maxUseCount

    """


    def __init__(self, id=None, expirationTime=None, maxUseCount=None,):
        self.id = id
        self.expirationTime = expirationTime
        self.maxUseCount = maxUseCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.expirationTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.maxUseCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Ticket')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.expirationTime is not None:
            oprot.writeFieldBegin('expirationTime', TType.I64, 10)
            oprot.writeI64(self.expirationTime)
            oprot.writeFieldEnd()
        if self.maxUseCount is not None:
            oprot.writeFieldBegin('maxUseCount', TType.I32, 21)
            oprot.writeI32(self.maxUseCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatRoomAnnouncementContentMetadata(object):
    """
    Attributes:
     - replace
     - sticonOwnership

    """


    def __init__(self, replace=None, sticonOwnership=None,):
        self.replace = replace
        self.sticonOwnership = sticonOwnership

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.replace = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sticonOwnership = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChatRoomAnnouncementContentMetadata')
        if self.replace is not None:
            oprot.writeFieldBegin('replace', TType.STRING, 1)
            oprot.writeString(self.replace.encode('utf-8') if sys.version_info[0] == 2 else self.replace)
            oprot.writeFieldEnd()
        if self.sticonOwnership is not None:
            oprot.writeFieldBegin('sticonOwnership', TType.STRING, 2)
            oprot.writeString(self.sticonOwnership.encode('utf-8') if sys.version_info[0] == 2 else self.sticonOwnership)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatRoomAnnouncementContents(object):
    """
    Attributes:
     - displayFields
     - text
     - link
     - thumbnail
     - contentMetadata

    """


    def __init__(self, displayFields=None, text=None, link=None, thumbnail=None, contentMetadata=None,):
        self.displayFields = displayFields
        self.text = text
        self.link = link
        self.thumbnail = thumbnail
        self.contentMetadata = contentMetadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.displayFields = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.link = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.thumbnail = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.contentMetadata = ChatRoomAnnouncementContentMetadata()
                    self.contentMetadata.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChatRoomAnnouncementContents')
        if self.displayFields is not None:
            oprot.writeFieldBegin('displayFields', TType.I32, 1)
            oprot.writeI32(self.displayFields)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 2)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.link is not None:
            oprot.writeFieldBegin('link', TType.STRING, 3)
            oprot.writeString(self.link.encode('utf-8') if sys.version_info[0] == 2 else self.link)
            oprot.writeFieldEnd()
        if self.thumbnail is not None:
            oprot.writeFieldBegin('thumbnail', TType.STRING, 4)
            oprot.writeString(self.thumbnail.encode('utf-8') if sys.version_info[0] == 2 else self.thumbnail)
            oprot.writeFieldEnd()
        if self.contentMetadata is not None:
            oprot.writeFieldBegin('contentMetadata', TType.STRUCT, 5)
            self.contentMetadata.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatRoomAnnouncement(object):
    """
    Attributes:
     - announcementSeq
     - type
     - contents
     - creatorMid
     - createdTime
     - deletePermission

    """


    def __init__(self, announcementSeq=None, type=None, contents=None, creatorMid=None, createdTime=None, deletePermission=None,):
        self.announcementSeq = announcementSeq
        self.type = type
        self.contents = contents
        self.creatorMid = creatorMid
        self.createdTime = createdTime
        self.deletePermission = deletePermission

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.announcementSeq = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.contents = ChatRoomAnnouncementContents()
                    self.contents.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.creatorMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.deletePermission = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChatRoomAnnouncement')
        if self.announcementSeq is not None:
            oprot.writeFieldBegin('announcementSeq', TType.I64, 1)
            oprot.writeI64(self.announcementSeq)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.contents is not None:
            oprot.writeFieldBegin('contents', TType.STRUCT, 3)
            self.contents.write(oprot)
            oprot.writeFieldEnd()
        if self.creatorMid is not None:
            oprot.writeFieldBegin('creatorMid', TType.STRING, 4)
            oprot.writeString(self.creatorMid.encode('utf-8') if sys.version_info[0] == 2 else self.creatorMid)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 5)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.deletePermission is not None:
            oprot.writeFieldBegin('deletePermission', TType.I32, 6)
            oprot.writeI32(self.deletePermission)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatEffectMetaContent(object):
    """
    Attributes:
     - url
     - checksum

    """


    def __init__(self, url=None, checksum=None,):
        self.url = url
        self.checksum = checksum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.checksum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChatEffectMetaContent')
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 1)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.checksum is not None:
            oprot.writeFieldBegin('checksum', TType.STRING, 2)
            oprot.writeString(self.checksum.encode('utf-8') if sys.version_info[0] == 2 else self.checksum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatEffectMeta(object):
    """
    Attributes:
     - contentId
     - category
     - name
     - defaultContent
     - optionalContents
     - keywords
     - beginTimeMillis
     - endTimeMillis
     - createdTimeMillis
     - updatedTimeMillis

    """


    def __init__(self, contentId=None, category=None, name=None, defaultContent=None, optionalContents=None, keywords=None, beginTimeMillis=None, endTimeMillis=None, createdTimeMillis=None, updatedTimeMillis=None,):
        self.contentId = contentId
        self.category = category
        self.name = name
        self.defaultContent = defaultContent
        self.optionalContents = optionalContents
        self.keywords = keywords
        self.beginTimeMillis = beginTimeMillis
        self.endTimeMillis = endTimeMillis
        self.createdTimeMillis = createdTimeMillis
        self.updatedTimeMillis = updatedTimeMillis

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.contentId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.category = Category()
                    self.category.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.name = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.defaultContent = ChatEffectMetaContent()
                    self.defaultContent.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.MAP:
                    self.optionalContents = {}
                    (_ktype456, _vtype457, _size455) = iprot.readMapBegin()
                    for _i459 in range(_size455):
                        _key460 = iprot.readI32()
                        _val461 = ChatEffectMetaContent()
                        _val461.read(iprot)
                        self.optionalContents[_key460] = _val461
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.SET:
                    self.keywords = set()
                    (_etype465, _size462) = iprot.readSetBegin()
                    for _i466 in range(_size462):
                        _elem467 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.keywords.add(_elem467)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.beginTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.endTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.createdTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.updatedTimeMillis = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChatEffectMeta')
        if self.contentId is not None:
            oprot.writeFieldBegin('contentId', TType.I64, 1)
            oprot.writeI64(self.contentId)
            oprot.writeFieldEnd()
        if self.category is not None:
            oprot.writeFieldBegin('category', TType.STRUCT, 2)
            self.category.write(oprot)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.I32, 3)
            oprot.writeI32(self.name)
            oprot.writeFieldEnd()
        if self.defaultContent is not None:
            oprot.writeFieldBegin('defaultContent', TType.STRUCT, 4)
            self.defaultContent.write(oprot)
            oprot.writeFieldEnd()
        if self.optionalContents is not None:
            oprot.writeFieldBegin('optionalContents', TType.MAP, 5)
            oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.optionalContents))
            for kiter468, viter469 in self.optionalContents.items():
                oprot.writeI32(kiter468)
                viter469.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.keywords is not None:
            oprot.writeFieldBegin('keywords', TType.SET, 6)
            oprot.writeSetBegin(TType.STRING, len(self.keywords))
            for iter470 in self.keywords:
                oprot.writeString(iter470.encode('utf-8') if sys.version_info[0] == 2 else iter470)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.beginTimeMillis is not None:
            oprot.writeFieldBegin('beginTimeMillis', TType.I64, 7)
            oprot.writeI64(self.beginTimeMillis)
            oprot.writeFieldEnd()
        if self.endTimeMillis is not None:
            oprot.writeFieldBegin('endTimeMillis', TType.I64, 8)
            oprot.writeI64(self.endTimeMillis)
            oprot.writeFieldEnd()
        if self.createdTimeMillis is not None:
            oprot.writeFieldBegin('createdTimeMillis', TType.I64, 9)
            oprot.writeI64(self.createdTimeMillis)
            oprot.writeFieldEnd()
        if self.updatedTimeMillis is not None:
            oprot.writeFieldBegin('updatedTimeMillis', TType.I64, 10)
            oprot.writeI64(self.updatedTimeMillis)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ChatRoomBGM(object):
    """
    Attributes:
     - creatorMid
     - createdTime
     - chatRoomBGMInfo

    """


    def __init__(self, creatorMid=None, createdTime=None, chatRoomBGMInfo=None,):
        self.creatorMid = creatorMid
        self.createdTime = createdTime
        self.chatRoomBGMInfo = chatRoomBGMInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.creatorMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.chatRoomBGMInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ChatRoomBGM')
        if self.creatorMid is not None:
            oprot.writeFieldBegin('creatorMid', TType.STRING, 1)
            oprot.writeString(self.creatorMid.encode('utf-8') if sys.version_info[0] == 2 else self.creatorMid)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.chatRoomBGMInfo is not None:
            oprot.writeFieldBegin('chatRoomBGMInfo', TType.STRING, 3)
            oprot.writeString(self.chatRoomBGMInfo.encode('utf-8') if sys.version_info[0] == 2 else self.chatRoomBGMInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class E2EEGroupSharedKey(object):
    """
    Attributes:
     - keyVersion
     - groupKeyId
     - creator
     - creatorKeyId
     - receiver
     - receiverKeyId
     - encryptedSharedKey
     - allowedTypes
     - specVersion

    """


    def __init__(self, keyVersion=None, groupKeyId=None, creator=None, creatorKeyId=None, receiver=None, receiverKeyId=None, encryptedSharedKey=None, allowedTypes=None, specVersion=None,):
        self.keyVersion = keyVersion
        self.groupKeyId = groupKeyId
        self.creator = creator
        self.creatorKeyId = creatorKeyId
        self.receiver = receiver
        self.receiverKeyId = receiverKeyId
        self.encryptedSharedKey = encryptedSharedKey
        self.allowedTypes = allowedTypes
        self.specVersion = specVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.keyVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.groupKeyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.creator = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.creatorKeyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.receiver = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.receiverKeyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.encryptedSharedKey = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.SET:
                    self.allowedTypes = set()
                    (_etype474, _size471) = iprot.readSetBegin()
                    for _i475 in range(_size471):
                        _elem476 = iprot.readI32()
                        self.allowedTypes.add(_elem476)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.specVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('E2EEGroupSharedKey')
        if self.keyVersion is not None:
            oprot.writeFieldBegin('keyVersion', TType.I32, 1)
            oprot.writeI32(self.keyVersion)
            oprot.writeFieldEnd()
        if self.groupKeyId is not None:
            oprot.writeFieldBegin('groupKeyId', TType.I32, 2)
            oprot.writeI32(self.groupKeyId)
            oprot.writeFieldEnd()
        if self.creator is not None:
            oprot.writeFieldBegin('creator', TType.STRING, 3)
            oprot.writeString(self.creator.encode('utf-8') if sys.version_info[0] == 2 else self.creator)
            oprot.writeFieldEnd()
        if self.creatorKeyId is not None:
            oprot.writeFieldBegin('creatorKeyId', TType.I32, 4)
            oprot.writeI32(self.creatorKeyId)
            oprot.writeFieldEnd()
        if self.receiver is not None:
            oprot.writeFieldBegin('receiver', TType.STRING, 5)
            oprot.writeString(self.receiver.encode('utf-8') if sys.version_info[0] == 2 else self.receiver)
            oprot.writeFieldEnd()
        if self.receiverKeyId is not None:
            oprot.writeFieldBegin('receiverKeyId', TType.I32, 6)
            oprot.writeI32(self.receiverKeyId)
            oprot.writeFieldEnd()
        if self.encryptedSharedKey is not None:
            oprot.writeFieldBegin('encryptedSharedKey', TType.STRING, 7)
            oprot.writeBinary(self.encryptedSharedKey)
            oprot.writeFieldEnd()
        if self.allowedTypes is not None:
            oprot.writeFieldBegin('allowedTypes', TType.SET, 8)
            oprot.writeSetBegin(TType.I32, len(self.allowedTypes))
            for iter477 in self.allowedTypes:
                oprot.writeI32(iter477)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.specVersion is not None:
            oprot.writeFieldBegin('specVersion', TType.I32, 9)
            oprot.writeI32(self.specVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class E2EEPublicKey(object):
    """
    Attributes:
     - version
     - keyId
     - keyData
     - createdTime

    """


    def __init__(self, version=None, keyId=None, keyData=None, createdTime=None,):
        self.version = version
        self.keyId = keyId
        self.keyData = keyData
        self.createdTime = createdTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.version = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.keyId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.keyData = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('E2EEPublicKey')
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I32, 1)
            oprot.writeI32(self.version)
            oprot.writeFieldEnd()
        if self.keyId is not None:
            oprot.writeFieldBegin('keyId', TType.I32, 2)
            oprot.writeI32(self.keyId)
            oprot.writeFieldEnd()
        if self.keyData is not None:
            oprot.writeFieldBegin('keyData', TType.STRING, 4)
            oprot.writeBinary(self.keyData)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 5)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class E2EENegotiationResult(object):
    """
    Attributes:
     - allowedTypes
     - publicKey
     - specVersion

    """


    def __init__(self, allowedTypes=None, publicKey=None, specVersion=None,):
        self.allowedTypes = allowedTypes
        self.publicKey = publicKey
        self.specVersion = specVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.allowedTypes = set()
                    (_etype481, _size478) = iprot.readSetBegin()
                    for _i482 in range(_size478):
                        _elem483 = iprot.readI32()
                        self.allowedTypes.add(_elem483)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.publicKey = E2EEPublicKey()
                    self.publicKey.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.specVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('E2EENegotiationResult')
        if self.allowedTypes is not None:
            oprot.writeFieldBegin('allowedTypes', TType.SET, 1)
            oprot.writeSetBegin(TType.I32, len(self.allowedTypes))
            for iter484 in self.allowedTypes:
                oprot.writeI32(iter484)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.publicKey is not None:
            oprot.writeFieldBegin('publicKey', TType.STRUCT, 2)
            self.publicKey.write(oprot)
            oprot.writeFieldEnd()
        if self.specVersion is not None:
            oprot.writeFieldBegin('specVersion', TType.I32, 3)
            oprot.writeI32(self.specVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RSAKey(object):
    """
    Attributes:
     - keynm
     - nvalue
     - evalue
     - sessionKey

    """


    def __init__(self, keynm=None, nvalue=None, evalue=None, sessionKey=None,):
        self.keynm = keynm
        self.nvalue = nvalue
        self.evalue = evalue
        self.sessionKey = sessionKey

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.keynm = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nvalue = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.evalue = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sessionKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RSAKey')
        if self.keynm is not None:
            oprot.writeFieldBegin('keynm', TType.STRING, 1)
            oprot.writeString(self.keynm.encode('utf-8') if sys.version_info[0] == 2 else self.keynm)
            oprot.writeFieldEnd()
        if self.nvalue is not None:
            oprot.writeFieldBegin('nvalue', TType.STRING, 2)
            oprot.writeString(self.nvalue.encode('utf-8') if sys.version_info[0] == 2 else self.nvalue)
            oprot.writeFieldEnd()
        if self.evalue is not None:
            oprot.writeFieldBegin('evalue', TType.STRING, 3)
            oprot.writeString(self.evalue.encode('utf-8') if sys.version_info[0] == 2 else self.evalue)
            oprot.writeFieldEnd()
        if self.sessionKey is not None:
            oprot.writeFieldBegin('sessionKey', TType.STRING, 4)
            oprot.writeString(self.sessionKey.encode('utf-8') if sys.version_info[0] == 2 else self.sessionKey)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Category(object):
    """
    Attributes:
     - id
     - name

    """


    def __init__(self, id=None, name=None,):
        self.id = id
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.name = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Category')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.I32, 2)
            oprot.writeI32(self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FindChatByTicketRequest(object):
    """
    Attributes:
     - ticketId

    """


    def __init__(self, ticketId=None,):
        self.ticketId = ticketId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ticketId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FindChatByTicketRequest')
        if self.ticketId is not None:
            oprot.writeFieldBegin('ticketId', TType.STRING, 1)
            oprot.writeString(self.ticketId.encode('utf-8') if sys.version_info[0] == 2 else self.ticketId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FindChatByTicketResponse(object):
    """
    Attributes:
     - chat

    """


    def __init__(self, chat=None,):
        self.chat = chat

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.chat = Chat()
                    self.chat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FindChatByTicketResponse')
        if self.chat is not None:
            oprot.writeFieldBegin('chat', TType.STRUCT, 1)
            self.chat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReissueChatTicketRequest(object):
    """
    Attributes:
     - reqSeq
     - groupMid

    """


    def __init__(self, reqSeq=None, groupMid=None,):
        self.reqSeq = reqSeq
        self.groupMid = groupMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.groupMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReissueChatTicketRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.groupMid is not None:
            oprot.writeFieldBegin('groupMid', TType.STRING, 2)
            oprot.writeString(self.groupMid.encode('utf-8') if sys.version_info[0] == 2 else self.groupMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReissueChatTicketResponse(object):
    """
    Attributes:
     - ticketId

    """


    def __init__(self, ticketId=None,):
        self.ticketId = ticketId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ticketId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReissueChatTicketResponse')
        if self.ticketId is not None:
            oprot.writeFieldBegin('ticketId', TType.STRING, 1)
            oprot.writeString(self.ticketId.encode('utf-8') if sys.version_info[0] == 2 else self.ticketId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AcceptChatInvitationByTicketRequest(object):
    """
    Attributes:
     - reqSeq
     - chatMid
     - ticketId

    """


    def __init__(self, reqSeq=None, chatMid=None, ticketId=None,):
        self.reqSeq = reqSeq
        self.chatMid = chatMid
        self.ticketId = ticketId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.ticketId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AcceptChatInvitationByTicketRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid.encode('utf-8') if sys.version_info[0] == 2 else self.chatMid)
            oprot.writeFieldEnd()
        if self.ticketId is not None:
            oprot.writeFieldBegin('ticketId', TType.STRING, 3)
            oprot.writeString(self.ticketId.encode('utf-8') if sys.version_info[0] == 2 else self.ticketId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AcceptChatInvitationByTicketResponse(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AcceptChatInvitationByTicketResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RejectChatInvitationRequest(object):
    """
    Attributes:
     - reqSeq
     - chatMid

    """


    def __init__(self, reqSeq=None, chatMid=None,):
        self.reqSeq = reqSeq
        self.chatMid = chatMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RejectChatInvitationRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid.encode('utf-8') if sys.version_info[0] == 2 else self.chatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RejectChatInvitationResponse(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RejectChatInvitationResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InviteIntoChatRequest(object):
    """
    Attributes:
     - reqSeq
     - chatMid
     - targetUserMids

    """


    def __init__(self, reqSeq=None, chatMid=None, targetUserMids=None,):
        self.reqSeq = reqSeq
        self.chatMid = chatMid
        self.targetUserMids = targetUserMids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.targetUserMids = set()
                    (_etype488, _size485) = iprot.readSetBegin()
                    for _i489 in range(_size485):
                        _elem490 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.targetUserMids.add(_elem490)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InviteIntoChatRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid.encode('utf-8') if sys.version_info[0] == 2 else self.chatMid)
            oprot.writeFieldEnd()
        if self.targetUserMids is not None:
            oprot.writeFieldBegin('targetUserMids', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.targetUserMids))
            for iter491 in self.targetUserMids:
                oprot.writeString(iter491.encode('utf-8') if sys.version_info[0] == 2 else iter491)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InviteIntoChatResponse(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InviteIntoChatResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DeleteOtherFromChatRequest(object):
    """
    Attributes:
     - reqSeq
     - chatMid
     - targetUserMids

    """


    def __init__(self, reqSeq=None, chatMid=None, targetUserMids=None,):
        self.reqSeq = reqSeq
        self.chatMid = chatMid
        self.targetUserMids = targetUserMids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.targetUserMids = set()
                    (_etype495, _size492) = iprot.readSetBegin()
                    for _i496 in range(_size492):
                        _elem497 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.targetUserMids.add(_elem497)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteOtherFromChatRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid.encode('utf-8') if sys.version_info[0] == 2 else self.chatMid)
            oprot.writeFieldEnd()
        if self.targetUserMids is not None:
            oprot.writeFieldBegin('targetUserMids', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.targetUserMids))
            for iter498 in self.targetUserMids:
                oprot.writeString(iter498.encode('utf-8') if sys.version_info[0] == 2 else iter498)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DeleteOtherFromChatResponse(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteOtherFromChatResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CancelChatInvitationRequest(object):
    """
    Attributes:
     - reqSeq
     - chatMid
     - targetUserMids

    """


    def __init__(self, reqSeq=None, chatMid=None, targetUserMids=None,):
        self.reqSeq = reqSeq
        self.chatMid = chatMid
        self.targetUserMids = targetUserMids

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.targetUserMids = set()
                    (_etype502, _size499) = iprot.readSetBegin()
                    for _i503 in range(_size499):
                        _elem504 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.targetUserMids.add(_elem504)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CancelChatInvitationRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid.encode('utf-8') if sys.version_info[0] == 2 else self.chatMid)
            oprot.writeFieldEnd()
        if self.targetUserMids is not None:
            oprot.writeFieldBegin('targetUserMids', TType.SET, 3)
            oprot.writeSetBegin(TType.STRING, len(self.targetUserMids))
            for iter505 in self.targetUserMids:
                oprot.writeString(iter505.encode('utf-8') if sys.version_info[0] == 2 else iter505)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CancelChatInvitationResponse(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CancelChatInvitationResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DeleteSelfFromChatRequest(object):
    """
    Attributes:
     - reqSeq
     - chatMid
     - lastSeenMessageDeliveredTime
     - lastSeenMessageId
     - lastMessageDeliveredTime
     - lastMessageId

    """


    def __init__(self, reqSeq=None, chatMid=None, lastSeenMessageDeliveredTime=None, lastSeenMessageId=None, lastMessageDeliveredTime=None, lastMessageId=None,):
        self.reqSeq = reqSeq
        self.chatMid = chatMid
        self.lastSeenMessageDeliveredTime = lastSeenMessageDeliveredTime
        self.lastSeenMessageId = lastSeenMessageId
        self.lastMessageDeliveredTime = lastMessageDeliveredTime
        self.lastMessageId = lastMessageId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastSeenMessageDeliveredTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.lastSeenMessageId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.lastMessageDeliveredTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.lastMessageId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteSelfFromChatRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid.encode('utf-8') if sys.version_info[0] == 2 else self.chatMid)
            oprot.writeFieldEnd()
        if self.lastSeenMessageDeliveredTime is not None:
            oprot.writeFieldBegin('lastSeenMessageDeliveredTime', TType.I64, 3)
            oprot.writeI64(self.lastSeenMessageDeliveredTime)
            oprot.writeFieldEnd()
        if self.lastSeenMessageId is not None:
            oprot.writeFieldBegin('lastSeenMessageId', TType.STRING, 4)
            oprot.writeString(self.lastSeenMessageId.encode('utf-8') if sys.version_info[0] == 2 else self.lastSeenMessageId)
            oprot.writeFieldEnd()
        if self.lastMessageDeliveredTime is not None:
            oprot.writeFieldBegin('lastMessageDeliveredTime', TType.I64, 5)
            oprot.writeI64(self.lastMessageDeliveredTime)
            oprot.writeFieldEnd()
        if self.lastMessageId is not None:
            oprot.writeFieldBegin('lastMessageId', TType.STRING, 6)
            oprot.writeString(self.lastMessageId.encode('utf-8') if sys.version_info[0] == 2 else self.lastMessageId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DeleteSelfFromChatResponse(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DeleteSelfFromChatResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AcceptChatInvitationRequest(object):
    """
    Attributes:
     - reqSeq
     - chatMid

    """


    def __init__(self, reqSeq=None, chatMid=None,):
        self.reqSeq = reqSeq
        self.chatMid = chatMid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.chatMid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AcceptChatInvitationRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.chatMid is not None:
            oprot.writeFieldBegin('chatMid', TType.STRING, 2)
            oprot.writeString(self.chatMid.encode('utf-8') if sys.version_info[0] == 2 else self.chatMid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AcceptChatInvitationResponse(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AcceptChatInvitationResponse')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CreateChatRequest(object):
    """
    Attributes:
     - reqSeq
     - type
     - name
     - targetUserMids
     - picturePath

    """


    def __init__(self, reqSeq=None, type=None, name=None, targetUserMids=None, picturePath=None,):
        self.reqSeq = reqSeq
        self.type = type
        self.name = name
        self.targetUserMids = targetUserMids
        self.picturePath = picturePath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.reqSeq = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.name = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.targetUserMids = set()
                    (_etype509, _size506) = iprot.readSetBegin()
                    for _i510 in range(_size506):
                        _elem511 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.targetUserMids.add(_elem511)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.picturePath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CreateChatRequest')
        if self.reqSeq is not None:
            oprot.writeFieldBegin('reqSeq', TType.I32, 1)
            oprot.writeI32(self.reqSeq)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.I32, 3)
            oprot.writeI32(self.name)
            oprot.writeFieldEnd()
        if self.targetUserMids is not None:
            oprot.writeFieldBegin('targetUserMids', TType.SET, 4)
            oprot.writeSetBegin(TType.STRING, len(self.targetUserMids))
            for iter512 in self.targetUserMids:
                oprot.writeString(iter512.encode('utf-8') if sys.version_info[0] == 2 else iter512)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.picturePath is not None:
            oprot.writeFieldBegin('picturePath', TType.STRING, 5)
            oprot.writeString(self.picturePath.encode('utf-8') if sys.version_info[0] == 2 else self.picturePath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CreateChatResponse(object):
    """
    Attributes:
     - chat

    """


    def __init__(self, chat=None,):
        self.chat = chat

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.chat = Chat()
                    self.chat.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CreateChatResponse')
        if self.chat is not None:
            oprot.writeFieldBegin('chat', TType.STRUCT, 1)
            self.chat.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Group(object):
    """
    Attributes:
     - id
     - createdTime
     - name
     - pictureStatus
     - members
     - creator
     - invitee
     - notificationDisabled

    """


    def __init__(self, id=None, createdTime=None, name=None, pictureStatus=None, members=None, creator=None, invitee=None, notificationDisabled=None,):
        self.id = id
        self.createdTime = createdTime
        self.name = name
        self.pictureStatus = pictureStatus
        self.members = members
        self.creator = creator
        self.invitee = invitee
        self.notificationDisabled = notificationDisabled

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.createdTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.pictureStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.LIST:
                    self.members = []
                    (_etype516, _size513) = iprot.readListBegin()
                    for _i517 in range(_size513):
                        _elem518 = Contact()
                        _elem518.read(iprot)
                        self.members.append(_elem518)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRUCT:
                    self.creator = Contact()
                    self.creator.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.LIST:
                    self.invitee = []
                    (_etype522, _size519) = iprot.readListBegin()
                    for _i523 in range(_size519):
                        _elem524 = Contact()
                        _elem524.read(iprot)
                        self.invitee.append(_elem524)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.BOOL:
                    self.notificationDisabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Group')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.createdTime is not None:
            oprot.writeFieldBegin('createdTime', TType.I64, 2)
            oprot.writeI64(self.createdTime)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 10)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.pictureStatus is not None:
            oprot.writeFieldBegin('pictureStatus', TType.STRING, 11)
            oprot.writeString(self.pictureStatus.encode('utf-8') if sys.version_info[0] == 2 else self.pictureStatus)
            oprot.writeFieldEnd()
        if self.members is not None:
            oprot.writeFieldBegin('members', TType.LIST, 20)
            oprot.writeListBegin(TType.STRUCT, len(self.members))
            for iter525 in self.members:
                iter525.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.creator is not None:
            oprot.writeFieldBegin('creator', TType.STRUCT, 21)
            self.creator.write(oprot)
            oprot.writeFieldEnd()
        if self.invitee is not None:
            oprot.writeFieldBegin('invitee', TType.LIST, 22)
            oprot.writeListBegin(TType.STRUCT, len(self.invitee))
            for iter526 in self.invitee:
                iter526.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.notificationDisabled is not None:
            oprot.writeFieldBegin('notificationDisabled', TType.BOOL, 31)
            oprot.writeBool(self.notificationDisabled)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TalkException)
TalkException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'reason', 'UTF8', None, ),  # 2
    (3, TType.MAP, 'parameterMap', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ShouldSyncException)
ShouldSyncException.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'syncOpRevision', None, None, ),  # 1
    (2, TType.STRUCT, 'syncScope', [SyncScope, None], None, ),  # 2
    (3, TType.I32, 'syncReason', None, None, ),  # 3
    (4, TType.STRING, 'message', 'UTF8', None, ),  # 4
)
all_structs.append(SyncParamMid)
SyncParamMid.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'mid', 'UTF8', None, ),  # 1
    (2, TType.I32, 'diff', None, None, ),  # 2
    (3, TType.I64, 'revision', None, None, ),  # 3
)
all_structs.append(SyncParamContact)
SyncParamContact.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'syncParamMid', [SyncParamMid, None], None, ),  # 1
    (2, TType.I32, 'contactStatus', None, None, ),  # 2
)
all_structs.append(SyncRelations)
SyncRelations.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'syncAll', None, None, ),  # 1
    (2, TType.LIST, 'syncParamContact', (TType.STRUCT, [SyncParamContact, None], False), None, ),  # 2
    (3, TType.LIST, 'syncParamMid', (TType.STRUCT, [SyncParamMid, None], False), None, ),  # 3
)
all_structs.append(SyncScope)
SyncScope.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'syncProfile', None, None, ),  # 1
    (2, TType.BOOL, 'syncSettings', None, None, ),  # 2
    (3, TType.BOOL, 'syncSticker', None, None, ),  # 3
    (4, TType.BOOL, 'syncThemeShop', None, None, ),  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRUCT, 'contact', [SyncRelations, None], None, ),  # 10
    (11, TType.STRUCT, 'group', [SyncRelations, None], None, ),  # 11
    (12, TType.STRUCT, 'room', [SyncRelations, None], None, ),  # 12
    (13, TType.STRUCT, 'chat', [SyncRelations, None], None, ),  # 13
)
all_structs.append(SecondaryQrCodeException)
SecondaryQrCodeException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'alertMessage', 'UTF8', None, ),  # 2
)
all_structs.append(AuthException)
AuthException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'alertMessage', 'UTF8', None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    (11, TType.STRUCT, 'webAuthDetails', [WebAuthDetails, None], None, ),  # 11
)
all_structs.append(ChannelException)
ChannelException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'reason', 'UTF8', None, ),  # 2
    (3, TType.MAP, 'parameterMap', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(LiffException)
LiffException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'payload', [LiffErrorPayload, None], None, ),  # 3
)
all_structs.append(Contact)
Contact.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'mid', 'UTF8', None, ),  # 1
    (2, TType.I64, 'createdTime', None, None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.I32, 'type', None, None, ),  # 10
    (11, TType.I32, 'status', None, None, ),  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    (21, TType.I32, 'relation', None, None, ),  # 21
    (22, TType.STRING, 'displayName', 'UTF8', None, ),  # 22
    (23, TType.STRING, 'phoneticName', 'UTF8', None, ),  # 23
    (24, TType.STRING, 'pictureStatus', 'UTF8', None, ),  # 24
    (25, TType.STRING, 'thumbnailUrl', 'UTF8', None, ),  # 25
    (26, TType.STRING, 'statusMessage', 'UTF8', None, ),  # 26
    (27, TType.STRING, 'displayNameOverridden', 'UTF8', None, ),  # 27
    (28, TType.I64, 'favoriteTime', None, None, ),  # 28
    None,  # 29
    None,  # 30
    (31, TType.I64, 'capableVoiceCall', None, None, ),  # 31
    (32, TType.BOOL, 'capableVideoCall', None, None, ),  # 32
    (33, TType.BOOL, 'capableMyhome', None, None, ),  # 33
    (34, TType.BOOL, 'capableBuddy', None, None, ),  # 34
    (35, TType.BOOL, 'attributes', None, None, ),  # 35
    (36, TType.I32, 'settings', None, None, ),  # 36
    (37, TType.STRING, 'picturePath', 'UTF8', None, ),  # 37
    (38, TType.STRING, 'recommendParams', 'UTF8', None, ),  # 38
    (39, TType.I32, 'friendRequestStatus', None, None, ),  # 39
    (40, TType.STRING, 'musicProfile', 'UTF8', None, ),  # 40
    None,  # 41
    (42, TType.STRING, 'videoProfile', 'UTF8', None, ),  # 42
    (43, TType.MAP, 'statusMessageContentMetadata', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 43
    (44, TType.STRUCT, 'avatarProfile', [AvatarProfile, None], None, ),  # 44
)
all_structs.append(Chat)
Chat.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.STRING, 'chatMid', 'UTF8', None, ),  # 2
    (3, TType.I64, 'createdTime', None, None, ),  # 3
    (4, TType.BOOL, 'notificationDisabled', None, None, ),  # 4
    (5, TType.I64, 'favoriteTimestamp', None, None, ),  # 5
    (6, TType.STRING, 'chatName', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'picturePath', 'UTF8', None, ),  # 7
    (8, TType.STRUCT, 'extra', [Extra, None], None, ),  # 8
)
all_structs.append(GetChatsRequest)
GetChatsRequest.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'chatMids', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.BOOL, 'withMembers', None, None, ),  # 2
    (3, TType.BOOL, 'withInvitees', None, None, ),  # 3
)
all_structs.append(GetAllChatMidsRequest)
GetAllChatMidsRequest.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'withMemberChats', None, None, ),  # 1
    (2, TType.BOOL, 'withInvitedChats', None, None, ),  # 2
)
all_structs.append(GetAllChatMidsResponse)
GetAllChatMidsResponse.thrift_spec = (
    None,  # 0
    (1, TType.SET, 'memberChatMids', (TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.SET, 'invitedChatMids', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(UpdateChatRequest)
UpdateChatRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'reqSeq', None, None, ),  # 1
    (2, TType.STRUCT, 'chat', [Chat, None], None, ),  # 2
    (3, TType.I32, 'updatedAttribute', None, None, ),  # 3
)
all_structs.append(UpdateChatResponse)
UpdateChatResponse.thrift_spec = (
)
all_structs.append(PeerExtra)
PeerExtra.thrift_spec = (
)
all_structs.append(Extra)
Extra.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'groupExtra', [GroupExtra, None], None, ),  # 1
    (2, TType.STRUCT, 'peerExtra', [PeerExtra, None], None, ),  # 2
)
all_structs.append(GroupExtra)
GroupExtra.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'creator', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'preventedJoinByTicket', None, None, ),  # 2
    (3, TType.STRING, 'invitationTicket', 'UTF8', None, ),  # 3
    (4, TType.MAP, 'memberMids', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 4
    (5, TType.MAP, 'inviteeMids', (TType.STRING, 'UTF8', TType.I64, None, False), None, ),  # 5
)
all_structs.append(Room)
Room.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'mid', 'UTF8', None, ),  # 1
    (2, TType.I64, 'createdTime', None, None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.LIST, 'contacts', (TType.STRUCT, [Contact, None], False), None, ),  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    (31, TType.BOOL, 'notificationDisabled', None, None, ),  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    (40, TType.LIST, 'memberMids', (TType.STRING, 'UTF8', False), None, ),  # 40
)
all_structs.append(AvatarProfile)
AvatarProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'version', 'UTF8', None, ),  # 1
    (2, TType.I64, 'updatedMillis', None, None, ),  # 2
    (3, TType.STRING, 'thumbnail', 'UTF8', None, ),  # 3
)
all_structs.append(Location)
Location.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'title', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'address', 'UTF8', None, ),  # 2
    (3, TType.DOUBLE, 'latitude', None, None, ),  # 3
    (4, TType.DOUBLE, 'longitude', None, None, ),  # 4
    (5, TType.STRING, 'phone', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'categoryId', 'UTF8', None, ),  # 6
    (7, TType.I32, 'provider', None, None, ),  # 7
    (8, TType.STRUCT, 'accuracy', [GeolocationAccuracy, None], None, ),  # 8
    (9, TType.DOUBLE, 'altitudeMeters', None, None, ),  # 9
)
all_structs.append(GeolocationAccuracy)
GeolocationAccuracy.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'radiusMeters', None, None, ),  # 1
    (2, TType.DOUBLE, 'radiusConfidence', None, None, ),  # 2
    (3, TType.DOUBLE, 'altitudeAccuracy', None, None, ),  # 3
    (4, TType.DOUBLE, 'velocityAccuracy', None, None, ),  # 4
    (5, TType.DOUBLE, 'bearingAccuracy', None, None, ),  # 5
)
all_structs.append(Geolocation)
Geolocation.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'longitude', None, None, ),  # 1
    (2, TType.DOUBLE, 'latitude', None, None, ),  # 2
    (3, TType.STRUCT, 'accuracy', [GeolocationAccuracy, None], None, ),  # 3
    (4, TType.DOUBLE, 'altitudeMeters', None, None, ),  # 4
    (5, TType.DOUBLE, 'velocityMetersPerSecond', None, None, ),  # 5
    (6, TType.DOUBLE, 'bearingDegrees', None, None, ),  # 6
)
all_structs.append(NearbyEntry)
NearbyEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'emid', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'distance', None, None, ),  # 2
    (3, TType.DOUBLE, 'lastUpdatedInSec', None, None, ),  # 3
    (4, TType.MAP, 'property', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRUCT, 'profile', [Profile, None], None, ),  # 5
)
all_structs.append(Message)
Message.thrift_spec = (
    None,  # 0
    (1, TType.STRING, '_from', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'to', 'UTF8', None, ),  # 2
    (3, TType.I32, 'toType', None, None, ),  # 3
    (4, TType.STRING, 'id', 'UTF8', None, ),  # 4
    (5, TType.I64, 'createdTime', None, None, ),  # 5
    (6, TType.I64, 'deliveredTime', None, None, ),  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'text', 'UTF8', None, ),  # 10
    (11, TType.STRUCT, 'location', [Location, None], None, ),  # 11
    None,  # 12
    None,  # 13
    (14, TType.BOOL, 'hasContent', None, None, ),  # 14
    (15, TType.I32, 'contentType', None, None, ),  # 15
    None,  # 16
    (17, TType.STRING, 'contentPreview', 'BINARY', None, ),  # 17
    (18, TType.MAP, 'contentMetadata', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 18
    (19, TType.I32, 'sessionId', None, None, ),  # 19
    (20, TType.LIST, 'chunks', (TType.STRING, 'BINARY', False), None, ),  # 20
    (21, TType.STRING, 'relatedMessageId', 'UTF8', None, ),  # 21
    (22, TType.I32, 'messageRelationType', None, None, ),  # 22
    (23, TType.I32, 'readCount', None, None, ),  # 23
    (24, TType.I32, 'relatedMessageServiceCode', None, None, ),  # 24
    (25, TType.I32, 'appExtensionType', None, None, ),  # 25
)
all_structs.append(Profile)
Profile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'mid', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'userid', 'UTF8', None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'phone', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'email', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'regionCode', 'UTF8', None, ),  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.STRING, 'displayName', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'phoneticName', 'UTF8', None, ),  # 21
    (22, TType.STRING, 'pictureStatus', 'UTF8', None, ),  # 22
    (23, TType.STRING, 'thumbnailUrl', 'UTF8', None, ),  # 23
    (24, TType.STRING, 'statusMessage', 'UTF8', None, ),  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    (31, TType.BOOL, 'allowSearchByUserid', None, None, ),  # 31
    (32, TType.BOOL, 'allowSearchByEmail', None, None, ),  # 32
    (33, TType.STRING, 'picturePath', 'UTF8', None, ),  # 33
    (34, TType.STRING, 'musicProfile', 'UTF8', None, ),  # 34
    (35, TType.STRING, 'videoProfile', 'UTF8', None, ),  # 35
    (36, TType.MAP, 'statusMessageContentMetadata', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 36
    (37, TType.STRUCT, 'avatarProfile', [AvatarProfile, None], None, ),  # 37
)
all_structs.append(FollowProfile)
FollowProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'followMid', [FollowMid, None], None, ),  # 1
    (2, TType.STRING, 'displayName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'picturePath', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'following', None, None, ),  # 4
    (5, TType.BOOL, 'allowFollow', None, None, ),  # 5
    (6, TType.STRUCT, 'followBuddyDetail', [FollowBuddyDetail, None], None, ),  # 6
)
all_structs.append(ContactRegistration)
ContactRegistration.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'contact', [Contact, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'luid', 'UTF8', None, ),  # 10
    (11, TType.I32, 'contactType', None, None, ),  # 11
    (12, TType.STRING, 'contactKey', 'UTF8', None, ),  # 12
)
all_structs.append(Operation)
Operation.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'revision', None, None, ),  # 1
    (2, TType.I64, 'createdTime', None, None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
    (4, TType.I32, 'reqSeq', None, None, ),  # 4
    (5, TType.STRING, 'checksum', 'UTF8', None, ),  # 5
    None,  # 6
    (7, TType.I32, 'status', None, None, ),  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'param1', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'param2', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'param3', 'UTF8', None, ),  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.STRUCT, 'message', [Message, None], None, ),  # 20
)
all_structs.append(SIMInfo)
SIMInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'phoneNumber', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'countryCode', 'UTF8', None, ),  # 2
)
all_structs.append(CallHost)
CallHost.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'host', 'UTF8', None, ),  # 1
    (2, TType.I32, 'port', None, None, ),  # 2
    (3, TType.STRING, 'zone', 'UTF8', None, ),  # 3
)
all_structs.append(GroupCallRoute)
GroupCallRoute.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'token', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'cscf', [CallHost, None], None, ),  # 2
    (3, TType.STRUCT, 'mix', [CallHost, None], None, ),  # 3
    (4, TType.STRING, 'hostMid', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'capabilities', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.I32, 'proto', None, None, ),  # 6
    (7, TType.STRING, 'voipAddress', 'UTF8', None, ),  # 7
    (8, TType.I32, 'voipUdpPort', None, None, ),  # 8
    (9, TType.I32, 'voipTcpPort', None, None, ),  # 9
    (10, TType.STRING, 'fromZone', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'commParam', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'polarisAddress', 'UTF8', None, ),  # 12
    (13, TType.I32, 'polarisUdpPort', None, None, ),  # 13
    (14, TType.STRING, 'polarisZone', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'orionAddress', 'UTF8', None, ),  # 15
)
all_structs.append(CallRoute)
CallRoute.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fromToken', 'UTF8', None, ),  # 1
    (2, TType.I32, 'callFlowType', None, None, ),  # 2
    (3, TType.STRING, 'voipAddress', 'UTF8', None, ),  # 3
    (4, TType.I32, 'voipUdpPort', None, None, ),  # 4
    (5, TType.I32, 'voipTcpPort', None, None, ),  # 5
    (6, TType.STRING, 'fromZone', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'toZone', 'UTF8', None, ),  # 7
    (8, TType.BOOL, 'fakeCall', None, None, ),  # 8
    (9, TType.STRING, 'ringbackTone', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'toMid', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'tunneling', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'commParam', 'UTF8', None, ),  # 12
)
all_structs.append(TestCallRoute)
TestCallRoute.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'token', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'voipServer', [CallHost, None], None, ),  # 2
)
all_structs.append(GroupCall)
GroupCall.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'online', None, None, ),  # 1
    (2, TType.STRING, 'chatMid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'hostMid', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'memberMids', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.I64, 'started', None, None, ),  # 5
    (6, TType.I32, 'mediaType', None, None, ),  # 6
    (7, TType.I32, 'protocol', None, None, ),  # 7
)
all_structs.append(ExtendedProfileBirthday)
ExtendedProfileBirthday.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'year', 'UTF8', None, ),  # 1
    (2, TType.I32, 'yearPrivacyLevelType', None, None, ),  # 2
    (3, TType.BOOL, 'yearEnabled', None, None, ),  # 3
    None,  # 4
    (5, TType.STRING, 'day', 'UTF8', None, ),  # 5
    (6, TType.I32, 'dayPrivacyLevelType', None, None, ),  # 6
    (7, TType.BOOL, 'dayEnabled', None, None, ),  # 7
)
all_structs.append(ExtendedProfile)
ExtendedProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'birthday', [ExtendedProfileBirthday, None], None, ),  # 1
)
all_structs.append(Settings)
Settings.thrift_spec = (
    None,  # 0
    None,  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.BOOL, 'notificationEnable', None, None, ),  # 10
    (11, TType.BOOL, 'notificationMuteExpiration', None, None, ),  # 11
    (12, TType.I64, 'notificationNewMessage', None, None, ),  # 12
    (13, TType.BOOL, 'notificationGroupInvitation', None, None, ),  # 13
    (14, TType.BOOL, 'notificationShowMessage', None, None, ),  # 14
    (15, TType.BOOL, 'notificationIncomingCall', None, None, ),  # 15
    (16, TType.STRING, 'notificationSoundMessage', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'notificationSoundGroup', 'UTF8', None, ),  # 17
    (18, TType.BOOL, 'notificationDisabledWithSub', None, None, ),  # 18
    (19, TType.BOOL, 'notificationPayment', None, None, ),  # 19
    (20, TType.BOOL, 'privacySyncContacts', None, None, ),  # 20
    (21, TType.BOOL, 'privacySearchByPhoneNumber', None, None, ),  # 21
    (22, TType.BOOL, 'privacySearchByUserid', None, None, ),  # 22
    (23, TType.BOOL, 'privacySearchByEmail', None, None, ),  # 23
    (24, TType.BOOL, 'privacyAllowSecondaryDeviceLogin', None, None, ),  # 24
    (25, TType.BOOL, 'privacyProfileImagePostToMyhome', None, None, ),  # 25
    (26, TType.BOOL, 'privacyReceiveMessagesFromNotFriend', None, None, ),  # 26
    (27, TType.BOOL, 'privacyAgreeUseLineCoinToPaidCall', None, None, ),  # 27
    (28, TType.BOOL, 'privacyAgreeUsePaidCall', None, None, ),  # 28
    (29, TType.BOOL, 'privacyAllowFriendRequest', None, None, ),  # 29
    (30, TType.STRING, 'contactMyTicket', 'UTF8', None, ),  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    (40, TType.I32, 'identityProvider', None, None, ),  # 40
    (41, TType.STRING, 'identityIdentifier', 'UTF8', None, ),  # 41
    (42, TType.MAP, 'snsAccounts', (TType.I32, None, TType.STRING, 'UTF8', False), None, ),  # 42
    (43, TType.BOOL, 'phoneRegistration', None, None, ),  # 43
    (44, TType.I32, 'emailConfirmationStatus', None, None, ),  # 44
    (45, TType.I32, 'accountMigrationPincodeType', None, None, ),  # 45
    (46, TType.BOOL, 'enforcedInputAccountMigrationPincode', None, None, ),  # 46
    (47, TType.I32, 'securityCenterSettingsType', None, None, ),  # 47
    (48, TType.BOOL, 'allowUnregistrationSecondaryDevice', None, None, ),  # 48
    None,  # 49
    (50, TType.STRING, 'preferenceLocale', 'UTF8', None, ),  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    (60, TType.MAP, 'customModes', (TType.I32, None, TType.STRING, 'UTF8', False), None, ),  # 60
    (61, TType.BOOL, 'e2eeEnable', None, None, ),  # 61
    (62, TType.BOOL, 'hitokotoBackupRequested', None, None, ),  # 62
    (63, TType.BOOL, 'privacyProfileMusicPostToMyhome', None, None, ),  # 63
    None,  # 64
    (65, TType.BOOL, 'privacyAllowNearby', None, None, ),  # 65
    (66, TType.BOOL, 'agreementNearbyTime', None, None, ),  # 66
    (67, TType.I64, 'agreementSquareTime', None, None, ),  # 67
    (68, TType.BOOL, 'notificationMention', None, None, ),  # 68
    (69, TType.I64, 'botUseAgreementAcceptedAt', None, None, ),  # 69
    (70, TType.I64, 'agreementShakeFunction', None, None, ),  # 70
    (71, TType.I64, 'agreementMobileContactName', None, None, ),  # 71
    (72, TType.BOOL, 'notificationThumbnail', None, None, ),  # 72
    (73, TType.I64, 'agreementSoundToText', None, None, ),  # 73
    (74, TType.STRING, 'privacyPolicyVersion', 'UTF8', None, ),  # 74
    (75, TType.I64, 'agreementAdByWebAccess', None, None, ),  # 75
    (76, TType.I64, 'agreementPhoneNumberMatching', None, None, ),  # 76
    (77, TType.I64, 'agreementCommunicationInfo', None, None, ),  # 77
    (78, TType.I32, 'privacySharePersonalInfoToFriends', None, None, ),  # 78
    (79, TType.I64, 'agreementThingsWirelessCommunication', None, None, ),  # 79
    (80, TType.I64, 'agreementGdpr', None, None, ),  # 80
    (81, TType.I32, 'privacyStatusMessageHistory', None, None, ),  # 81
    (82, TType.I64, 'agreementProvideLocation', None, None, ),  # 82
    (83, TType.I64, 'agreementBeacon', None, None, ),  # 83
    None,  # 84
    (85, TType.I32, 'privacyAllowProfileHistory', None, None, ),  # 85
    (86, TType.I64, 'agreementContentsSuggest', None, None, ),  # 86
    (87, TType.I64, 'agreementContentsSuggestDataCollection', None, None, ),  # 87
    (88, TType.I32, 'privacyAgeResult', None, None, ),  # 88
    (89, TType.BOOL, 'privacyAgeResultReceived', None, None, ),  # 89
    (90, TType.I64, 'agreementOcrImageCollection', None, None, ),  # 90
    (91, TType.BOOL, 'privacyAllowFollow', None, None, ),  # 91
    (92, TType.BOOL, 'privacyShowFollowList', None, None, ),  # 92
    (93, TType.BOOL, 'notificationBadgeTalkOnly', None, None, ),  # 93
)
all_structs.append(LiffNoneContext)
LiffNoneContext.thrift_spec = (
)
all_structs.append(LiffChatContext)
LiffChatContext.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'chatMid', 'UTF8', None, ),  # 1
)
all_structs.append(LiffSquareChatContext)
LiffSquareChatContext.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'squareChatMid', 'UTF8', None, ),  # 1
)
all_structs.append(LiffContext)
LiffContext.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'none', [LiffNoneContext, None], None, ),  # 1
    (2, TType.STRUCT, 'chat', [LiffChatContext, None], None, ),  # 2
    (3, TType.STRUCT, 'squareChat', [LiffSquareChatContext, None], None, ),  # 3
)
all_structs.append(LiffAdvertisingId)
LiffAdvertisingId.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'advertisingId', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'tracking', None, None, ),  # 2
)
all_structs.append(LiffDeviceSetting)
LiffDeviceSetting.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'videoAutoPlayAllowed', None, None, ),  # 1
    (2, TType.STRUCT, 'advertisingId', [LiffAdvertisingId, None], None, ),  # 2
)
all_structs.append(LiffViewRequest)
LiffViewRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'liffId', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'context', [LiffContext, None], None, ),  # 2
    (3, TType.STRING, 'lang', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'deviceSetting', [LiffDeviceSetting, None], None, ),  # 4
)
all_structs.append(LiffView)
LiffView.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'url', 'UTF8', None, ),  # 2
    None,  # 3
    (4, TType.I32, 'titleTextColor', None, None, ),  # 4
    (5, TType.I32, 'titleBackgroundColor', None, None, ),  # 5
    (6, TType.STRING, 'titleIconUrl', 'UTF8', None, ),  # 6
    (7, TType.I32, 'titleSubtextColor', None, None, ),  # 7
    (8, TType.I32, 'titleButtonColor', None, None, ),  # 8
    (9, TType.I32, 'progressBarColor', None, None, ),  # 9
    (10, TType.I32, 'progressBackgroundColor', None, None, ),  # 10
    (11, TType.BOOL, 'trustedDomain', None, None, ),  # 11
    (12, TType.BOOL, 'suspendable', None, None, ),  # 12
    (13, TType.BOOL, 'maxBrightness', None, None, ),  # 13
    (14, TType.I32, 'titleButtonAreaBackgroundColor', None, None, ),  # 14
    (15, TType.I32, 'titleButtonAreaBorderColor', None, None, ),  # 15
    (16, TType.BOOL, 'suspendableV2', None, None, ),  # 16
    (17, TType.I32, 'menuStyle', None, None, ),  # 17
    (18, TType.BOOL, 'moduleMode', None, None, ),  # 18
    (19, TType.I32, 'pinToHomeServiceId', None, None, ),  # 19
)
all_structs.append(LiffViewResponse)
LiffViewResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'view', [LiffView, None], None, ),  # 1
    (2, TType.STRING, 'contextToken', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'accessToken', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'featureToken', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'features', (TType.I32, None, False), None, ),  # 5
    (6, TType.STRING, 'channelId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'idToken', 'UTF8', None, ),  # 7
    (8, TType.LIST, 'scopes', (TType.STRING, 'UTF8', False), None, ),  # 8
    (9, TType.LIST, 'launchOptions', (TType.I32, None, False), None, ),  # 9
)
all_structs.append(LiffRevokeTokenRequest)
LiffRevokeTokenRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'accessToken', 'UTF8', None, ),  # 1
)
all_structs.append(LiffErrorConsentRequired)
LiffErrorConsentRequired.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'channelId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'consentUrl', 'UTF8', None, ),  # 2
)
all_structs.append(LiffErrorPayload)
LiffErrorPayload.thrift_spec = (
    None,  # 0
    None,  # 1
    None,  # 2
    (3, TType.STRUCT, 'consentRequired', [LiffErrorConsentRequired, None], None, ),  # 3
)
all_structs.append(LoginRequest)
LoginRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.I32, 'identityProvider', None, None, ),  # 2
    (3, TType.STRING, 'identifier', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'password', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'keepLoggedIn', None, None, ),  # 5
    (6, TType.STRING, 'accessLocation', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'systemName', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'certificate', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'verifier', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'secret', 'BINARY', None, ),  # 10
    (11, TType.I32, 'e2eeVersion', None, None, ),  # 11
)
all_structs.append(LoginResult)
LoginResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'certificate', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'verifier', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'pinCode', 'UTF8', None, ),  # 4
    (5, TType.I32, 'type', None, None, ),  # 5
    (6, TType.I64, 'lastPrimaryBindTime', None, None, ),  # 6
    (7, TType.STRING, 'displayMessage', 'UTF8', None, ),  # 7
    (8, TType.STRUCT, 'sessionForSMSConfirm', [VerificationSessionData, None], None, ),  # 8
    (9, TType.STRUCT, 'tokenIssueResult', [TokenIssueResult, None], None, ),  # 9
)
all_structs.append(DeviceInfo)
DeviceInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'deviceName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'systemName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'systemVersion', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'model', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'webViewVersion', 'UTF8', None, ),  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.I32, 'carrierCode', None, None, ),  # 10
    (11, TType.STRING, 'carrierName', 'UTF8', None, ),  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.I32, 'applicationType', None, None, ),  # 20
)
all_structs.append(TokenIssueResult)
TokenIssueResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'accessToken', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'refreshToken', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'appId', 'UTF8', None, ),  # 3
)
all_structs.append(AuthLoginRequest)
AuthLoginRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'authLoginVersion', None, None, ),  # 1
    (2, TType.MAP, 'metaData', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.STRING, 'cipherText', 'UTF8', None, ),  # 3
)
all_structs.append(AuthSessionRequest)
AuthSessionRequest.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'metaData', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(AuthLoginResponse)
AuthLoginResponse.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'metaData', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.STRING, 'cipherText', 'UTF8', None, ),  # 2
)
all_structs.append(OpenSessionRequest)
OpenSessionRequest.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'metaData', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
)
all_structs.append(OpenSessionResponse)
OpenSessionResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authSessionId', 'UTF8', None, ),  # 1
)
all_structs.append(AccountIdentifier)
AccountIdentifier.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.STRING, 'identifier', 'UTF8', None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    (11, TType.STRING, 'countryCode', 'UTF8', None, ),  # 11
)
all_structs.append(Device)
Device.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'udid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'deviceModel', 'UTF8', None, ),  # 2
)
all_structs.append(SocialLogin)
SocialLogin.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.STRING, 'accessToken', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'countryCode', 'UTF8', None, ),  # 3
)
all_structs.append(VerifySocialLoginResponse)
VerifySocialLoginResponse.thrift_spec = (
    None,  # 0
    None,  # 1
    (2, TType.BOOL, 'accountExist', None, None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    (11, TType.STRUCT, 'userProfile', [UserProfile, None], None, ),  # 11
    (12, TType.BOOL, 'sameUdidFromAccount', None, None, ),  # 12
)
all_structs.append(GetAcctVerifMethodResponse)
GetAcctVerifMethodResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'availableMethod', None, None, ),  # 1
    (2, TType.BOOL, 'sameAccountFromAuthFactor', None, None, ),  # 2
)
all_structs.append(GetCountryInfoResponse)
GetCountryInfoResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'countryCode', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'countryInEEA', None, None, ),  # 2
    (3, TType.SET, 'countrySetOfEEA', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(SimCard)
SimCard.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'countryCode', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'hni', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'carrierName', 'UTF8', None, ),  # 3
)
all_structs.append(EncryptedPassword)
EncryptedPassword.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'encryptionKeyVersion', None, None, ),  # 1
    (2, TType.STRING, 'cipherText', 'UTF8', None, ),  # 2
)
all_structs.append(GetPhoneVerifMethodResponse)
GetPhoneVerifMethodResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'availableMethods', (TType.I32, None, False), None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'prettifiedPhoneNumber', 'UTF8', None, ),  # 3
)
all_structs.append(UserPhoneNumber)
UserPhoneNumber.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'phoneNumber', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'countryCode', 'UTF8', None, ),  # 2
)
all_structs.append(SendPinCodeForPhoneResponse)
SendPinCodeForPhoneResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'availableMethods', (TType.I32, None, False), None, ),  # 1
)
all_structs.append(VerifyPhoneResponse)
VerifyPhoneResponse.thrift_spec = (
    None,  # 0
    None,  # 1
    (2, TType.BOOL, 'accountExist', None, None, ),  # 2
    (3, TType.BOOL, 'sameUdidFromAccount', None, None, ),  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    (11, TType.STRUCT, 'userProfile', [UserProfile, None], None, ),  # 11
)
all_structs.append(RegisterPrimaryResponse)
RegisterPrimaryResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
)
all_structs.append(MigratePrimaryResponse)
MigratePrimaryResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
)
all_structs.append(GetSecondAuthMethodResponse)
GetSecondAuthMethodResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'secondAuthMethod', None, None, ),  # 1
)
all_structs.append(WebAuthDetails)
WebAuthDetails.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'baseUrl', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'token', 'UTF8', None, ),  # 2
)
all_structs.append(IssueWebAuthDetailsForSecondAuthResponse)
IssueWebAuthDetailsForSecondAuthResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'webAuthDetails', [WebAuthDetails, None], None, ),  # 1
)
all_structs.append(IssueWebAuthDetailsForAcctVerifResponse)
IssueWebAuthDetailsForAcctVerifResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'webAuthDetails', [WebAuthDetails, None], None, ),  # 1
)
all_structs.append(UserProfile)
UserProfile.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'displayName', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'profileImageUrl', 'UTF8', None, ),  # 2
)
all_structs.append(VerifyAccountUsingPwdResponse)
VerifyAccountUsingPwdResponse.thrift_spec = (
    None,  # 0
    None,  # 1
    (2, TType.STRUCT, 'userProfile', [UserProfile, None], None, ),  # 2
)
all_structs.append(SetPasswordResponse)
SetPasswordResponse.thrift_spec = (
)
all_structs.append(ExchangeEncryptionKeyResponse)
ExchangeEncryptionKeyResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'publicKey', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'nonce', 'UTF8', None, ),  # 2
)
all_structs.append(ExchangeEncryptionKeyRequest)
ExchangeEncryptionKeyRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'authKeyVersion', None, None, ),  # 1
    (2, TType.STRING, 'publicKey', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'nonce', 'UTF8', None, ),  # 3
)
all_structs.append(GetUserProfileResponse)
GetUserProfileResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'userProfile', [UserProfile, None], None, ),  # 1
)
all_structs.append(ValidateProfileResponse)
ValidateProfileResponse.thrift_spec = (
)
all_structs.append(SecurityCenterResult)
SecurityCenterResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'uri', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'token', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'cookiePath', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'skip', None, None, ),  # 4
)
all_structs.append(IdentityCredentialResponse)
IdentityCredentialResponse.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'metaData', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.I32, 'responseType', None, None, ),  # 2
    (3, TType.STRING, 'confirmationVerifier', 'UTF8', None, ),  # 3
    (4, TType.I64, 'timeoutInSeconds', None, None, ),  # 4
)
all_structs.append(IdentityCredential)
IdentityCredential.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'provider', None, None, ),  # 1
    (2, TType.STRING, 'identifier', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'password', 'UTF8', None, ),  # 3
)
all_structs.append(IdentifierConfirmationRequest)
IdentifierConfirmationRequest.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'metaData', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.BOOL, 'forceRegistration', None, None, ),  # 2
    (3, TType.STRING, 'verificationCode', 'UTF8', None, ),  # 3
)
all_structs.append(IdentityCredentialRequest)
IdentityCredentialRequest.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'metaData', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
    (2, TType.I32, 'identityProvider', None, None, ),  # 2
    (3, TType.STRING, 'cipherKeyId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'cipherText', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'confirmationRequest', [IdentifierConfirmationRequest, None], None, ),  # 5
)
all_structs.append(AuthKeyExchangeResponse)
AuthKeyExchangeResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'publicKey', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'nonce', 'UTF8', None, ),  # 2
)
all_structs.append(AuthKeyExchangeRequest)
AuthKeyExchangeRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'authKeyVersion', None, None, ),  # 1
    (2, TType.STRING, 'publicKey', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'nonce', 'UTF8', None, ),  # 3
)
all_structs.append(Configurations)
Configurations.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'revision', None, None, ),  # 1
    (2, TType.MAP, 'configMap', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(FriendRequest)
FriendRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'eMid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'mid', 'UTF8', None, ),  # 2
    (3, TType.I32, 'direction', None, None, ),  # 3
    (4, TType.I32, 'method', None, None, ),  # 4
    (5, TType.STRING, 'param', 'UTF8', None, ),  # 5
    (6, TType.I64, 'timestamp', None, None, ),  # 6
    (7, TType.I64, 'seqId', None, None, ),  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'displayName', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'picturePath', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'pictureStatus', 'UTF8', None, ),  # 12
)
all_structs.append(FriendRequestsInfo)
FriendRequestsInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'totalIncomingCount', None, None, ),  # 1
    (2, TType.I32, 'totalOutgoingCount', None, None, ),  # 2
    (3, TType.LIST, 'recentIncomings', (TType.STRUCT, [FriendRequest, None], False), None, ),  # 3
    (4, TType.LIST, 'recentOutgoings', (TType.STRUCT, [FriendRequest, None], False), None, ),  # 4
    (5, TType.I32, 'totalIncomingLimit', None, None, ),  # 5
    (6, TType.I32, 'totalOutgoingLimit', None, None, ),  # 6
)
all_structs.append(Ringtone)
Ringtone.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'title', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'artist', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'oid', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'channelId', 'UTF8', None, ),  # 4
)
all_structs.append(RingbackTone)
RingbackTone.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'uuid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'trackId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'title', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'oid', 'UTF8', None, ),  # 4
    (5, TType.MAP, 'tids', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.STRING, 'sid', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'artist', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'channelId', 'UTF8', None, ),  # 8
)
all_structs.append(ClientNetworkStatus)
ClientNetworkStatus.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'networkType', None, None, ),  # 1
)
all_structs.append(MessageBoxV2MessageId)
MessageBoxV2MessageId.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'deliveredTime', None, None, ),  # 1
    (2, TType.I64, 'messageId', None, None, ),  # 2
)
all_structs.append(ExtendedMessageBox)
ExtendedMessageBox.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'midType', None, None, ),  # 2
    None,  # 3
    (4, TType.STRUCT, 'lastDeliveredMessageId', [MessageBoxV2MessageId, None], None, ),  # 4
    (5, TType.I64, 'lastSeenMessageId', None, None, ),  # 5
    (6, TType.I64, 'unreadCount', None, None, ),  # 6
    (7, TType.LIST, 'lastMessages', (TType.STRUCT, [Message, None], False), None, ),  # 7
    (8, TType.I64, 'lastRemovedMessageId', None, None, ),  # 8
    (9, TType.I64, 'lastRemovedTime', None, None, ),  # 9
)
all_structs.append(MessageBoxList)
MessageBoxList.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'messageBoxes', (TType.STRUCT, [ExtendedMessageBox, None], False), None, ),  # 1
    (2, TType.BOOL, 'hasNext', None, None, ),  # 2
)
all_structs.append(InstantNews)
InstantNews.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'newsId', None, None, ),  # 1
    (2, TType.STRING, 'newsService', 'UTF8', None, ),  # 2
    (3, TType.I64, 'ttlMillis', None, None, ),  # 3
    (4, TType.STRING, 'category', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'categoryBgColor', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'categoryColor', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'title', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'url', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'image', 'UTF8', None, ),  # 9
)
all_structs.append(UserAuthStatus)
UserAuthStatus.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'phoneNumberRegistered', None, None, ),  # 1
    (2, TType.LIST, 'registeredSnsIdTypes', (TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'accountMigrationCheckType', None, None, ),  # 3
)
all_structs.append(AnalyticsInfo)
AnalyticsInfo.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'gaSamplingRate', None, None, ),  # 1
    (2, TType.STRING, 'tmid', 'UTF8', None, ),  # 2
)
all_structs.append(MessageBoxListRequest)
MessageBoxListRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'minChatId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'maxChatId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'activeOnly', None, None, ),  # 3
    (4, TType.I32, 'messageBoxCountLimit', None, None, ),  # 4
    (5, TType.BOOL, 'withUnreadCount', None, None, ),  # 5
    (6, TType.I32, 'lastMessagesPerMessageBoxCount', None, None, ),  # 6
    (7, TType.BOOL, 'unreadOnly', None, None, ),  # 7
)
all_structs.append(VerificationSessionData)
VerificationSessionData.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sessionId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'method', None, None, ),  # 2
    (3, TType.STRING, 'callback', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'normalizedPhone', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'countryCode', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'nationalSignificantNumber', 'UTF8', None, ),  # 6
    (7, TType.LIST, 'availableVerificationMethods', (TType.I32, None, False), None, ),  # 7
    (8, TType.STRING, 'callerIdMask', 'UTF8', None, ),  # 8
)
all_structs.append(GetEncryptedIdentityV3Response)
GetEncryptedIdentityV3Response.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'wrappedNonce', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'kdfParameter1', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'kdfParameter2', 'BINARY', None, ),  # 3
)
all_structs.append(RegisterWithSnsIdResult)
RegisterWithSnsIdResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'userCreated', None, None, ),  # 2
    (3, TType.BOOL, 'recommendEmailRegistration', None, None, ),  # 3
)
all_structs.append(SnsIdUserStatus)
SnsIdUserStatus.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'userExisting', None, None, ),  # 1
    (2, TType.BOOL, 'phoneNumberRegistered', None, None, ),  # 2
    (3, TType.BOOL, 'sameDevice', None, None, ),  # 3
    (4, TType.I32, 'accountMigrationCheckType', None, None, ),  # 4
)
all_structs.append(PhoneVerificationResult)
PhoneVerificationResult.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'verificationResult', None, None, ),  # 1
    (2, TType.I32, 'accountMigrationCheckType', None, None, ),  # 2
    (3, TType.BOOL, 'recommendAddFriends', None, None, ),  # 3
)
all_structs.append(CreateQrSessionRequest)
CreateQrSessionRequest.thrift_spec = (
)
all_structs.append(CreateQrSessionResponse)
CreateQrSessionResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authSessionId', 'UTF8', None, ),  # 1
)
all_structs.append(CreateQrCodeRequest)
CreateQrCodeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authSessionId', 'UTF8', None, ),  # 1
)
all_structs.append(CreateQrCodeResponse)
CreateQrCodeResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'callbackUrl', 'UTF8', None, ),  # 1
)
all_structs.append(CheckQrCodeVerifiedRequest)
CheckQrCodeVerifiedRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authSessionId', 'UTF8', None, ),  # 1
)
all_structs.append(CheckQrCodeVerifiedResponse)
CheckQrCodeVerifiedResponse.thrift_spec = (
)
all_structs.append(CreatePinCodeRequest)
CreatePinCodeRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authSessionId', 'UTF8', None, ),  # 1
)
all_structs.append(CreatePinCodeResponse)
CreatePinCodeResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pinCode', 'UTF8', None, ),  # 1
)
all_structs.append(CheckPinCodeVerifiedRequest)
CheckPinCodeVerifiedRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authSessionId', 'UTF8', None, ),  # 1
)
all_structs.append(CheckPinCodeVerifiedResponse)
CheckPinCodeVerifiedResponse.thrift_spec = (
)
all_structs.append(VerifyCertificateRequest)
VerifyCertificateRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authSessionId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'certificate', 'UTF8', None, ),  # 2
)
all_structs.append(VerifyCertificateResponse)
VerifyCertificateResponse.thrift_spec = (
)
all_structs.append(QrCodeLoginRequest)
QrCodeLoginRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authSessionId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'systemName', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'autoLoginIsRequired', None, None, ),  # 3
)
all_structs.append(QrCodeLoginResponse)
QrCodeLoginResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'certificate', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'accessToken', 'UTF8', None, ),  # 2
    (3, TType.I64, 'lastBindTimestamp', None, None, ),  # 3
    (4, TType.MAP, 'metaData', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
)
all_structs.append(SendPostbackRequest)
SendPostbackRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'messageId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'url', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'chatMID', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'originMID', 'UTF8', None, ),  # 4
)
all_structs.append(ChannelToken)
ChannelToken.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'token', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'obsToken', 'UTF8', None, ),  # 2
    (3, TType.I64, 'expiration', None, None, ),  # 3
    (4, TType.STRING, 'refreshToken', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'channelAccessToken', 'UTF8', None, ),  # 5
)
all_structs.append(WebLoginResponse)
WebLoginResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'returnUrl', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'optionalReturnUrl', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'redirectConfirmationPageUrl', 'UTF8', None, ),  # 3
)
all_structs.append(WebLoginRequest)
WebLoginRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hookedFullUrl', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sessionString', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'fromIAB', None, None, ),  # 3
    (4, TType.STRING, 'sourceApplication', 'UTF8', None, ),  # 4
)
all_structs.append(ChannelProvider)
ChannelProvider.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'certified', None, None, ),  # 2
)
all_structs.append(ChannelDomain)
ChannelDomain.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'host', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'removed', None, None, ),  # 2
)
all_structs.append(ChannelInfo)
ChannelInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'channelId', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'entryPageUrl', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'descriptionText', 'UTF8', None, ),  # 5
    (6, TType.STRUCT, 'provider', [ChannelProvider, None], None, ),  # 6
    (7, TType.I32, 'publicType', None, None, ),  # 7
    (8, TType.STRING, 'iconImage', 'UTF8', None, ),  # 8
    (9, TType.LIST, 'permissions', (TType.STRING, 'UTF8', False), None, ),  # 9
    None,  # 10
    (11, TType.STRING, 'iconThumbnailImage', 'UTF8', None, ),  # 11
    (12, TType.LIST, 'channelConfigurations', (TType.I32, None, False), None, ),  # 12
    (13, TType.BOOL, 'lcsAllApiUsable', None, None, ),  # 13
    (14, TType.SET, 'allowedPermissions', (TType.I32, None, False), None, ),  # 14
    (15, TType.LIST, 'channelDomains', (TType.STRUCT, [ChannelDomain, None], False), None, ),  # 15
    (16, TType.I64, 'updatedTimestamp', None, None, ),  # 16
    (17, TType.SET, 'featureLicenses', (TType.I32, None, False), None, ),  # 17
)
all_structs.append(RequestTokenResponse)
RequestTokenResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestToken', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'returnUrl', 'UTF8', None, ),  # 2
)
all_structs.append(ApprovedChannelInfo)
ApprovedChannelInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'channelInfo', [ChannelInfo, None], None, ),  # 1
    (2, TType.I64, 'approvedAt', None, None, ),  # 2
)
all_structs.append(ApprovedChannelInfos)
ApprovedChannelInfos.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'approvedChannelInfos', (TType.STRUCT, [ApprovedChannelInfo, None], False), None, ),  # 1
    (2, TType.I64, 'revision', None, None, ),  # 2
)
all_structs.append(CoinUseReservationItem)
CoinUseReservationItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'itemId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'itemName', 'UTF8', None, ),  # 2
    (3, TType.I32, 'amount', None, None, ),  # 3
)
all_structs.append(CoinUseReservation)
CoinUseReservation.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'channelId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'shopOrderId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'appStoreCode', None, None, ),  # 3
    (4, TType.LIST, 'items', (TType.STRUCT, [CoinUseReservationItem, None], False), None, ),  # 4
    (5, TType.STRING, 'country', 'UTF8', None, ),  # 5
)
all_structs.append(ChannelDomains)
ChannelDomains.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'channelDomains', (TType.STRUCT, [ChannelDomain, None], False), None, ),  # 1
    (2, TType.I64, 'revision', None, None, ),  # 2
)
all_structs.append(ChannelIdWithLastUpdated)
ChannelIdWithLastUpdated.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'channelId', 'UTF8', None, ),  # 1
    (2, TType.I64, 'lastUpdated', None, None, ),  # 2
)
all_structs.append(ChannelNotificationSetting)
ChannelNotificationSetting.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'channelId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'notificationReceivable', None, None, ),  # 3
    (4, TType.BOOL, 'messageReceivable', None, None, ),  # 4
    (5, TType.BOOL, 'showDefault', None, None, ),  # 5
)
all_structs.append(ChannelSettings)
ChannelSettings.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'unapprovedMessageReceivable', None, None, ),  # 1
)
all_structs.append(BuddyDetail)
BuddyDetail.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'mid', 'UTF8', None, ),  # 1
    (2, TType.I64, 'memberCount', None, None, ),  # 2
    (3, TType.I64, 'onAir', None, None, ),  # 3
    (4, TType.BOOL, 'businessAccount', None, None, ),  # 4
    (5, TType.BOOL, 'addable', None, None, ),  # 5
    (6, TType.SET, 'acceptableContentTypes', (TType.I32, None, False), None, ),  # 6
    (7, TType.BOOL, 'capableMyhome', None, None, ),  # 7
    (8, TType.BOOL, 'freePhoneCallable', None, None, ),  # 8
    (9, TType.STRING, 'phoneNumberToDial', 'UTF8', None, ),  # 9
    (10, TType.BOOL, 'needPermissionApproval', None, None, ),  # 10
    (11, TType.BOOL, 'channelId', None, None, ),  # 11
    (12, TType.STRING, 'channelProviderName', 'UTF8', None, ),  # 12
    (13, TType.I32, 'iconType', None, None, ),  # 13
    (14, TType.I32, 'botType', None, None, ),  # 14
    (15, TType.BOOL, 'showRichMenu', None, None, ),  # 15
    (16, TType.BOOL, 'richMenuRevision', None, None, ),  # 16
    (17, TType.I32, 'onAirLabel', None, None, ),  # 17
    (18, TType.I32, 'useTheme', None, None, ),  # 18
    (19, TType.STRING, 'themeId', 'UTF8', None, ),  # 19
    (20, TType.BOOL, 'useBar', None, None, ),  # 20
    (21, TType.BOOL, 'barRevision', None, None, ),  # 21
    (22, TType.I64, 'useBackground', None, None, ),  # 22
    (23, TType.STRING, 'backgroundId', 'UTF8', None, ),  # 23
    (24, TType.BOOL, 'statusBarEnabled', None, None, ),  # 24
    (25, TType.BOOL, 'statusBarRevision', None, None, ),  # 25
    (26, TType.STRING, 'searchId', 'UTF8', None, ),  # 26
    (27, TType.I32, 'onAirVersion', None, None, ),  # 27
    (28, TType.BOOL, 'blockable', None, None, ),  # 28
)
all_structs.append(ProximityMatchCandidateEntry)
ProximityMatchCandidateEntry.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'contact', [Contact, None], None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    (11, TType.STRUCT, 'buddyDetail', [BuddyDetail, None], None, ),  # 11
)
all_structs.append(ProximityMatchCandidateResult)
ProximityMatchCandidateResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'users', (TType.STRUCT, [ProximityMatchCandidateEntry, None], False), None, ),  # 1
    (2, TType.LIST, 'buddies', (TType.STRUCT, [ProximityMatchCandidateEntry, None], False), None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    (91, TType.BOOL, 'endOfResult', None, None, ),  # 91
)
all_structs.append(PendingAgreementsResponse)
PendingAgreementsResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'pendingAgreements', (TType.I32, None, False), None, ),  # 1
)
all_structs.append(PushRecvReport)
PushRecvReport.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pushTrackingId', 'UTF8', None, ),  # 1
    (2, TType.I64, 'recvTimestamp', None, None, ),  # 2
    (3, TType.I64, 'battery', None, None, ),  # 3
    (4, TType.I32, 'batteryMode', None, None, ),  # 4
    (5, TType.I32, 'clientNetworkType', None, None, ),  # 5
    (6, TType.STRING, 'carrierCode', 'UTF8', None, ),  # 6
    (7, TType.I64, 'displayTimestamp', None, None, ),  # 7
)
all_structs.append(RegisterWithPhoneNumberResult)
RegisterWithPhoneNumberResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'authToken', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'recommendEmailRegistration', None, None, ),  # 2
    (3, TType.STRING, 'certificate', 'UTF8', None, ),  # 3
)
all_structs.append(TMessageReadRangeEntry)
TMessageReadRangeEntry.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'startMessageId', None, None, ),  # 1
    (2, TType.I64, 'endMessageId', None, None, ),  # 2
    (3, TType.I64, 'startTime', None, None, ),  # 3
    (4, TType.I64, 'endTime', None, None, ),  # 4
)
all_structs.append(TMessageReadRange)
TMessageReadRange.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'chatId', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'ranges', (TType.STRING, 'UTF8', TType.LIST, (TType.STRUCT, [TMessageReadRangeEntry, None], False), False), None, ),  # 2
)
all_structs.append(ContactModification)
ContactModification.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.STRING, 'luid', 'UTF8', None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    (11, TType.LIST, 'phones', (TType.STRING, 'UTF8', False), None, ),  # 11
    (12, TType.LIST, 'emails', (TType.STRING, 'UTF8', False), None, ),  # 12
    (13, TType.LIST, 'userids', (TType.STRING, 'UTF8', False), None, ),  # 13
    (14, TType.STRING, 'mobileContactName', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'phoneticName', 'UTF8', None, ),  # 15
)
all_structs.append(FollowMid)
FollowMid.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'mid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'eMid', 'UTF8', None, ),  # 2
)
all_structs.append(FollowRequest)
FollowRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'followMid', [FollowMid, None], None, ),  # 1
)
all_structs.append(RemoveFollowerRequest)
RemoveFollowerRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'followMid', [FollowMid, None], None, ),  # 1
)
all_structs.append(UnfollowRequest)
UnfollowRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'followMid', [FollowMid, None], None, ),  # 1
)
all_structs.append(GetFollowersRequest)
GetFollowersRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'followMid', [FollowMid, None], None, ),  # 1
    (2, TType.STRING, 'cursor', 'UTF8', None, ),  # 2
)
all_structs.append(GetFollowersResponse)
GetFollowersResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'profiles', (TType.STRUCT, [FollowProfile, None], False), None, ),  # 1
    (2, TType.STRING, 'cursor', 'UTF8', None, ),  # 2
    (3, TType.I64, 'followingCount', None, None, ),  # 3
    (4, TType.I64, 'followerCount', None, None, ),  # 4
)
all_structs.append(GetFollowingsRequest)
GetFollowingsRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'followMid', [FollowMid, None], None, ),  # 1
    (2, TType.STRING, 'cursor', 'UTF8', None, ),  # 2
)
all_structs.append(GetFollowingsResponse)
GetFollowingsResponse.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'profiles', (TType.STRUCT, [FollowProfile, None], False), None, ),  # 1
    (2, TType.STRING, 'cursor', 'UTF8', None, ),  # 2
    (3, TType.I64, 'followingCount', None, None, ),  # 3
    (4, TType.I64, 'followerCount', None, None, ),  # 4
)
all_structs.append(FollowBuddyDetail)
FollowBuddyDetail.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'iconType', None, None, ),  # 1
)
all_structs.append(Ticket)
Ticket.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.I64, 'expirationTime', None, None, ),  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    (21, TType.I32, 'maxUseCount', None, None, ),  # 21
)
all_structs.append(ChatRoomAnnouncementContentMetadata)
ChatRoomAnnouncementContentMetadata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'replace', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sticonOwnership', 'UTF8', None, ),  # 2
)
all_structs.append(ChatRoomAnnouncementContents)
ChatRoomAnnouncementContents.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'displayFields', None, None, ),  # 1
    (2, TType.STRING, 'text', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'link', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'thumbnail', 'UTF8', None, ),  # 4
    (5, TType.STRUCT, 'contentMetadata', [ChatRoomAnnouncementContentMetadata, None], None, ),  # 5
)
all_structs.append(ChatRoomAnnouncement)
ChatRoomAnnouncement.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'announcementSeq', None, None, ),  # 1
    (2, TType.I32, 'type', None, None, ),  # 2
    (3, TType.STRUCT, 'contents', [ChatRoomAnnouncementContents, None], None, ),  # 3
    (4, TType.STRING, 'creatorMid', 'UTF8', None, ),  # 4
    (5, TType.I64, 'createdTime', None, None, ),  # 5
    (6, TType.I32, 'deletePermission', None, None, ),  # 6
)
all_structs.append(ChatEffectMetaContent)
ChatEffectMetaContent.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'url', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'checksum', 'UTF8', None, ),  # 2
)
all_structs.append(ChatEffectMeta)
ChatEffectMeta.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'contentId', None, None, ),  # 1
    (2, TType.STRUCT, 'category', [Category, None], None, ),  # 2
    (3, TType.I32, 'name', None, None, ),  # 3
    (4, TType.STRUCT, 'defaultContent', [ChatEffectMetaContent, None], None, ),  # 4
    (5, TType.MAP, 'optionalContents', (TType.I32, None, TType.STRUCT, [ChatEffectMetaContent, None], False), None, ),  # 5
    (6, TType.SET, 'keywords', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I64, 'beginTimeMillis', None, None, ),  # 7
    (8, TType.I64, 'endTimeMillis', None, None, ),  # 8
    (9, TType.I64, 'createdTimeMillis', None, None, ),  # 9
    (10, TType.I64, 'updatedTimeMillis', None, None, ),  # 10
)
all_structs.append(ChatRoomBGM)
ChatRoomBGM.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'creatorMid', 'UTF8', None, ),  # 1
    (2, TType.I64, 'createdTime', None, None, ),  # 2
    (3, TType.STRING, 'chatRoomBGMInfo', 'UTF8', None, ),  # 3
)
all_structs.append(E2EEGroupSharedKey)
E2EEGroupSharedKey.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'keyVersion', None, None, ),  # 1
    (2, TType.I32, 'groupKeyId', None, None, ),  # 2
    (3, TType.STRING, 'creator', 'UTF8', None, ),  # 3
    (4, TType.I32, 'creatorKeyId', None, None, ),  # 4
    (5, TType.STRING, 'receiver', 'UTF8', None, ),  # 5
    (6, TType.I32, 'receiverKeyId', None, None, ),  # 6
    (7, TType.STRING, 'encryptedSharedKey', 'BINARY', None, ),  # 7
    (8, TType.SET, 'allowedTypes', (TType.I32, None, False), None, ),  # 8
    (9, TType.I32, 'specVersion', None, None, ),  # 9
)
all_structs.append(E2EEPublicKey)
E2EEPublicKey.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'version', None, None, ),  # 1
    (2, TType.I32, 'keyId', None, None, ),  # 2
    None,  # 3
    (4, TType.STRING, 'keyData', 'BINARY', None, ),  # 4
    (5, TType.I64, 'createdTime', None, None, ),  # 5
)
all_structs.append(E2EENegotiationResult)
E2EENegotiationResult.thrift_spec = (
    None,  # 0
    (1, TType.SET, 'allowedTypes', (TType.I32, None, False), None, ),  # 1
    (2, TType.STRUCT, 'publicKey', [E2EEPublicKey, None], None, ),  # 2
    (3, TType.I32, 'specVersion', None, None, ),  # 3
)
all_structs.append(RSAKey)
RSAKey.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'keynm', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'nvalue', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'evalue', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'sessionKey', 'UTF8', None, ),  # 4
)
all_structs.append(Category)
Category.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id', None, None, ),  # 1
    (2, TType.I32, 'name', None, None, ),  # 2
)
all_structs.append(FindChatByTicketRequest)
FindChatByTicketRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ticketId', 'UTF8', None, ),  # 1
)
all_structs.append(FindChatByTicketResponse)
FindChatByTicketResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'chat', [Chat, None], None, ),  # 1
)
all_structs.append(ReissueChatTicketRequest)
ReissueChatTicketRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'reqSeq', None, None, ),  # 1
    (2, TType.STRING, 'groupMid', 'UTF8', None, ),  # 2
)
all_structs.append(ReissueChatTicketResponse)
ReissueChatTicketResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ticketId', 'UTF8', None, ),  # 1
)
all_structs.append(AcceptChatInvitationByTicketRequest)
AcceptChatInvitationByTicketRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'reqSeq', None, None, ),  # 1
    (2, TType.STRING, 'chatMid', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'ticketId', 'UTF8', None, ),  # 3
)
all_structs.append(AcceptChatInvitationByTicketResponse)
AcceptChatInvitationByTicketResponse.thrift_spec = (
)
all_structs.append(RejectChatInvitationRequest)
RejectChatInvitationRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'reqSeq', None, None, ),  # 1
    (2, TType.STRING, 'chatMid', 'UTF8', None, ),  # 2
)
all_structs.append(RejectChatInvitationResponse)
RejectChatInvitationResponse.thrift_spec = (
)
all_structs.append(InviteIntoChatRequest)
InviteIntoChatRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'reqSeq', None, None, ),  # 1
    (2, TType.STRING, 'chatMid', 'UTF8', None, ),  # 2
    (3, TType.SET, 'targetUserMids', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(InviteIntoChatResponse)
InviteIntoChatResponse.thrift_spec = (
)
all_structs.append(DeleteOtherFromChatRequest)
DeleteOtherFromChatRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'reqSeq', None, None, ),  # 1
    (2, TType.STRING, 'chatMid', 'UTF8', None, ),  # 2
    (3, TType.SET, 'targetUserMids', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(DeleteOtherFromChatResponse)
DeleteOtherFromChatResponse.thrift_spec = (
)
all_structs.append(CancelChatInvitationRequest)
CancelChatInvitationRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'reqSeq', None, None, ),  # 1
    (2, TType.STRING, 'chatMid', 'UTF8', None, ),  # 2
    (3, TType.SET, 'targetUserMids', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(CancelChatInvitationResponse)
CancelChatInvitationResponse.thrift_spec = (
)
all_structs.append(DeleteSelfFromChatRequest)
DeleteSelfFromChatRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'reqSeq', None, None, ),  # 1
    (2, TType.STRING, 'chatMid', 'UTF8', None, ),  # 2
    (3, TType.I64, 'lastSeenMessageDeliveredTime', None, None, ),  # 3
    (4, TType.STRING, 'lastSeenMessageId', 'UTF8', None, ),  # 4
    (5, TType.I64, 'lastMessageDeliveredTime', None, None, ),  # 5
    (6, TType.STRING, 'lastMessageId', 'UTF8', None, ),  # 6
)
all_structs.append(DeleteSelfFromChatResponse)
DeleteSelfFromChatResponse.thrift_spec = (
)
all_structs.append(AcceptChatInvitationRequest)
AcceptChatInvitationRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'reqSeq', None, None, ),  # 1
    (2, TType.STRING, 'chatMid', 'UTF8', None, ),  # 2
)
all_structs.append(AcceptChatInvitationResponse)
AcceptChatInvitationResponse.thrift_spec = (
)
all_structs.append(CreateChatRequest)
CreateChatRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'reqSeq', None, None, ),  # 1
    (2, TType.I32, 'type', None, None, ),  # 2
    (3, TType.I32, 'name', None, None, ),  # 3
    (4, TType.SET, 'targetUserMids', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRING, 'picturePath', 'UTF8', None, ),  # 5
)
all_structs.append(CreateChatResponse)
CreateChatResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'chat', [Chat, None], None, ),  # 1
)
all_structs.append(Group)
Group.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I64, 'createdTime', None, None, ),  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    None,  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    (10, TType.STRING, 'name', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'pictureStatus', 'UTF8', None, ),  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    (20, TType.LIST, 'members', (TType.STRUCT, [Contact, None], False), None, ),  # 20
    (21, TType.STRUCT, 'creator', [Contact, None], None, ),  # 21
    (22, TType.LIST, 'invitee', (TType.STRUCT, [Contact, None], False), None, ),  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    (31, TType.BOOL, 'notificationDisabled', None, None, ),  # 31
)
fix_spec(all_structs)
del all_structs
